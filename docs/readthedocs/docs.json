{
  "decl": {
    "description": "",
    "kind": "package",
    "modules": [
      {
        "aliases": [
          {
            "deprecated": "",
            "description": "",
            "kind": "alias",
            "name": "__version__",
            "summary": "",
            "value": "\"V0.5\""
          },
          {
            "deprecated": "",
            "description": "",
            "kind": "alias",
            "name": "pi",
            "summary": "",
            "value": "#kgen.float_literal<31415926535897932384626433832795028841971693937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555954930381966446229489|10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>"
          },
          {
            "deprecated": "",
            "description": "",
            "kind": "alias",
            "name": "e",
            "summary": "",
            "value": "#kgen.float_literal<139176029617103116050446718533256319885171|51200000000000000000000000000000000000000>"
          },
          {
            "deprecated": "",
            "description": "",
            "kind": "alias",
            "name": "c",
            "summary": "",
            "value": "299792458"
          }
        ],
        "description": "",
        "functions": [],
        "kind": "module",
        "name": "__init__",
        "structs": [],
        "summary": "NuMojo is a library for numerical computing in Mojo ðŸ”¥ similar to NumPy, SciPy in Python.",
        "traits": []
      },
      {
        "aliases": [],
        "description": "NuMojo comes a wide range of functions, types, and constants. \nIf you manually import everything, \nit will make the header of the file too long. \nOn the other hand, using `from numojo import *` would import a lot of functions \nthat you never use and would pollute the naming space.\n\nThis module tries to find out a balance by providing a list of things \nthat can be imported at one time. \nThe list contains the functions or types \nthat are the most essential for a user. \n\nYou can use the following code to import them:\n\n```mojo\nfrom numojo.prelude import *\n```",
        "functions": [],
        "kind": "module",
        "name": "prelude",
        "structs": [],
        "summary": "prelude =======",
        "traits": []
      }
    ],
    "name": "numojo",
    "packages": [
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "idx",
                "summary": "",
                "value": "Item"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "shape",
                "summary": "",
                "value": "NDArrayShape"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "Shape",
                "summary": "",
                "value": "NDArrayShape"
              }
            ],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "i8",
                "summary": "Data type alias for DType.int8",
                "value": "int8"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "i16",
                "summary": "Data type alias for DType.int16",
                "value": "int16"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "i32",
                "summary": "Data type alias for DType.int32",
                "value": "int32"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "i64",
                "summary": "Data type alias for DType.int64",
                "value": "int64"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "isize",
                "summary": "Data type alias for DType.index",
                "value": "index"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "intp",
                "summary": "Data type alias for DType.index",
                "value": "index"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "u8",
                "summary": "Data type alias for DType.uint8",
                "value": "uint8"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "u16",
                "summary": "Data type alias for DType.uint16",
                "value": "uint16"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "u32",
                "summary": "Data type alias for DType.uint32",
                "value": "uint32"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "u64",
                "summary": "Data type alias for DType.uint64",
                "value": "uint64"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "f16",
                "summary": "Data type alias for DType.float16",
                "value": "float16"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "f32",
                "summary": "Data type alias for DType.float32",
                "value": "float32"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "f64",
                "summary": "Data type alias for DType.float64",
                "value": "float64"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "boolean",
                "summary": "Data type alias for DType.bool",
                "value": "bool"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "ci8",
                "summary": "Data type alias for ComplexSIMD[DType.int16, 1] ",
                "value": "{int8, int8}"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "ci16",
                "summary": "Data type alias for ComplexSIMD[DType.int32, 1] ",
                "value": "{int16, int16}"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "ci32",
                "summary": "Data type alias for ComplexSIMD[DType.int64, 1] ",
                "value": "{int32, int32}"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "ci64",
                "summary": "Data type alias for ComplexSIMD[DType.uint8, 1] ",
                "value": "{int64, int64}"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "cu8",
                "summary": "Data type alias for ComplexSIMD[DType.uint16, 1] ",
                "value": "{uint8, uint8}"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "cu16",
                "summary": "Data type alias for ComplexSIMD[DType.uint32, 1] ",
                "value": "{uint16, uint16}"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "cu32",
                "summary": "Data type alias for ComplexSIMD[DType.uint64, 1] ",
                "value": "{uint32, uint32}"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "cu64",
                "summary": "Data type alias for ComplexSIMD[DType.float16, 1] ",
                "value": "{uint64, uint64}"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "cf16",
                "summary": "Data type alias for ComplexSIMD[DType.float32, 1] ",
                "value": "{float16, float16}"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "cf32",
                "summary": "Data type alias for ComplexSIMD[DType.float64, 1] ",
                "value": "{float32, float32}"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "cf64",
                "summary": "",
                "value": "{float64, float64}"
              }
            ],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "datatypes",
            "structs": [
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "ranks",
                    "summary": "",
                    "value": "List(int8, uint8, float16, int16, uint16, float32, int32, uint32, int64, uint64, float64)"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "int_ranks",
                    "summary": "",
                    "value": "List(int8, uint8, int16, uint16, int32, uint32, int64, uint64)"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "float_ranks",
                    "summary": "",
                    "value": "List(float16, float32, float64)"
                  }
                ],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "get_type_rank",
                    "overloads": [
                      {
                        "args": [],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "get_type_rank",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "get_type_rank[dtype: DType]() -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "get_inttype_rank",
                    "overloads": [
                      {
                        "args": [],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "get_inttype_rank",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "get_inttype_rank[dtype: DType]() -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "get_floattype_rank",
                    "overloads": [
                      {
                        "args": [],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "get_floattype_rank",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "get_floattype_rank[dtype: DType]() -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "coerce_floats",
                    "overloads": [
                      {
                        "args": [],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "coerce_floats",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T1",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T2",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "DType",
                        "returnsDoc": "",
                        "signature": "coerce_floats[T1: DType, T2: DType]() -> DType",
                        "summary": "Coerces two floating point types."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "coerce_signed_ints",
                    "overloads": [
                      {
                        "args": [],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "coerce_signed_ints",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T1",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T2",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "DType",
                        "returnsDoc": "",
                        "signature": "coerce_signed_ints[T1: DType, T2: DType]() -> DType",
                        "summary": "Coerces two signed integer types."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "coerce_unsigned_ints",
                    "overloads": [
                      {
                        "args": [],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "coerce_unsigned_ints",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T1",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T2",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "DType",
                        "returnsDoc": "",
                        "signature": "coerce_unsigned_ints[T1: DType, T2: DType]() -> DType",
                        "summary": "Coerces two unsigned integer types."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "coerce_mixed_ints",
                    "overloads": [
                      {
                        "args": [],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "coerce_mixed_ints",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T1",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T2",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "DType",
                        "returnsDoc": "",
                        "signature": "coerce_mixed_ints[T1: DType, T2: DType]() -> DType",
                        "summary": "Coerces a signed and unsigned integer type."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "coerce_mixed",
                    "overloads": [
                      {
                        "args": [],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "coerce_mixed",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "int_type",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "float_type",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "DType",
                        "returnsDoc": "",
                        "signature": "coerce_mixed[int_type: DType, float_type: DType]() -> DType",
                        "summary": "Coerces a mixed integer and floating point type."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "result",
                    "overloads": [
                      {
                        "args": [],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "result",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T1",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T2",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "DType",
                        "returnsDoc": "",
                        "signature": "result[T1: DType, T2: DType]() -> DType",
                        "summary": "Returns the coerced output type for two input types."
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "TypeCoercion",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "UnknownDestructibility"
                ],
                "summary": "Handles type coercion using a promotion matrix approach."
              }
            ],
            "summary": "Datatypes Module - Implements datatypes aliases, conversions",
            "traits": []
          },
          {
            "aliases": [
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "item",
                "summary": "",
                "value": "Item"
              }
            ],
            "description": "`Item` is a series of `Int` on the heap.",
            "functions": [],
            "kind": "module",
            "name": "item",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "register_passable",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndim",
                    "summary": "",
                    "type": "Int"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Initial values.",
                            "kind": "argument",
                            "name": "*args",
                            "passingKind": "pos_or_kw",
                            "type": "T"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Parameter:\n    T: Type of values. It can be converted to `Int` with `index()`.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T",
                            "passingKind": "pos_or_kw",
                            "type": "Indexer"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__[T: Indexer](out self, *args: T)",
                        "summary": "Construct the tuple."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Initial values.",
                            "kind": "argument",
                            "name": "args",
                            "passingKind": "pos_or_kw",
                            "type": "List[T]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Parameter:\n    T: Type of values. It can be converted to `Int` with `index()`.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T",
                            "passingKind": "pos_or_kw",
                            "type": "IndexerCollectionElement"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__[T: IndexerCollectionElement](out self, args: List[T])",
                        "summary": "Construct the tuple."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Initial values.",
                            "kind": "argument",
                            "name": "args",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, args: VariadicList[Int])",
                        "summary": "Construct the tuple."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Number of dimensions.",
                            "kind": "argument",
                            "name": "ndim",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "Whether the shape is initialized. If yes, the values will be set to 0. If no, the values will be uninitialized.",
                            "kind": "argument",
                            "name": "initialized",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "This method is useful when you want to create a Item with given ndim\nwithout knowing the Item values.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, ndim: Int, initialized: Bool)",
                        "summary": "Construct Item with number of dimensions."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__copyinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "The tuple to copy.",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__copyinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__copyinit__(out self, other: Self)",
                        "summary": "Copy construct the tuple."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__del__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__del__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__del__(owned self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__getitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "The index of the value to get.",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "T"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Parameter:\n    T: Type of values. It can be converted to `Int` with `index()`.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T",
                            "passingKind": "pos_or_kw",
                            "type": "Indexer"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "The value at the specified index.",
                        "signature": "__getitem__[T: Indexer](self, idx: T) -> Int",
                        "summary": "Get the value at the specified index."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__setitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "The index of the value to set.",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "T"
                          },
                          {
                            "convention": "read",
                            "description": "The value to set.",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "U"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Parameter:\n    T: Type of values. It can be converted to `Int` with `index()`.\n    U: Type of values. It can be converted to `Int` with `index()`.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "T",
                            "passingKind": "pos_or_kw",
                            "type": "Indexer"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "U",
                            "passingKind": "pos_or_kw",
                            "type": "Indexer"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__[T: Indexer, U: Indexer](self, idx: T, val: U)",
                        "summary": "Set the value at the specified index."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__len__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__len__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "The length of the tuple.",
                        "signature": "__len__(self) -> Int",
                        "summary": "Get the length of the tuple."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__iter__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Notes:\n    Need to add lifetimes after the new release.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__iter__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "_ItemIter",
                        "returnsDoc": "An iterator of NDArray elements.",
                        "signature": "__iter__(self) -> _ItemIter",
                        "summary": "Iterate over elements of the NDArray, returning copied value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__repr__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__repr__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "__repr__(self) -> String",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__str__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__str__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "__str__(self) -> String",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "write_to",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "writer",
                            "passingKind": "pos_or_kw",
                            "type": "W"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "write_to",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "W",
                            "passingKind": "pos_or_kw",
                            "type": "Writer"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "write_to[W: Writer](self, mut writer: W)",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Item",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "CollectionElement",
                  "Copyable",
                  "Movable",
                  "Stringable",
                  "UnknownDestructibility"
                ],
                "summary": ""
              }
            ],
            "summary": "Implements Item type.",
            "traits": []
          },
          {
            "aliases": [],
            "description": "- `Matrix` type (2DArray).\n- `_MatrixIter` type (for iteration).\n- Dunder methods for initialization, indexing, slicing, and arithmetics.\n- Auxiliary functions.",
            "functions": [
              {
                "kind": "function",
                "name": "broadcast_to",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "Matrix[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "Tuple[Int, Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n\n```console\n> from numojo import Matrix\n> a = Matrix.fromstring(\"1 2 3\", shape=(1, 3))\n> print(mat.broadcast_to(a, (3, 3)))\n[[1.0   2.0     3.0]\n [1.0   2.0     3.0]\n [1.0   2.0     3.0]]\n> a = Matrix.fromstring(\"1 2 3\", shape=(3, 1))\n> print(mat.broadcast_to(a, (3, 3)))\n[[1.0   1.0     1.0]\n [2.0   2.0     2.0]\n [3.0   3.0     3.0]]\n> a = Matrix.fromstring(\"1\", shape=(1, 1))\n> print(mat.broadcast_to(a, (3, 3)))\n[[1.0   1.0     1.0]\n [1.0   1.0     1.0]\n [1.0   1.0     1.0]]\n> a = Matrix.fromstring(\"1 2\", shape=(1, 2))\n> print(mat.broadcast_to(a, (1, 2)))\n[[1.0   2.0]]\n> a = Matrix.fromstring(\"1 2 3 4\", shape=(2, 2))\n> print(mat.broadcast_to(a, (4, 2)))\nUnhandled exception caught during execution: Cannot broadcast shape 2x2 to shape 4x2!\n```",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "broadcast_to",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Matrix[dtype]",
                    "returnsDoc": "",
                    "signature": "broadcast_to[dtype: DType](A: Matrix[dtype], shape: Tuple[Int, Int]) -> Matrix[dtype]",
                    "summary": "Broadcase the vector to the given shape."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "Tuple[Int, Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "broadcast_to",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Matrix[dtype]",
                    "returnsDoc": "",
                    "signature": "broadcast_to[dtype: DType](A: SIMD[dtype, 1], shape: Tuple[Int, Int]) -> Matrix[dtype]",
                    "summary": "Broadcase the scalar to the given shape."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "matrix",
            "structs": [
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "width",
                    "summary": "Vector size of the data type.",
                    "value": "Int(simdwidthof[::DType,__mlir_type.!kgen.target]())"
                  }
                ],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "NuMojo's `Matrix` is `NDArray` with fixed `ndim` known at compile time.\nIt may be different in some behaviors compared to `numpy.matrix`.\n\n- For `__getitem__`, passing in two `Int` returns a scalar,\nand passing in one `Int` or two `Slice` returns a `Matrix`.\n- We do not need auxiliary types `NDArrayShape` and `NDArrayStrides`\nas the shape and strides information is fixed in length `Tuple[Int,Int]`.\n\nThe matrix can be uniquely defined by the following features:\n    1. The data buffer of all items.\n    2. The shape of the matrix.\n    3. The data type of the elements (compile-time known).\n\nAttributes:\n    - _buf (saved as row-majored, C-type)\n    - shape\n    - size (shape[0] * shape[1])\n    - strides (shape[1], 1)\n\nDefault constructor:\n- [dtype], shape\n- [dtype], data\n\n[checklist] CORE METHODS that have been implemented:\n- [x] `Matrix.any` and `mat.logic.all`\n- [x] `Matrix.any` and `mat.logic.any`\n- [x] `Matrix.argmax` and `mat.sorting.argmax`\n- [x] `Matrix.argmin` and `mat.sorting.argmin`\n- [x] `Matrix.argsort` and `mat.sorting.argsort`\n- [x] `Matrix.astype`\n- [x] `Matrix.cumprod` and `mat.mathematics.cumprod`\n- [x] `Matrix.cumsum` and `mat.mathematics.cumsum`\n- [x] `Matrix.fill` and `mat.creation.full`\n- [x] `Matrix.flatten`\n- [x] `Matrix.inv` and `mat.linalg.inv`\n- [x] `Matrix.max` and `mat.sorting.max`\n- [x] `Matrix.mean` and `mat.statistics.mean`\n- [x] `Matrix.min` and `mat.sorting.min`\n- [x] `Matrix.prod` and `mat.mathematics.prod`\n- [x] `Matrix.reshape`\n- [x] `Matrix.resize`\n- [x] `Matrix.round` and `mat.mathematics.round` (TODO: Check this after next Mojo update)\n- [x] `Matrix.std` and `mat.statistics.std`\n- [x] `Matrix.sum` and `mat.mathematics.sum`\n- [x] `Matrix.trace` and `mat.linalg.trace`\n- [x] `Matrix.transpose` and `mat.linalg.transpose` (also `Matrix.T`)\n- [x] `Matrix.variance` and `mat.statistics.variance` (`var` is primitive)",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "shape",
                    "summary": "Shape of Matrix.",
                    "type": "Tuple[Int, Int]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "size",
                    "summary": "Size of Matrix.",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "strides",
                    "summary": "Strides of matrix.",
                    "type": "Tuple[Int, Int]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "flags",
                    "summary": "Information about the memory layout of the array.",
                    "type": "Dict[String, Bool]"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "List of shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: Tuple[Int, Int])",
                        "summary": "Construct a matrix without initializing data."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "data",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, data: Self)",
                        "summary": "Construct a matrix from matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "data",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, data: NDArray[dtype])",
                        "summary": "Construct a matrix from array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__copyinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__copyinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__copyinit__(out self, other: Self)",
                        "summary": "Copy other into self."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__moveinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__moveinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__moveinit__(out self, owned other: Self)",
                        "summary": "Move other into self."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__del__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__del__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__del__(owned self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__getitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "The row number.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "owned",
                            "description": "The column number.",
                            "kind": "argument",
                            "name": "y",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "A scalar matching the dtype of the array.",
                        "signature": "__getitem__(self, owned x: Int, owned y: Int) -> SIMD[dtype, 1]",
                        "summary": "Return the scalar at the index."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "The row number.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, owned x: Int) -> Self",
                        "summary": "Return the corresponding row at the index."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Slice"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "y",
                            "passingKind": "pos_or_kw",
                            "type": "Slice"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, x: Slice, y: Slice) -> Self",
                        "summary": "Get item from two slices."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Slice"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "y",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, x: Slice, owned y: Int) -> Self",
                        "summary": "Get item from one slice and one int."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "y",
                            "passingKind": "pos_or_kw",
                            "type": "Slice"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, owned x: Int, y: Slice) -> Self",
                        "summary": "Get item from one int and one slice."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "indices",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, indices: List[Int]) -> Self",
                        "summary": "Get item by a list of integers."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__setitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "The row number.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "The column number.",
                            "kind": "argument",
                            "name": "y",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "The value to be set.",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(self, x: Int, y: Int, value: SIMD[dtype, 1])",
                        "summary": "Return the scalar at the index."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "The row number.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "Matrix (row vector).",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(self, owned x: Int, value: Self)",
                        "summary": "Set the corresponding row at the index with the given matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__lt__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__lt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__lt__(self, other: Self) -> Matrix[bool]",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix.ones(shape=(4, 4))\nprint(A < 2)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__lt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__lt__(self, other: SIMD[dtype, 1]) -> Matrix[bool]",
                        "summary": "Matrix less than scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__le__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__le__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__le__(self, other: Self) -> Matrix[bool]",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix.ones(shape=(4, 4))\nprint(A <= 2)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__le__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__le__(self, other: SIMD[dtype, 1]) -> Matrix[bool]",
                        "summary": "Matrix less than and equal to scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__eq__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__eq__(self, other: Self) -> Matrix[bool]",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix.ones(shape=(4, 4))\nprint(A == 2)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__eq__(self, other: SIMD[dtype, 1]) -> Matrix[bool]",
                        "summary": "Matrix less than and equal to scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ne__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__ne__(self, other: Self) -> Matrix[bool]",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix.ones(shape=(4, 4))\nprint(A != 2)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__ne__(self, other: SIMD[dtype, 1]) -> Matrix[bool]",
                        "summary": "Matrix less than and equal to scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__gt__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__gt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__gt__(self, other: Self) -> Matrix[bool]",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix.ones(shape=(4, 4))\nprint(A > 2)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__gt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__gt__(self, other: SIMD[dtype, 1]) -> Matrix[bool]",
                        "summary": "Matrix greater than scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ge__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ge__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__ge__(self, other: Self) -> Matrix[bool]",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix.ones(shape=(4, 4))\nprint(A >= 2)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ge__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[bool]",
                        "returnsDoc": "",
                        "signature": "__ge__(self, other: SIMD[dtype, 1]) -> Matrix[bool]",
                        "summary": "Matrix greater than and equal to scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__add__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__add__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__add__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nvar A = Matrix.ones(shape=(4, 4))\nprint(A + 2)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__add__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__add__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Add matrix to scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__sub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__sub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__sub__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix(shape=(4, 4))\nprint(A - 2)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__sub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__sub__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Subtract matrix by scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__mul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mul__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix.ones(shape=(4, 4))\nprint(A * 2)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mul__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Mutiply matrix by scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__matmul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__matmul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__matmul__(self, other: Self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__truediv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__truediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__truediv__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__truediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__truediv__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Divide matrix by scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__pow__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "rhs",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__pow__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__pow__(self, rhs: SIMD[dtype, 1]) -> Self",
                        "summary": "Power of items."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__radd__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix.ones(shape=(4, 4))\nprint(2 + A)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__radd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__radd__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Right-add."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rsub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix.ones(shape=(4, 4))\nprint(2 - A)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rsub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rsub__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Right-sub."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rmul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nfrom numojo import Matrix\nA = Matrix.ones(shape=(4, 4))\nprint(2 * A)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rmul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rmul__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Right-mul."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__iter__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand((4,4))\nfor i in A:\n    print(i)\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__iter__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "_MatrixIter[self, dtype]",
                        "returnsDoc": "An iterator of Matrix elements.",
                        "signature": "__iter__(self) -> _MatrixIter[self, dtype]",
                        "summary": "Iterate over elements of the Matrix, returning copied value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__len__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__len__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "__len__(self) -> Int",
                        "summary": "Returns length of 0-th dimension."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__reversed__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__reversed__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "_MatrixIter[self, dtype, False]",
                        "returnsDoc": "A reversed iterator of Matrix elements.",
                        "signature": "__reversed__(self) -> _MatrixIter[self, dtype, False]",
                        "summary": "Iterate backwards over elements of the Matrix, returning copied value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__str__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__str__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "__str__(self) -> String",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "write_to",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "writer",
                            "passingKind": "pos_or_kw",
                            "type": "W"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "write_to",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "W",
                            "passingKind": "pos_or_kw",
                            "type": "Writer"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "write_to[W: Writer](self, mut writer: W)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "all",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "all",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "all(self) -> SIMD[dtype, 1]",
                        "summary": "Test whether all array elements evaluate to True."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "all",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "all(self, axis: Int) -> Self",
                        "summary": "Test whether all array elements evaluate to True along axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "any",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "any",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "any(self) -> SIMD[dtype, 1]",
                        "summary": "Test whether any array elements evaluate to True."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "any",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "any(self, axis: Int) -> Self",
                        "summary": "Test whether any array elements evaluate to True along axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argmax",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argmax",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[index, 1]",
                        "returnsDoc": "",
                        "signature": "argmax(self) -> SIMD[index, 1]",
                        "summary": "Index of the max. It is first flattened before sorting."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argmax",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[index]",
                        "returnsDoc": "",
                        "signature": "argmax(self, axis: Int) -> Matrix[index]",
                        "summary": "Index of the max along the given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argmin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argmin",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[index, 1]",
                        "returnsDoc": "",
                        "signature": "argmin(self) -> SIMD[index, 1]",
                        "summary": "Index of the min. It is first flattened before sorting."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argmin",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[index]",
                        "returnsDoc": "",
                        "signature": "argmin(self, axis: Int) -> Matrix[index]",
                        "summary": "Index of the min along the given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argsort",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argsort",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[index]",
                        "returnsDoc": "",
                        "signature": "argsort(self) -> Matrix[index]",
                        "summary": "Argsort the Matrix. It is first flattened before sorting."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argsort",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[index]",
                        "returnsDoc": "",
                        "signature": "argsort(self, axis: Int) -> Matrix[index]",
                        "summary": "Argsort the Matrix along the given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "astype",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "astype",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "asdtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[asdtype]",
                        "returnsDoc": "",
                        "signature": "astype[asdtype: DType](self) -> Matrix[asdtype]",
                        "summary": "Copy of the matrix, cast to a specified type."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumprod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(A.cumprod())\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumprod",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "cumprod(self) -> Self",
                        "summary": "Cumprod of flattened matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(A.cumprod(axis=0))\nprint(A.cumprod(axis=1))\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumprod",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "cumprod(self, axis: Int) -> Self",
                        "summary": "Cumprod of Matrix along the axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumsum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumsum",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "cumsum(self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumsum",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "cumsum(self, axis: Int) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fill",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "fill_value",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "See also function `mat.creation.full`.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fill",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "fill(self, fill_value: SIMD[dtype, 1])",
                        "summary": "Fill the matrix with value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "flatten",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "flatten",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "flatten(self) -> Self",
                        "summary": "Return a flattened copy of the matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "inv",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "inv",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "inv(self) -> Self",
                        "summary": "Inverse of matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "max",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "max(self) -> SIMD[dtype, 1]",
                        "summary": "Find max item. It is first flattened before sorting."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "max(self, axis: Int) -> Self",
                        "summary": "Find max item along the given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mean",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "mean(self) -> SIMD[dtype, 1]",
                        "summary": "Calculate the arithmetic average of all items in the Matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "mean(self, axis: Int) -> Self",
                        "summary": "Calculate the arithmetic average of a Matrix along the axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "min",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "min",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "min(self) -> SIMD[dtype, 1]",
                        "summary": "Find min item. It is first flattened before sorting."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "min",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "min(self, axis: Int) -> Self",
                        "summary": "Find min item along the given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "prod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "prod(self) -> SIMD[dtype, 1]",
                        "summary": "Product of all items in the Matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(A.prod(axis=0))\nprint(A.prod(axis=1))\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "prod(self, axis: Int) -> Self",
                        "summary": "Product of items in a Matrix along the axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "reshape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reshape",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "reshape(self, shape: Tuple[Int, Int]) -> Self",
                        "summary": "Change shape and size of matrix and return a new matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "resize",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "resize",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "resize(mut self, shape: Tuple[Int, Int])",
                        "summary": "Change shape and size of matrix in-place."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "round",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "decimals",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "round",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "round(self, decimals: Int) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "std",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "Delta degree of freedom.",
                            "kind": "argument",
                            "name": "ddof",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "std",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "std(self, ddof: Int = 0) -> SIMD[dtype, 1]",
                        "summary": "Compute the standard deviation."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "Delta degree of freedom.",
                            "kind": "argument",
                            "name": "ddof",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "std",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "std(self, axis: Int, ddof: Int = 0) -> Self",
                        "summary": "Compute the standard deviation along axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "sum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(A.sum())\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "sum(self) -> SIMD[dtype, 1]",
                        "summary": "Sum up all items in the Matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(A.sum(axis=0))\nprint(A.sum(axis=1))\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "sum(self, axis: Int) -> Self",
                        "summary": "Sum up the items in a Matrix along the axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "trace",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "trace",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "trace(self) -> SIMD[dtype, 1]",
                        "summary": "Transpose of matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "transpose",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "transpose",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "transpose(self) -> Self",
                        "summary": "Transpose of matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "T",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "T",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "T(self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "variance",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "Delta degree of freedom.",
                            "kind": "argument",
                            "name": "ddof",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "variance",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "variance(self, ddof: Int = 0) -> SIMD[dtype, 1]",
                        "summary": "Compute the variance."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "Delta degree of freedom.",
                            "kind": "argument",
                            "name": "ddof",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "variance",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "variance(self, axis: Int, ddof: Int = 0) -> Self",
                        "summary": "Compute the variance along axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "to_ndarray",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "It makes a copy of the buffer of the matrix.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "to_ndarray",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "",
                        "signature": "to_ndarray(self) -> NDArray[dtype]",
                        "summary": "Create `NDArray` from `Matrix`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "to_numpy",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "to_numpy",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "PythonObject",
                        "returnsDoc": "",
                        "signature": "to_numpy(self) -> PythonObject",
                        "summary": "See `numojo.core.utility.to_numpy`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "full",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "fill_value",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.full(shape=(10, 10), fill_value=100)\n```",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "full",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "full[dtype: DType = float64](shape: Tuple[Int, Int], fill_value: SIMD[dtype, 1] = SIMD(0)) -> Matrix[dtype]",
                        "summary": "Return a matrix with given shape and filled value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "zeros",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.ones(shape=(10, 10))\n```",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "zeros",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "zeros[dtype: DType = float64](shape: Tuple[Int, Int]) -> Matrix[dtype]",
                        "summary": "Return a matrix with given shape and filled with zeros."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "ones",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.ones(shape=(10, 10))\n```",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "ones",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "ones[dtype: DType = float64](shape: Tuple[Int, Int]) -> Matrix[dtype]",
                        "summary": "Return a matrix with given shape and filled with ones."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "identity",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "len",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.identity(12)\n```",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "identity",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "identity[dtype: DType = float64](len: Int) -> Matrix[dtype]",
                        "summary": "Return a matrix with given shape and filled value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The shape of the Matrix.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand((12, 12))\n```\n",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "rand",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The data type of the NDArray elements.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "rand[dtype: DType = float64](shape: Tuple[Int, Int]) -> Matrix[dtype]",
                        "summary": "Return a matrix with random values uniformed distributed between 0 and 1."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fromlist",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "object",
                            "passingKind": "pos_or_kw",
                            "type": "List[SIMD[dtype, 1]]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True))",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "If no shape is passed, the return matrix will be a row vector.\n\nExample:\n```mojo\nfrom numojo import Matrix\nfn main() raises:\n    print(Matrix.fromlist(List[Float64](1, 2, 3, 4, 5), (5, 1)))\n```",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "fromlist",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "fromlist[dtype: DType](object: List[SIMD[dtype, 1]], shape: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True))) -> Matrix[dtype]",
                        "summary": "Create a matrix from a 1-dimensional list into given shape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fromstring",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "String representation of a matrix.",
                            "kind": "argument",
                            "name": "text",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True))",
                            "description": "Shape of the matrix.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Comma, right brackets, and whitespace are treated as seperators of numbers.\nDigits, underscores, and minus signs are treated as a part of the numbers.\n\nIf now shape is passed, the return matrix will be a row vector.\n\nExample:\n```mojo\nfrom numojo.prelude import *\nfrom numojo import Matrix\nfn main() raises:\n    var A = Matrix.fromstring[f32](\n    \"1 2 .3 4 5 6.5 7 1_323.12 9 10, 11.12, 12 13 14 15 16\", (4, 4))\n```\n```console\n[[1.0   2.0     0.30000001192092896     4.0]\n[5.0   6.5     7.0     1323.1199951171875]\n[9.0   10.0    11.119999885559082      12.0]\n[13.0  14.0    15.0    16.0]]\nSize: 4x4  DType: float32\n```\n",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "fromstring",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "fromstring[dtype: DType = float64](text: String, shape: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True))) -> Matrix[dtype]",
                        "summary": "Matrix initialization from string representation of an matrix."
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Matrix",
                "parameters": [
                  {
                    "default": "float64",
                    "description": "Type of item in NDArray. Default type is DType.float64.",
                    "kind": "parameter",
                    "name": "dtype",
                    "passingKind": "pos_or_kw",
                    "type": "DType"
                  }
                ],
                "parentTraits": [
                  "AnyType",
                  "CollectionElement",
                  "Copyable",
                  "Movable",
                  "Sized",
                  "Stringable",
                  "UnknownDestructibility",
                  "Writable"
                ],
                "summary": "`Matrix` is a special case of `NDArray` (2DArray) but has some targeted optimization since the number of dimensions is known at the compile time. It has simpler indexing and slicing methods, which is very useful when users only want to work with 2-dimensional arrays."
              }
            ],
            "summary": "`numojo.Matrix` provides:",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "ndarray",
            "structs": [
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "width",
                    "summary": "Vector size of the data type.",
                    "value": "Int(simdwidthof[::DType,__mlir_type.!kgen.target]())"
                  }
                ],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "The array can be uniquely defined by the following:\n    1. The data buffer of all items.\n    2. The shape of the array.\n    3. The strides (Length of item to travel to next dimension).\n    4. The datatype of the elements.\n\nThe following attributes are also helpful:\n    - The number of dimensions\n    - Size of the array (number of items)\n    - The order of the array: Row vs Columns major",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndim",
                    "summary": "Number of Dimensions.",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "shape",
                    "summary": "Size and shape of NDArray.",
                    "type": "NDArrayShape"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "size",
                    "summary": "Size of NDArray.",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "strides",
                    "summary": "Contains offset, strides.",
                    "type": "NDArrayStrides"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "flags",
                    "summary": "Information about the memory layout of the array.",
                    "type": "Dict[String, Bool]"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Variadic shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayShape"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"C\")",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "The memory is not filled with values.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: NDArrayShape, order: String = String(\"C\"))",
                        "summary": "Initialize an NDArray with given shape."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "List of shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"C\")",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: List[Int], order: String = String(\"C\"))",
                        "summary": "(Overload) Initialize an NDArray with given shape (list of integers)."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Variadic List of shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"C\")",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: VariadicList[Int], order: String = String(\"C\"))",
                        "summary": "(Overload) Initialize an NDArray with given shape (variadic list of integers)."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "strides",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: List[Int], offset: Int, strides: List[Int])",
                        "summary": "Extremely specific NDArray initializer."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayShape"
                          },
                          {
                            "convention": "ref",
                            "description": "",
                            "kind": "argument",
                            "name": "buffer",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[dtype, 1]]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "strides",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayStrides"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: NDArrayShape, ref buffer: UnsafePointer[SIMD[dtype, 1]], offset: Int, strides: NDArrayStrides)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__copyinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "It is a deep copy. So the new array owns the data.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__copyinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__copyinit__(out self, other: Self)",
                        "summary": "Copy other into self."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__moveinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "existing",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__moveinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__moveinit__(out self, owned existing: Self)",
                        "summary": "Move other into self."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__del__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__del__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__del__(owned self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__bool__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__bool__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__bool__(self) -> Bool",
                        "summary": "If all true return true."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__getitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Item"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, index: Item) -> SIMD[dtype, 1]",
                        "summary": "Set the value at the index list."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    `arr[1]` returns the second row of the array.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, idx: Int) -> Self",
                        "summary": "Retreive a slice of the array corresponding to the index at the first dimension."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "*slices",
                            "passingKind": "pos_or_kw",
                            "type": "Slice"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    `arr[1:3, 2:4]` returns the corresponding sliced array (2 x 2).",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, owned *slices: Slice) -> Self",
                        "summary": "Retreive slices of an array from variadic slices."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "slice_list",
                            "passingKind": "pos_or_kw",
                            "type": "List[Slice]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    `arr[1:3, 2:4]` returns the corresponding sliced array (2 x 2).",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, owned slice_list: List[Slice]) -> Self",
                        "summary": "Retreive slices of an array from list of slices."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "A series of either Slice or Int.",
                            "kind": "argument",
                            "name": "*slices",
                            "passingKind": "pos_or_kw",
                            "type": "Variant[Slice, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "A decrease of dimensions may or may not happen when `__getitem__` is\ncalled on an ndarray. An ndarray of X-D array can become Y-D array after\n`__getitem__` where `Y <= X`.\n\nWhether the dimension decerases or not depends on:\n1. What types of arguments are passed into `__getitem__`.\n2. The number of arguments that are passed in `__getitem__`.\n\nPRINCIPAL: The number of dimensions to be decreased is determined by\nthe number of `Int` passed in `__getitem__`.\n\nFor example, `A` is a 10x10x10 ndarray (3-D). Then,\n\n- `A[1, 2, 3]` leads to a 0-D array (scalar), since there are 3 integers.\n- `A[1, 2]` leads to a 1-D array (vector), since there are 2 integers,\nso the dimension decreases by 2.\n- `A[1]` leads to a 2-D array (matrix), since there is 1 integer, so the\ndimension decreases by 1.\n\nThe number of dimensions will not decrease when Slice is passed in\n`__getitem__` or no argument is passed in for a certain dimension\n(it is an implicit slide and a slide of all items will be used).\n\nTake the same example `A` with 10x10x10 in shape. Then,\n\n- `A[1:4, 2:5, 3:6]`, leads to a 3-D array (no decrease in dimension),\nsince there are 3 slices.\n- `A[2:8]`, leads to a 3-D array (no decrease in dimension), since there\nare 1 explicit slice and 2 implicit slices.\n\nWhen there is a mixture of int and slices passed into `__getitem__`,\nthe number of integers will be the number of dimensions to be decreased.\nExample,\n\n- `A[1:4, 2, 2]`, leads to a 1-D array (vector), since there are 2\nintegers, so the dimension decreases by 2.\n\nNote that, even though a slice contains one row, it does not reduce the\ndimensions. Example,\n\n- `A[1:2, 2:3, 3:4]`, leads to a 3-D array (no decrease in dimension),\nsince there are 3 slices.\n\nNote that, when the number of integers equals to the number of\ndimensions, the final outcome is an 0-D array instead of a number.\nThe user has to upack the 0-D array with the method`A.item(0)` to get the\ncorresponding number.\nThis behavior is different from numpy where the latter returns a number.\n\nMore examples for 1-D, 2-D, and 3-D arrays.\n\n```console\nA is a matrix\n[[      -128    -95     65      -11     ]\n[      8       -72     -116    45      ]\n[      45      111     -30     4       ]\n[      84      -120    -115    7       ]]\n2-D array  Shape: [4, 4]  DType: int8\n\nA[0]\n[       -128    -95     65      -11     ]\n1-D array  Shape: [4]  DType: int8\n\nA[0, 1]\n-95\n0-D array  Shape: [0]  DType: int8\n\nA[Slice(1,3)]\n[[      8       -72     -116    45      ]\n[      45      111     -30     4       ]]\n2-D array  Shape: [2, 4]  DType: int8\n\nA[1, Slice(2,4)]\n[       -116    45      ]\n1-D array  Shape: [2]  DType: int8\n\nA[Slice(1,3), Slice(1,3)]\n[[      -72     -116    ]\n[      111     -30     ]]\n2-D array  Shape: [2, 2]  DType: int8\n\nA.item(0,1) as Scalar\n-95\n\n==============================\nA is a vector\n[       43      -127    -30     -111    ]\n1-D array  Shape: [4]  DType: int8\n\nA[0]\n43\n0-D array  Shape: [0]  DType: int8\n\nA[Slice(1,3)]\n[       -127    -30     ]\n1-D array  Shape: [2]  DType: int8\n\nA.item(0) as Scalar\n43\n\n==============================\nA is a 3darray\n[[[     -22     47      22      110     ]\n[     88      6       -105    39      ]\n[     -22     51      105     67      ]\n[     -61     -116    60      -44     ]]\n[[     33      65      125     -35     ]\n[     -65     123     57      64      ]\n[     38      -110    33      98      ]\n[     -59     -17     68      -6      ]]\n[[     -68     -58     -37     -86     ]\n[     -4      101     104     -113    ]\n[     103     1       4       -47     ]\n[     124     -2      -60     -105    ]]\n[[     114     -110    0       -30     ]\n[     -58     105     7       -10     ]\n[     112     -116    66      69      ]\n[     83      -96     -124    48      ]]]\n3-D array  Shape: [4, 4, 4]  DType: int8\n\nA[0]\n[[      -22     47      22      110     ]\n[      88      6       -105    39      ]\n[      -22     51      105     67      ]\n[      -61     -116    60      -44     ]]\n2-D array  Shape: [4, 4]  DType: int8\n\nA[0, 1]\n[       88      6       -105    39      ]\n1-D array  Shape: [4]  DType: int8\n\nA[0, 1, 2]\n-105\n0-D array  Shape: [0]  DType: int8\n\nA[Slice(1,3)]\n[[[     33      65      125     -35     ]\n[     -65     123     57      64      ]\n[     38      -110    33      98      ]\n[     -59     -17     68      -6      ]]\n[[     -68     -58     -37     -86     ]\n[     -4      101     104     -113    ]\n[     103     1       4       -47     ]\n[     124     -2      -60     -105    ]]]\n3-D array  Shape: [2, 4, 4]  DType: int8\n\nA[1, Slice(2,4)]\n[[      38      -110    33      98      ]\n[      -59     -17     68      -6      ]]\n2-D array  Shape: [2, 4]  DType: int8\n\nA[Slice(1,3), Slice(1,3), 2]\n[[      57      33      ]\n[      104     4       ]]\n2-D array  Shape: [2, 2]  DType: int8\n\nA.item(0,1,2) as Scalar\n-105\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "An ndarray with a smaller or equal dimension of the original one.",
                        "signature": "__getitem__(self, owned *slices: Variant[Slice, Int]) -> Self",
                        "summary": "Get items by a series of either slices or integers."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Array of intable values.",
                            "kind": "argument",
                            "name": "indices",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[index]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "If the original array is of shape (i,j,k) and\nthe indices array is of shape (l,m,n), then the output array\nwill be of shape (l,m,n,j,k).\n\nExample:\n```console\n>>>var a = nm.arange[i8](6)\n>>>print(a)\n[       0       1       2       3       4       5       ]\n1-D array  Shape: [6]  DType: int8  C-cont: True  F-cont: True  own data: True\n>>>print(a[nm.array[isize](\"[4, 2, 5, 1, 0, 2]\")])\n[       4       2       5       1       0       2       ]\n1-D array  Shape: [6]  DType: int8  C-cont: True  F-cont: True  own data: True\n\nvar b = nm.arange[i8](12).reshape(Shape(2, 2, 3))\nprint(b)\n[[[     0       1       2       ]\n  [     3       4       5       ]]\n [[     6       7       8       ]\n  [     9       10      11      ]]]\n3-D array  Shape: [2, 2, 3]  DType: int8  C-cont: True  F-cont: False  own data: True\nprint(b[nm.array[isize](\"[2, 0, 1]\")])\n[[[     0       0       0       ]\n  [     0       67      95      ]]\n [[     0       1       2       ]\n  [     3       4       5       ]]\n [[     6       7       8       ]\n  [     9       10      11      ]]]\n3-D array  Shape: [3, 2, 3]  DType: int8  C-cont: True  F-cont: False  own data: True\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "NDArray with items from the array of indices.",
                        "signature": "__getitem__(self, indices: NDArray[index]) -> Self",
                        "summary": "Get items from 0-th dimension of an ndarray of indices."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "A list of Int.",
                            "kind": "argument",
                            "name": "indices",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n>>>var a = nm.arange[i8](6)\n>>>print(a)\n[       0       1       2       3       4       5       ]\n1-D array  Shape: [6]  DType: int8  C-cont: True  F-cont: True  own data: True\n>>>print(a[List[Int](4, 2, 5, 1, 0, 2)])\n[       4       2       5       1       0       2       ]\n1-D array  Shape: [6]  DType: int8  C-cont: True  F-cont: True  own data: True\n\nvar b = nm.arange[i8](12).reshape(Shape(2, 2, 3))\nprint(b)\n[[[     0       1       2       ]\n  [     3       4       5       ]]\n [[     6       7       8       ]\n  [     9       10      11      ]]]\n3-D array  Shape: [2, 2, 3]  DType: int8  C-cont: True  F-cont: False  own data: True\nprint(b[List[Int](2, 0, 1)])\n[[[     0       0       0       ]\n  [     0       67      95      ]]\n [[     0       1       2       ]\n  [     3       4       5       ]]\n [[     6       7       8       ]\n  [     9       10      11      ]]]\n3-D array  Shape: [3, 2, 3]  DType: int8  C-cont: True  F-cont: False  own data: True\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "NDArray with items from the list of indices.",
                        "signature": "__getitem__(self, indices: List[Int]) -> Self",
                        "summary": "Get items from 0-th dimension of an array. It is an overload of `__getitem__(self, indices: NDArray[DType.index]) raises -> Self`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "NDArray with Dtype.bool.",
                            "kind": "argument",
                            "name": "mask",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[bool]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "If array shape is equal to mask shape, it returns a flattened array of\nthe values where mask is True.\n\nIf array shape is not equal to mask shape, it returns items from the\n0-th dimension of the array where mask is True.\n\nExample:\n```console\n>>>var a = nm.arange[i8](6)\n>>>print(a)\n[       0       1       2       3       4       5       ]\n1-D array  Shape: [6]  DType: int8  C-cont: True  F-cont: True  own data: True\n>>>print(a[nm.array[boolean](\"[1,0,1,1,0,1]\")])\n[       0       2       3       5       ]\n1-D array  Shape: [4]  DType: int8  C-cont: True  F-cont: True  own data: True\n\nvar b = nm.arange[i8](12).reshape(Shape(2, 2, 3))\nprint(b)\n[[[     0       1       2       ]\n  [     3       4       5       ]]\n [[     6       7       8       ]\n  [     9       10      11      ]]]\n3-D array  Shape: [2, 2, 3]  DType: int8  C-cont: True  F-cont: False  own data: True\n>>>print(b[nm.array[boolean](\"[0,1]\")])\n[[[     6       7       8       ]\n  [     9       10      11      ]]]\n3-D array  Shape: [1, 2, 3]  DType: int8  C-cont: True  F-cont: True  own data: True\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "NDArray with items from the mask.",
                        "signature": "__getitem__(self, mask: NDArray[bool]) -> Self",
                        "summary": "Get item from an array according to a mask array."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "A list of boolean values.",
                            "kind": "argument",
                            "name": "mask",
                            "passingKind": "pos_or_kw",
                            "type": "List[Bool]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n>>>var a = nm.arange[i8](6)\n>>>print(a)\n[       0       1       2       3       4       5       ]\n1-D array  Shape: [6]  DType: int8  C-cont: True  F-cont: True  own data: True\n>>>print(a[List[Bool](True, False, True, True, False, True)])\n[       0       2       3       5       ]\n1-D array  Shape: [4]  DType: int8  C-cont: True  F-cont: True  own data: True\n\nvar b = nm.arange[i8](12).reshape(Shape(2, 2, 3))\nprint(b)\n[[[     0       1       2       ]\n  [     3       4       5       ]]\n [[     6       7       8       ]\n  [     9       10      11      ]]]\n3-D array  Shape: [2, 2, 3]  DType: int8  C-cont: True  F-cont: False  own data: True\n>>>print(b[List[Bool](False, True)])\n[[[     6       7       8       ]\n  [     9       10      11      ]]]\n3-D array  Shape: [1, 2, 3]  DType: int8  C-cont: True  F-cont: True  own data: True\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "NDArray with items from the mask.",
                        "signature": "__getitem__(self, mask: List[Bool]) -> Self",
                        "summary": "Get items from 0-th dimension of an array according to mask. __getitem__(self, mask: NDArray[DType.bool]) raises -> Self."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__setitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nimport numojo as nm\nvar A = nm.random.rand[nm.i16](3, 2)\nvar B = nm.random.rand[nm.i16](3)\nA[1:4] = B\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(mut self, idx: Int, val: Self)",
                        "summary": "Set a slice of array with given array."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Item"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(mut self, index: Item, val: SIMD[dtype, 1])",
                        "summary": "Set the value at the index list."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "mask",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[bool]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(mut self, mask: NDArray[bool], value: SIMD[dtype, 1])",
                        "summary": "Set the value of the array at the indices where the mask is true."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "*slices",
                            "passingKind": "pos_or_kw",
                            "type": "Slice"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    `arr[1:3, 2:4]` returns the corresponding sliced array (2 x 2).",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(mut self, *slices: Slice, *, val: Self)",
                        "summary": "Retreive slices of an array from variadic slices."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "slices",
                            "passingKind": "pos_or_kw",
                            "type": "List[Slice]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n>>> var a = nm.arange[i8](16).reshape(Shape(4, 4))\nprint(a)\n[[      0       1       2       3       ]\n [      4       5       6       7       ]\n [      8       9       10      11      ]\n [      12      13      14      15      ]]\n2-D array  Shape: [4, 4]  DType: int8  C-cont: True  F-cont: False  own data: True\n>>> a[2:4, 2:4] = a[0:2, 0:2]\nprint(a)\n[[      0       1       2       3       ]\n [      4       5       6       7       ]\n [      8       9       0       1       ]\n [      12      13      4       5       ]]\n2-D array  Shape: [4, 4]  DType: int8  C-cont: True  F-cont: False  own data: True\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(mut self, slices: List[Slice], val: Self)",
                        "summary": "Sets the slices of an array from list of slices and array."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "*slices",
                            "passingKind": "pos_or_kw",
                            "type": "Variant[Slice, Int]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n>>> var a = nm.arange[i8](16).reshape(Shape(4, 4))\nprint(a)\n[[      0       1       2       3       ]\n [      4       5       6       7       ]\n [      8       9       10      11      ]\n [      12      13      14      15      ]]\n2-D array  Shape: [4, 4]  DType: int8  C-cont: True  F-cont: False  own data: True\n>>> a[0, Slice(2, 4)] = a[3, Slice(0, 2)]\nprint(a)\n[[      0       1       12      13      ]\n [      4       5       6       7       ]\n [      8       9       10      11      ]\n [      12      13      14      15      ]]\n2-D array  Shape: [4, 4]  DType: int8  C-cont: True  F-cont: False  own data: True\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(mut self, *slices: Variant[Slice, Int], *, val: Self)",
                        "summary": "Get items by a series of either slices or integers."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[index]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Refer to `__getitem__(self, index: List[Int])`.\n\nExample:\n```console\n> var X = nm.NDArray[nm.i8](3,random=True)\n> print(X)\n[       32      21      53      ]\n1-D array  Shape: [3]  DType: int8\n> print(X.argsort())\n[       1       0       2       ]\n1-D array  Shape: [3]  DType: index\n> print(X[X.argsort()])\n[       21      32      53      ]\n1-D array  Shape: [3]  DType: int8\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(self, index: NDArray[index], val: NDArray[dtype])",
                        "summary": "Returns the items of the array from an array of indices."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "mask",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[bool]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```\nvar A = numojo.core.NDArray[numojo.i16](6, random=True)\nvar mask = A > 0\nprint(A)\nprint(mask)\nA[mask] = 0\nprint(A)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(mut self, mask: NDArray[bool], val: Self)",
                        "summary": "Set the value of the array at the indices where the mask is true."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__neg__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "For bolean use `__invert__`(~)",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__neg__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__neg__(self) -> Self",
                        "summary": "Unary negative returns self unless boolean type."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__pos__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__pos__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__pos__(self) -> Self",
                        "summary": "Unary positve returns self unless boolean type."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__invert__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__invert__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__invert__(self) -> Self",
                        "summary": "Element-wise inverse (~ or not), only for bools and integral types."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__lt__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__lt__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__lt__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise less than."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__lt__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__lt__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDtype]) -> NDArray[bool]",
                        "summary": "Itemwise less than between scalar and Array."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__lt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__lt__(self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise less than."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__lt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__lt__(self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise less than between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__le__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__le__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__le__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise less than or equal to."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__le__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__le__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDtype]) -> NDArray[bool]",
                        "summary": "Itemwise less than or equal to between scalar and Array."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__le__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__le__(self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise less than or equal to."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__le__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__le__(self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise less than or equal to between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__eq__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__eq__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDtype]) -> NDArray[bool]",
                        "summary": "Itemwise equivalence."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__eq__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise equivalence."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__eq__(self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise equivalence."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__eq__(self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise equivalence between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ne__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ne__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDtype]) -> NDArray[bool]",
                        "summary": "Itemwise nonequivelence."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ne__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise nonequivelence between scalar and Array."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ne__(self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise nonequivelence."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ne__(self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise nonequivelence between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__gt__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__gt__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__gt__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise greater than."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__gt__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__gt__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDtype]) -> NDArray[bool]",
                        "summary": "Itemwise greater than between scalar and Array."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__gt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__gt__(self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise greater than."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__gt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__gt__(self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise greater than between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ge__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ge__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ge__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise greater than or equal to."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ge__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ge__[OtherDtype: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDtype]) -> NDArray[bool]",
                        "summary": "Itemwise less than or equal to between scalar and Array."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ge__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ge__(self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise greater than or equal to."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ge__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ge__(self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise less than or equal to between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__add__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__add__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__add__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `array + scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__add__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__add__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Enables `array + array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__add__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__add__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array + scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__add__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__add__(self, other: Self) -> Self",
                        "summary": "Enables `array + array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__sub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__sub__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__sub__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `array - scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__sub__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__sub__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Enables `array - array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__sub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__sub__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array - scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__sub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__sub__(self, other: Self) -> Self",
                        "summary": "Enables `array - array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__mul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mul__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__mul__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `array * scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mul__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__mul__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Enables `array * array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mul__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array * scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mul__(self, other: Self) -> Self",
                        "summary": "Enables `array * array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__matmul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__matmul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__matmul__(self, other: Self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__truediv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__truediv__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__truediv__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `array / scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__truediv__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__truediv__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Enables `array / array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__truediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__truediv__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array / scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__truediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__truediv__(self, other: Self) -> Self",
                        "summary": "Enables `array / array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__floordiv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__floordiv__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__floordiv__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `array // scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__floordiv__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__floordiv__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Enables `array // array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__floordiv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__floordiv__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array // scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__floordiv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__floordiv__(self, other: Self) -> Self",
                        "summary": "Enables `array // array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__mod__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mod__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__mod__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `array % scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mod__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__mod__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Enables `array % array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mod__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mod__(mut self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array % scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mod__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mod__(mut self, other: Self) -> Self",
                        "summary": "Enables `array % array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__pow__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "p",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__pow__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__pow__(self, p: Int) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "p",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__pow__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__pow__(self, p: Self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__radd__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__radd__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__radd__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `scalar + array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__radd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__radd__(mut self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar + array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rsub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rsub__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__rsub__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `scalar - array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rsub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rsub__(mut self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar - array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rmul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rmul__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__rmul__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `scalar * array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rmul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rmul__(mut self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar * array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rtruediv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rtruediv__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__rtruediv__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, s: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `scalar / array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rtruediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rtruediv__(self, s: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar / array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rfloordiv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rfloordiv__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__rfloordiv__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `scalar // array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rfloordiv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rfloordiv__(self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar // array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rmod__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rmod__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rmod__(mut self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar % array`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rmod__",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "",
                        "signature": "__rmod__[OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](self, other: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Enables `scalar % array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__iadd__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__iadd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__iadd__(mut self, other: SIMD[dtype, 1])",
                        "summary": "Enables `array += scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__iadd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__iadd__(mut self, other: Self)",
                        "summary": "Enables `array *= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__isub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__isub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__isub__(mut self, other: SIMD[dtype, 1])",
                        "summary": "Enables `array -= scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__isub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__isub__(mut self, other: Self)",
                        "summary": "Enables `array -= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__imul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__imul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__imul__(mut self, other: SIMD[dtype, 1])",
                        "summary": "Enables `array *= scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__imul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__imul__(mut self, other: Self)",
                        "summary": "Enables `array *= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__itruediv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__itruediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__itruediv__(mut self, s: SIMD[dtype, 1])",
                        "summary": "Enables `array /= scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__itruediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__itruediv__(mut self, other: Self)",
                        "summary": "Enables `array /= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ifloordiv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ifloordiv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__ifloordiv__(mut self, s: SIMD[dtype, 1])",
                        "summary": "Enables `array //= scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ifloordiv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__ifloordiv__(mut self, other: Self)",
                        "summary": "Enables `array //= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__imod__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__imod__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__imod__(mut self, other: SIMD[dtype, 1])",
                        "summary": "Enables `array %= scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__imod__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__imod__(mut self, other: Self)",
                        "summary": "Enables `array %= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ipow__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "p",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ipow__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__ipow__(mut self, p: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__int__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Similar to Numpy, only 0-D arrays or length-1 arrays can be converted to\nscalars.\n\nExample:\n```console\n> var A = NDArray[dtype](6, random=True)\n> print(int(A))\n\nUnhandled exception caught during execution: Only 0-D arrays or length-1 arrays can be converted to scalars\nmojo: error: execution exited with a non-zero result: 1\n\n> var B = NDArray[dtype](1, 1, random=True)\n> print(int(B))\n14\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__int__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "Int representation of the array.",
                        "signature": "__int__(self) -> Int",
                        "summary": "Get Int representation of the array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__abs__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__abs__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__abs__(self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__str__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__str__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "__str__(self) -> String",
                        "summary": "Enables str(array)."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "write_to",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "writer",
                            "passingKind": "pos_or_kw",
                            "type": "W"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "write_to",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "W",
                            "passingKind": "pos_or_kw",
                            "type": "Writer"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "write_to[W: Writer](self, mut writer: W)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__repr__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "You can construct the array using this representation.\n\nAn example is:\n```console\n>>>import numojo as nm\n>>>var b = nm.arange[nm.f32](20).reshape(Shape(4, 5))\n>>>print(repr(b))\nnumojo.array[f32](\n'''\n[[0.0, 1.0, 2.0, 3.0, 4.0]\n [5.0, 6.0, 7.0, 8.0, 9.0]\n [10.0, 11.0, 12.0, 13.0, 14.0]\n [15.0, 16.0, 17.0, 18.0, 19.0]]\n'''\n)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__repr__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "__repr__(self) -> String",
                        "summary": "Compute the \"official\" string representation of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__len__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__len__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "__len__(self) -> Int",
                        "summary": "Returns length of 0-th dimension."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__iter__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```\n>>> var a = nm.random.arange[nm.i8](2 * 3 * 4).reshape(nm.Shape(2, 3, 4))\n>>> for i in a:\n...     print(i)\n[[      0       1       2       3       ]\n [      4       5       6       7       ]\n [      8       9       10      11      ]]\n2-D array  Shape: [3, 4]  DType: int8  C-cont: True  F-cont: False  own data: False\n[[      12      13      14      15      ]\n [      16      17      18      19      ]\n [      20      21      22      23      ]]\n2-D array  Shape: [3, 4]  DType: int8  C-cont: True  F-cont: False  own data: False\n```.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__iter__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "_NDArrayIter[self, dtype]",
                        "returnsDoc": "An iterator of NDArray elements.",
                        "signature": "__iter__(self) -> _NDArrayIter[self, dtype]",
                        "summary": "Iterate over elements of the NDArray and return sub-arrays as view."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__reversed__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__reversed__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "_NDArrayIter[self, dtype, False]",
                        "returnsDoc": "A reversed iterator of NDArray elements.",
                        "signature": "__reversed__(self) -> _NDArrayIter[self, dtype, False]",
                        "summary": "Iterate backwards over elements of the NDArray, returning copied value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "vdot",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "vdot",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "vdot(self, other: Self) -> SIMD[dtype, 1]",
                        "summary": "Inner product of two vectors."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mdot",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mdot",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "mdot(self, other: Self) -> Self",
                        "summary": "Dot product of two matrix. Matrix A: M * N. Matrix B: N * L."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "row",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "id",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "row",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "row(self, id: Int) -> Self",
                        "summary": "Get the ith row of the matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "col",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "id",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "col",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "col(self, id: Int) -> Self",
                        "summary": "Get the ith column of the matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rdot",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rdot",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "rdot(self, other: Self) -> Self",
                        "summary": "Dot product of two matrix. Matrix A: M * N. Matrix B: N * L."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "num_elements",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "num_elements",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "num_elements(self) -> Int",
                        "summary": "Function to retreive size (compatability)."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "load",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "`A.load(i)` differs from `A._buf.ptr[i]` due to boundary check.\n\nExample:\n```console\n> array.load(15)\n```\nreturns the item of index 15 from the array's data buffer.\n\nNote that it does not checked against C-order or F-order.\n```console\n> # A is a 3x3 matrix, F-order (column-major)\n> A.load(3)  # Row 0, Col 1\n> A.item(3)  # Row 1, Col 0\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "load(self, owned index: Int) -> SIMD[dtype, 1]",
                        "summary": "Safely retrieve i-th item from the underlying buffer."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "To bypass boundary checks, use `self._buf.ptr.load` directly.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "Index out of boundary.",
                        "returnType": "SIMD[dtype, width]",
                        "returnsDoc": "",
                        "signature": "load[width: Int = 1](self, index: Int) -> SIMD[dtype, width]",
                        "summary": "Safely loads a SIMD element of size `width` at `index` from the underlying buffer."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "*indices",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "To bypass boundary checks, use `self._buf.ptr.load` directly.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "Index out of boundary.",
                        "returnType": "SIMD[dtype, width]",
                        "returnsDoc": "",
                        "signature": "load[width: Int = 1](self, *indices: Int) -> SIMD[dtype, width]",
                        "summary": "Safely loads SIMD element of size `width` at given variadic indices from the underlying buffer."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "store",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "`A.store(i, a)` differs from `A._buf.ptr[i] = a` due to boundary check.\n\nExample:\n```console\n> array.store(15, val = 100)\n```\nsets the item of index 15 of the array's data buffer to 100.\n\nNote that it does not checked against C-order or F-order.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "Index out of boundary.",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store(self, owned index: Int, val: SIMD[dtype, 1])",
                        "summary": "Safely store a scalar to i-th item of the underlying buffer."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, width]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "To bypass boundary checks, use `self._buf.ptr.store` directly.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "Index out of boundary.",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store[width: Int](mut self, index: Int, val: SIMD[dtype, width])",
                        "summary": "Safely stores SIMD element of size `width` at `index` of the underlying buffer."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "*indices",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "kw",
                            "type": "SIMD[dtype, width]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "To bypass boundary checks, use `self._buf.ptr.store` directly.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "Index out of boundary.",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store[width: Int = 1](mut self, *indices: Int, *, val: SIMD[dtype, width])",
                        "summary": "Safely stores SIMD element of size `width` at given variadic indices of the underlying buffer."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "T",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axes",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "If `axes` is not given, it is equal to flipping the axes.\n\nDefined in `numojo.routines.manipulation.transpose`.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "T",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "T(self, axes: List[Int]) -> Self",
                        "summary": "Transpose array of any number of dimensions according to arbitrary permutation of the axes."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Defined in `numojo.routines.manipulation.transpose`.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "T",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "T(self) -> Self",
                        "summary": "(overload) Transpose the array when `axes` is not given. If `axes` is not given, it is equal to flipping the axes. See docstring of `transpose`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "all",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "all",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "all(self) -> Bool",
                        "summary": "If all true return true."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "any",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "any",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "any(self) -> Bool",
                        "summary": "True if any true."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argmax",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argmax",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "argmax(self) -> Int",
                        "summary": "Get location in pointer of max value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argmin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argmin",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "argmin(self) -> Int",
                        "summary": "Get location in pointer of min value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argsort",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "See `numojo.routines.sorting.argsort()`.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argsort",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[index]",
                        "returnsDoc": "The indices of the sorted NDArray.",
                        "signature": "argsort(self) -> NDArray[index]",
                        "summary": "Sort the NDArray and return the sorted indices."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "astype",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "astype",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "target",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[target]",
                        "returnsDoc": "",
                        "signature": "astype[target: DType](self) -> NDArray[target]",
                        "summary": "Convert type of array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "copy",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "copy",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "copy(self) -> Self",
                        "summary": "Returns a copy of the array that owns the data. The returned array will be continuous in memory."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumprod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumprod",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "Cumprod of all items of an array.",
                        "signature": "cumprod(self) -> Self",
                        "summary": "Returns cumprod of all items of an array. The array is flattened before cumprod."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Axis.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumprod",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "Cumprod of array by axis.",
                        "signature": "cumprod(self, axis: Int) -> Self",
                        "summary": "Returns cumprod of array by axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumsum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumsum",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "Cumsum of all items of an array.",
                        "signature": "cumsum(self) -> Self",
                        "summary": "Returns cumsum of all items of an array. The array is flattened before cumsum."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Axis.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumsum",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "Cumsum of array by axis.",
                        "signature": "cumsum(self, axis: Int) -> Self",
                        "summary": "Returns cumsum of array by axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "diagonal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "diagonal",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "diagonal(self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fill",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fill",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "fill(mut self, val: SIMD[dtype, 1])",
                        "summary": "Fill all items of array with value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "flatten",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"C\")",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "flatten",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "The 1 dimensional flattened NDArray.",
                        "signature": "flatten(self, order: String = String(\"C\")) -> Self",
                        "summary": "Return a copy of the array collapsed into one dimension."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "item",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "Index of item, counted in row-major way.",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "If one index is given, get the i-th item of the array (not buffer).\nIt first scans over the first row, even it is a colume-major array.\n\nIf more than one index is given, the length of the indices must match\nthe number of dimensions of the array.\n\nExample:\n```console\n>>> var A = nm.random.randn[nm.f16](2, 2, 2)\n>>> A = A.reshape(A.shape, order=\"F\")\n>>> print(A)\n[[[     0.2446289       0.5419922       ]\n  [     0.09643555      -0.90722656     ]]\n [[     1.1806641       0.24389648      ]\n  [     0.5234375       1.0390625       ]]]\n3-D array  Shape: [2, 2, 2]  DType: float16  order: F\n>>> for i in range(A.size):\n...     print(A.item(i))\n0.2446289\n0.5419922\n0.09643555\n-0.90722656\n1.1806641\n0.24389648\n0.5234375\n1.0390625\n>>> print(A.item(0, 1, 1))\n-0.90722656\n```.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "item",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "Index is equal or larger than array size.",
                        "returnType": "ref [MutableAnyOrigin] SIMD[dtype, 1]",
                        "returnsDoc": "A scalar matching the dtype of the array.",
                        "signature": "item(self, owned index: Int) -> ref [MutableAnyOrigin] SIMD[dtype, 1]",
                        "summary": "Return the scalar at the coordinates."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "The coordinates of the item.",
                            "kind": "argument",
                            "name": "*index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "If one index is given, get the i-th item of the array (not buffer).\nIt first scans over the first row, even it is a colume-major array.\n\nIf more than one index is given, the length of the indices must match\nthe number of dimensions of the array.\n\nExample:\n```\n>>> var A = nm.random.randn[nm.f16](2, 2, 2)\n>>> A = A.reshape(A.shape, order=\"F\")\n>>> print(A)\n[[[     0.2446289       0.5419922       ]\n  [     0.09643555      -0.90722656     ]]\n [[     1.1806641       0.24389648      ]\n  [     0.5234375       1.0390625       ]]]\n3-D array  Shape: [2, 2, 2]  DType: float16  order: F\n>>> print(A.item(0, 1, 1))\n-0.90722656\n```.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "item",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "Index is equal or larger than size of dimension.",
                        "returnType": "ref [MutableAnyOrigin] SIMD[dtype, 1]",
                        "returnsDoc": "A scalar matching the dtype of the array.",
                        "signature": "item(self, *index: Int) -> ref [MutableAnyOrigin] SIMD[dtype, 1]",
                        "summary": "Return the scalar at the coordinates."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "itemset",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "The coordinates of the item. Can either be `Int` or `List[Int]`. If `Int` is passed, it is the index of i-th item of the whole array. If `List[Int]` is passed, it is the coordinate of the item.",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Variant[Int, List[Int]]"
                          },
                          {
                            "convention": "read",
                            "description": "The scalar to be set.",
                            "kind": "argument",
                            "name": "item",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Note:\n    This is similar to `numpy.ndarray.itemset`.\n    The difference is that we takes in `List[Int]`, but numpy takes in a tuple.\n\nAn example goes as follows.\n\n```\nimport numojo as nm\n\nfn main() raises:\n    var A = nm.zeros[nm.i16](3, 3)\n    print(A)\n    A.itemset(5, 256)\n    print(A)\n    A.itemset(List(1,1), 1024)\n    print(A)\n```\n```console\n[[      0       0       0       ]\n [      0       0       0       ]\n [      0       0       0       ]]\n2-D array  Shape: [3, 3]  DType: int16\n[[      0       0       0       ]\n [      0       0       256     ]\n [      0       0       0       ]]\n2-D array  Shape: [3, 3]  DType: int16\n[[      0       0       0       ]\n [      0       1024    256     ]\n [      0       0       0       ]]\n2-D array  Shape: [3, 3]  DType: int16\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "itemset",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "itemset(mut self, index: Variant[Int, List[Int]], item: SIMD[dtype, 1])",
                        "summary": "Set the scalar at the coordinates."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "max",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "max(self, axis: Int = 0) -> Self",
                        "summary": "Max on axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "min",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "min",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "min(self, axis: Int = 0) -> Self",
                        "summary": "Min on axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mean",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "mean(self, axis: Int) -> Self",
                        "summary": "Mean of array elements over a given axis. Args:     array: NDArray.     axis: The axis along which the mean is performed. Returns:     An NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The cumulative mean of the array as a SIMD Value of `dtype`.",
                        "signature": "mean(self) -> SIMD[dtype, 1]",
                        "summary": "Cumulative mean of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "nditer",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```console\n>>>var a = nm.random.rand[i8](2, 3, min=0, max=100)\n>>>print(a)\n[[      37      8       25      ]\n [      25      2       57      ]]\n2-D array  (2,3)  DType: int8  C-cont: True  F-cont: False  own data: True\n>>>for i in a.nditer():\n...    print(i, end=\" \")\n37 8 25 25 2 57\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "nditer",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "_NDIter[self, dtype]",
                        "returnsDoc": "",
                        "signature": "nditer(self) -> _NDIter[self, dtype]",
                        "summary": "(Overload) Return an iterator yielding the array elements according to the memory layout of the array."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```console\n>>>var a = nm.random.rand[i8](2, 3, min=0, max=100)\n>>>print(a)\n[[      37      8       25      ]\n [      25      2       57      ]]\n2-D array  (2,3)  DType: int8  C-cont: True  F-cont: False  own data: True\n>>>for i in a.nditer():\n...    print(i, end=\" \")\n37 8 25 25 2 57\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "nditer",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "_NDIter[self, dtype]",
                        "returnsDoc": "",
                        "signature": "nditer(self, order: String) -> _NDIter[self, dtype]",
                        "summary": "Return an iterator yielding the array elements according to the order."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "prod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "prod(self) -> SIMD[dtype, 1]",
                        "summary": "Product of all array elements. Returns:     Scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "prod(self, axis: Int) -> Self",
                        "summary": "Product of array elements over a given axis. Args:     axis: The axis along which the product is performed. Returns:     An NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "reshape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Shape of returned array.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayShape"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"C\")",
                            "description": "Order of the array - Row major `C` or Column major `F`.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reshape",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "Array of the same data with a new shape.",
                        "signature": "reshape(self, shape: NDArrayShape, order: String = String(\"C\")) -> Self",
                        "summary": "Returns an array of the same data with a new shape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "resize",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Shape after resize.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayShape"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Notes:\nTo returns a new array, use `reshape`.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "resize",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "resize(mut self, shape: NDArrayShape)",
                        "summary": "In-place change shape and size of array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "round",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "round",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "An NDArray.",
                        "signature": "round(self) -> Self",
                        "summary": "Rounds the elements of the array to a whole number."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "sort",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "When no axis is given, the array is flattened before sorting.\n\nSee `numojo.sorting.sort` for more information.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sort",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "sort(mut self)",
                        "summary": "Sort NDArray using quick sort method. It is not guaranteed to be unstable."
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "When no axis is given, the array is flattened before sorting.\n\nSee `numojo.sorting.sort` for more information.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sort",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "sort(mut self, owned axis: Int)",
                        "summary": "Sort NDArray along the given axis using quick sort method. It is not guaranteed to be unstable."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "sum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "sum(self) -> SIMD[dtype, 1]",
                        "summary": "Sum of all array elements. Returns:     Scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "sum(self, axis: Int) -> Self",
                        "summary": "Sum of array elements over a given axis. Args:     axis: The axis along which the sum is performed. Returns:     An NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "tolist",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tolist",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "List[SIMD[dtype, 1]]",
                        "returnsDoc": "A 1-D List.",
                        "signature": "tolist(self) -> List[SIMD[dtype, 1]]",
                        "summary": "Convert NDArray to a 1-D List."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "to_numpy",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "to_numpy",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "PythonObject",
                        "returnsDoc": "",
                        "signature": "to_numpy(self) -> PythonObject",
                        "summary": "Convert to a numpy array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "to_tensor",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "```mojo\nimport numojo as nm\nfrom numojo.prelude import *\n\nfn main() raises:\n    var a = nm.random.randn[f16](2, 3, 4)\n    print(a)\n    print(a.to_tensor())\n\n    var b = nm.array[i8](\"[[1, 2, 3], [4, 5, 6]]\")\n    print(b)\n    print(b.to_tensor())\n\n    var c = nm.array[boolean](\"[[1,0], [0,1]]\")\n    print(c)\n    print(c.to_tensor())\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "to_tensor",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Tensor[dtype]",
                        "returnsDoc": "",
                        "signature": "to_tensor(self) -> Tensor[dtype]",
                        "summary": "Convert array to tensor of the same dtype."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "trace",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "Offset of the diagonal from the main diagonal.",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "First axis.",
                            "kind": "argument",
                            "name": "axis1",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "1",
                            "description": "Second axis.",
                            "kind": "argument",
                            "name": "axis2",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "trace",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "The trace of the ndarray.",
                        "signature": "trace(self, offset: Int = 0, axis1: Int = 0, axis2: Int = 1) -> Self",
                        "summary": "Computes the trace of a ndarray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "unsafe_ptr",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "unsafe_ptr",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "UnsafePointer[SIMD[dtype, 1]]",
                        "returnsDoc": "",
                        "signature": "unsafe_ptr(self) -> UnsafePointer[SIMD[dtype, 1]]",
                        "summary": "Retreive pointer without taking ownership."
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "NDArray",
                "parameters": [
                  {
                    "default": "float64",
                    "description": "Type of item in NDArray. Default type is DType.float64.",
                    "kind": "parameter",
                    "name": "dtype",
                    "passingKind": "pos_or_kw",
                    "type": "DType"
                  }
                ],
                "parentTraits": [
                  "Absable",
                  "AnyType",
                  "CollectionElement",
                  "Copyable",
                  "Movable",
                  "Representable",
                  "Sized",
                  "Stringable",
                  "UnknownDestructibility",
                  "Writable"
                ],
                "summary": "The N-dimensional array (NDArray)."
              }
            ],
            "summary": "Implements basic object methods for working with N-Dimensional Array.",
            "traits": []
          },
          {
            "aliases": [
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "Shape",
                "summary": "",
                "value": "NDArrayShape"
              }
            ],
            "description": "`NDArrayShape` is a series of `Int` on the heap.",
            "functions": [],
            "kind": "module",
            "name": "ndshape",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "register_passable",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndim",
                    "summary": "Number of dimensions of array.",
                    "type": "Int"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Size of the array.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: Int)",
                        "summary": "Initializes the NDArrayShape with one dimension."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Variable number of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "*shape",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, *shape: Int)",
                        "summary": "Initializes the NDArrayShape with variable shape dimensions."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Variable number of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "*shape",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "The total number of elements in the array.",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, *shape: Int, *, size: Int)",
                        "summary": "Initializes the NDArrayShape with variable shape dimensions and a specified size."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "A list of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: List[Int])",
                        "summary": "Initializes the NDArrayShape with a list of shape dimensions."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "A list of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "The specified size of the NDArrayShape.",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: List[Int], size: Int)",
                        "summary": "Initializes the NDArrayShape with a list of shape dimensions and a specified size."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "A list of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: VariadicList[Int])",
                        "summary": "Initializes the NDArrayShape with a list of shape dimensions."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "A list of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "The specified size of the NDArrayShape.",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: VariadicList[Int], size: Int)",
                        "summary": "Initializes the NDArrayShape with a list of shape dimensions and a specified size."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Another NDArrayShape to initialize from.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: Self)",
                        "summary": "Initializes the NDArrayShape with another NDArrayShape."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Number of dimensions.",
                            "kind": "argument",
                            "name": "ndim",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "Whether the shape is initialized. If yes, the values will be set to 1. If no, the values will be uninitialized.",
                            "kind": "argument",
                            "name": "initialized",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "This method is useful when you want to create a shape with given ndim\nwithout knowing the shape values.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, ndim: Int, initialized: Bool)",
                        "summary": "Construct NDArrayShape with number of dimensions."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__copyinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "Another NDArrayShape to initialize from.",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__copyinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__copyinit__(out self, other: Self)",
                        "summary": "Initializes the NDArrayShape from another NDArrayShape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__getitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, index: Int) -> Int",
                        "summary": "Get shape at specified index."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__setitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(mut self, index: Int, val: Int)",
                        "summary": "Set shape at specified index."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__eq__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__eq__(self, other: Self) -> Bool",
                        "summary": "Check if two shapes are identical."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ne__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__ne__(self, other: Self) -> Bool",
                        "summary": "Check if two arrayshapes don't have identical dimensions."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__contains__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__contains__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__contains__(self, val: Int) -> Bool",
                        "summary": "Check if any of the dimensions are equal to a value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__len__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__len__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "__len__(self) -> Int",
                        "summary": "Get number of dimensions of the array described by arrayshape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__repr__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__repr__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "__repr__(self) -> String",
                        "summary": "Return a string of the shape of the array described by arrayshape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__str__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__str__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "__str__(self) -> String",
                        "summary": "Return a string of the shape of the array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "write_to",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "writer",
                            "passingKind": "pos_or_kw",
                            "type": "W"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "write_to",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "W",
                            "passingKind": "pos_or_kw",
                            "type": "Writer"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "write_to[W: Writer](self, mut writer: W)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "size_of_array",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "size_of_array",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "size_of_array(self) -> Int",
                        "summary": "Returns the total number of elements in the array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "join",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Variable number of NDArrayShape objects.",
                            "kind": "argument",
                            "name": "*shapes",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": true,
                        "kind": "function",
                        "name": "join",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "A new NDArrayShape object.",
                        "signature": "join(*shapes) -> Self",
                        "summary": "Join multiple shapes into a single shape."
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "NDArrayShape",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "Stringable",
                  "UnknownDestructibility",
                  "Writable"
                ],
                "summary": "Implements the NDArrayShape."
              }
            ],
            "summary": "Implements NDArrayShape type.",
            "traits": []
          },
          {
            "aliases": [
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "Strides",
                "summary": "",
                "value": "NDArrayStrides"
              }
            ],
            "description": "`NDArrayStrides` is a series of `Int` on the heap.",
            "functions": [],
            "kind": "module",
            "name": "ndstrides",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "register_passable",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndim",
                    "summary": "Number of dimensions of array.",
                    "type": "Int"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "*strides",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, *strides: Int)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "strides",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, strides: List[Int])",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "strides",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, strides: VariadicList[Int])",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "strides",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, strides: Self)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "*shape",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, *shape: Int, *, order: String)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"C\")",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: List[Int], order: String = String(\"C\"))",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"C\")",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: VariadicList[Int], order: String = String(\"C\"))",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayShape"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"C\")",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, owned shape: NDArrayShape, order: String = String(\"C\"))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__copyinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__copyinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__copyinit__(out self, other: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__getitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, index: Int) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__setitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(mut self, index: Int, val: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__eq__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__eq__(self, other: Self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ne__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__ne__(self, other: Self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__contains__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__contains__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__contains__(self, val: Int) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__len__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__len__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "__len__(self) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__repr__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__repr__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "__repr__(self) -> String",
                        "summary": "Return a string of the strides of the array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__str__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__str__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "__str__(self) -> String",
                        "summary": "Return a string of the strides of the array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "write_to",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "writer",
                            "passingKind": "pos_or_kw",
                            "type": "W"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "write_to",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "W",
                            "passingKind": "pos_or_kw",
                            "type": "Writer"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "write_to[W: Writer](self, mut writer: W)",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "NDArrayStrides",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "Stringable",
                  "UnknownDestructibility"
                ],
                "summary": "Implements the NDArrayStrides."
              }
            ],
            "summary": "Implements NDArrayStrides type.",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "own_data",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ptr",
                    "summary": "",
                    "type": "UnsafePointer[SIMD[dtype, 1]]"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Notes:\n`ndarray.flags['OWN_DATA']` should be set as True.\nThe memory should be freed by `__del__`.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, size: Int)",
                        "summary": "Allocate given space on memory. The bytes allocated is `size` * `byte size of dtype`."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "ptr",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Notes:\n`ndarray.flags['OWN_DATA']` should be set as False.\nThe memory should not be freed by `__del__`.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, ptr: UnsafePointer[SIMD[dtype, 1]])",
                        "summary": "Do not use this if you know what it means. If the pointer is associated with another array, it might cause dangling pointer problem."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__moveinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__moveinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__moveinit__(out self, owned other: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "get_ptr",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "get_ptr",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "UnsafePointer[SIMD[dtype, 1]]",
                        "returnsDoc": "",
                        "signature": "get_ptr(self) -> UnsafePointer[SIMD[dtype, 1]]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "OwnData",
                "parameters": [
                  {
                    "description": "",
                    "kind": "parameter",
                    "name": "dtype",
                    "passingKind": "pos_or_kw",
                    "type": "DType"
                  }
                ],
                "parentTraits": [
                  "AnyType",
                  "UnknownDestructibility"
                ],
                "summary": ""
              }
            ],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "ref_data",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ptr",
                    "summary": "",
                    "type": "UnsafePointer[SIMD[float16, 1]]"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Notes:\nAlthough it has the lifetime of another array, it owns the data.\n`ndarray.flags['OWN_DATA']` should be set as True.\nThe memory should be freed by `__del__`.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, size: Int)",
                        "summary": "Allocate given space on memory. The bytes allocated is `size` * `byte size of dtype`."
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "ptr",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[float16, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Notes:\n`ndarray.flags['OWN_DATA']` should be set as False.\nThe memory should not be freed by `__del__`.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, ptr: UnsafePointer[SIMD[float16, 1]])",
                        "summary": "Reads the underlying data of another array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__moveinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__moveinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__moveinit__(out self, owned other: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "get_ptr",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "get_ptr",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "UnsafePointer[SIMD[float16, 1]]",
                        "returnsDoc": "",
                        "signature": "get_ptr(self) -> UnsafePointer[SIMD[float16, 1]]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "RefData",
                "parameters": [
                  {
                    "description": "",
                    "kind": "parameter",
                    "name": "is_mutable",
                    "passingKind": "inferred",
                    "type": "Bool"
                  },
                  {
                    "description": "",
                    "kind": "parameter",
                    "name": "origin",
                    "passingKind": "pos_or_kw",
                    "type": "Origin[is_mutable]"
                  }
                ],
                "parentTraits": [
                  "AnyType",
                  "Bufferable",
                  "UnknownDestructibility"
                ],
                "summary": ""
              }
            ],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "fill_pointer",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "The pointer to the NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "UnsafePointer[SIMD[dtype, 1]]"
                      },
                      {
                        "convention": "read",
                        "description": "The size of the NDArray.",
                        "kind": "argument",
                        "name": "size",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "description": "The value to fill the NDArray with.",
                        "kind": "argument",
                        "name": "value",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "fill_pointer",
                    "parameters": [
                      {
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "fill_pointer[dtype: DType](mut array: UnsafePointer[SIMD[dtype, 1]], size: Int, value: SIMD[dtype, 1])",
                    "summary": "Fill a NDArray with a specific value."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "bool_to_numeric",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The boolean NDArray to convert.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[bool]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "bool_to_numeric",
                    "parameters": [
                      {
                        "description": "The data type of the output NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The converted NDArray of type `dtype` with 1s (True) and 0s (False).",
                    "signature": "bool_to_numeric[dtype: DType](array: NDArray[bool]) -> NDArray[dtype]",
                    "summary": "Convert a boolean NDArray to a numeric NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "to_numpy",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The NDArray to convert.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n```console\nvar arr = NDArray[DType.float32](3, 3, 3)\nvar np_arr = to_numpy(arr)\nvar np_arr1 = arr.to_numpy()\n```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "to_numpy",
                    "parameters": [
                      {
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "PythonObject",
                    "returnsDoc": "The converted numpy array.",
                    "signature": "to_numpy[dtype: DType](array: NDArray[dtype]) -> PythonObject",
                    "summary": "Convert a NDArray to a numpy array."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "to_tensor",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "a",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "to_tensor",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Tensor[dtype]",
                    "returnsDoc": "",
                    "signature": "to_tensor[dtype: DType](a: NDArray[dtype]) -> Tensor[dtype]",
                    "summary": "Convert to a tensor."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "is_inttype",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_inttype",
                    "parameters": [
                      {
                        "description": "DType.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "Bool: True if the given dtype is an integer type, False otherwise.",
                    "signature": "is_inttype[dtype: DType]() -> Bool",
                    "summary": "Check if the given dtype is an integer type at compile time."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "DType.",
                        "kind": "argument",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_inttype",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "Bool: True if the given dtype is an integer type, False otherwise.",
                    "signature": "is_inttype(dtype: DType) -> Bool",
                    "summary": "Check if the given dtype is an integer type at run time."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "is_floattype",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_floattype",
                    "parameters": [
                      {
                        "description": "DType.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "Bool: True if the given dtype is a floating point type, False otherwise.",
                    "signature": "is_floattype[dtype: DType]() -> Bool",
                    "summary": "Check if the given dtype is a floating point type at compile time."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "DType.",
                        "kind": "argument",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_floattype",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "Bool: True if the given dtype is a floating point type, False otherwise.",
                    "signature": "is_floattype(dtype: DType) -> Bool",
                    "summary": "Check if the given dtype is a floating point type at run time."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "is_booltype",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_booltype",
                    "parameters": [
                      {
                        "description": "DType.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "Bool: True if the given dtype is a boolean type, False otherwise.",
                    "signature": "is_booltype[dtype: DType]() -> Bool",
                    "summary": "Check if the given dtype is a boolean type at compile time."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "DType.",
                        "kind": "argument",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_booltype",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "Bool: True if the given dtype is a boolean type, False otherwise.",
                    "signature": "is_booltype(dtype: DType) -> Bool",
                    "summary": "Check if the given dtype is a boolean type at run time."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "utility",
            "structs": [],
            "summary": "Implements N-DIMENSIONAL ARRAY UTILITY FUNCTIONS",
            "traits": []
          }
        ],
        "name": "core",
        "packages": [
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "complex_dtype",
                "structs": [
                  {
                    "aliases": [
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "type",
                        "summary": "",
                        "value": "dtype"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "invalid",
                        "summary": "Represents an invalid or unknown data type.",
                        "value": "{invalid, invalid}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "bool",
                        "summary": "Represents a boolean data type.",
                        "value": "{bool, bool}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "int8",
                        "summary": "Represents a signed integer type whose bitwidth is 8.",
                        "value": "{int8, int8}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "uint8",
                        "summary": "Represents an unsigned integer type whose bitwidth is 8.",
                        "value": "{uint8, uint8}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "int16",
                        "summary": "Represents a signed integer type whose bitwidth is 16.",
                        "value": "{int16, int16}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "uint16",
                        "summary": "Represents an unsigned integer type whose bitwidth is 16.",
                        "value": "{uint16, uint16}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "int32",
                        "summary": "Represents a signed integer type whose bitwidth is 32.",
                        "value": "{int32, int32}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "uint32",
                        "summary": "Represents an unsigned integer type whose bitwidth is 32.",
                        "value": "{uint32, uint32}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "int64",
                        "summary": "Represents a signed integer type whose bitwidth is 64.",
                        "value": "{int64, int64}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "uint64",
                        "summary": "Represents an unsigned integer type whose bitwidth is 64.",
                        "value": "{uint64, uint64}"
                      },
                      {
                        "deprecated": "",
                        "description": "The 8 bits are encoded as `seeeeemm`:\n- (s)ign: 1 bit\n- (e)xponent: 5 bits\n- (m)antissa: 2 bits\n- exponent bias: 15\n- nan: {0,1}11111{01,10,11}\n- inf: 01111100\n- -inf: 11111100\n- -0: 10000000",
                        "kind": "alias",
                        "name": "float8e5m2",
                        "summary": "Represents a FP8E5M2 floating point format from the [OFP8 standard](https://www.opencompute.org/documents/ocp-8-bit-floating-point-specification-ofp8-revision-1-0-2023-12-01-pdf-1).",
                        "value": "{float8e5m2, float8e5m2}"
                      },
                      {
                        "deprecated": "",
                        "description": "The 8 bits are encoded as `seeeeemm`:\n- (s)ign: 1 bit\n- (e)xponent: 5 bits\n- (m)antissa: 2 bits\n- exponent bias: 16\n- nan: 10000000\n- fn: finite (no inf or -inf encodings)\n- uz: unsigned zero (no -0 encoding)",
                        "kind": "alias",
                        "name": "float8e5m2fnuz",
                        "summary": "Represents a FP8E5M2FNUZ floating point format.",
                        "value": "{float8e5m2fnuz, float8e5m2fnuz}"
                      },
                      {
                        "deprecated": "",
                        "description": "This type is named `float8_e4m3fn` (the \"fn\" stands for \"finite\") in some\nframeworks, as it does not encode -inf or inf.\n\nThe 8 bits are encoded as `seeeemmm`:\n- (s)ign: 1 bit\n- (e)xponent: 4 bits\n- (m)antissa: 3 bits\n- exponent bias: 7\n- nan: 01111111, 11111111\n- -0: 10000000\n- fn: finite (no inf or -inf encodings)",
                        "kind": "alias",
                        "name": "float8e4m3",
                        "summary": "Represents a FP8E4M3 floating point format from the [OFP8 standard](https://www.opencompute.org/documents/ocp-8-bit-floating-point-specification-ofp8-revision-1-0-2023-12-01-pdf-1).",
                        "value": "{float8e4m3, float8e4m3}"
                      },
                      {
                        "deprecated": "",
                        "description": "The 8 bits are encoded as `seeeemmm`:\n- (s)ign: 1 bit\n- (e)xponent: 4 bits\n- (m)antissa: 3 bits\n- exponent bias: 8\n- nan: 10000000\n- fn: finite (no inf or -inf encodings)\n- uz: unsigned zero (no -0 encoding)",
                        "kind": "alias",
                        "name": "float8e4m3fnuz",
                        "summary": "Represents a FP8E4M3FNUZ floating point format.",
                        "value": "{float8e4m3fnuz, float8e4m3fnuz}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "bfloat16",
                        "summary": "Represents a brain floating point value whose bitwidth is 16.",
                        "value": "{bfloat16, bfloat16}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "float16",
                        "summary": "Represents an IEEE754-2008 `binary16` floating point value.",
                        "value": "{float16, float16}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "float32",
                        "summary": "Represents an IEEE754-2008 `binary32` floating point value.",
                        "value": "{float32, float32}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "tensor_float32",
                        "summary": "Represents a special floating point format supported by NVIDIA Tensor Cores, with the same range as float32 and reduced precision (>=10 bits). Note that this type is only available on NVIDIA GPUs.",
                        "value": "{tensor_float32, tensor_float32}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "float64",
                        "summary": "Represents an IEEE754-2008 `binary64` floating point value.",
                        "value": "{float64, float64}"
                      },
                      {
                        "deprecated": "",
                        "description": "",
                        "kind": "alias",
                        "name": "index",
                        "summary": "Represents an integral type whose bitwidth is the maximum integral value on the system.",
                        "value": "{index, index}"
                      }
                    ],
                    "constraints": "",
                    "convention": "register_passable_trivial",
                    "deprecated": "",
                    "description": "",
                    "fields": [
                      {
                        "description": "",
                        "kind": "field",
                        "name": "re_value",
                        "summary": "",
                        "type": "dtype"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "im_value",
                        "summary": "",
                        "type": "dtype"
                      }
                    ],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "__init__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The CDType to copy.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, *, other: Self)",
                            "summary": "Copy this CDType."
                          },
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "re_value",
                                "passingKind": "pos_or_kw",
                                "type": "dtype"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "im_value",
                                "passingKind": "pos_or_kw",
                                "type": "dtype"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    value: The MLIR dtype.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, re_value: dtype, im_value: dtype)",
                            "summary": "Construct a CDType from MLIR dtype."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__eq__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "rhs",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    rhs: The CDType to compare against.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__eq__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "True if the DTypes are the same and False otherwise.",
                            "signature": "__eq__(self, rhs: Self) -> Bool",
                            "summary": "Compares one CDType to another for equality."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__ne__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "rhs",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    rhs: The CDType to compare against.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__ne__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "False if the DTypes are the same and True otherwise.",
                            "signature": "__ne__(self, rhs: Self) -> Bool",
                            "summary": "Compares one CDType to another for inequality."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__is__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "rhs",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    rhs: The CDType to compare against.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__is__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "True if the DTypes are the same and False otherwise.",
                            "signature": "__is__(self, rhs: Self) -> Bool",
                            "summary": "Compares one CDType to another for equality."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__isnot__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "rhs",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    rhs: The CDType to compare against.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__isnot__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "True if the CDTypes are the same and False otherwise.",
                            "signature": "__isnot__(self, rhs: Self) -> Bool",
                            "summary": "Compares one CDType to another for inequality."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "to_dtype",
                        "overloads": [
                          {
                            "args": [],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "to_dtype",
                            "parameters": [
                              {
                                "description": "",
                                "kind": "parameter",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "DType",
                            "returnsDoc": "True if the DTypes are the same and False otherwise.",
                            "signature": "to_dtype[other: Self]() -> DType",
                            "summary": "Find the equivalent DType."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__str__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__str__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "String",
                            "returnsDoc": "The name of the dtype.",
                            "signature": "__str__(self) -> String",
                            "summary": "Gets the name of the CDType."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "write_to",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "writer",
                                "passingKind": "pos_or_kw",
                                "type": "W"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    writer: The object to write to.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "write_to",
                            "parameters": [
                              {
                                "description": "A type conforming to the Writable trait.",
                                "kind": "parameter",
                                "name": "W",
                                "passingKind": "pos_or_kw",
                                "type": "Writer"
                              }
                            ],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "write_to[W: Writer](self, mut writer: W)",
                            "summary": "Formats this dtype to the provided Writer."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__repr__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__repr__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "String",
                            "returnsDoc": "The representation of the dtype.",
                            "signature": "__repr__(self) -> String",
                            "summary": "Gets the representation of the CDType e.g. `\"CDType.float32\"`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "get_value",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "get_value",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "dtype",
                            "returnsDoc": "The kgen.dtype value.",
                            "signature": "get_value(self) -> dtype",
                            "summary": "Gets the associated internal kgen.dtype value."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__hash__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__hash__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "UInt",
                            "returnsDoc": "A 64-bit integer hash of this `CDType` value.",
                            "signature": "__hash__(self) -> UInt",
                            "summary": "Return a 64-bit hash for this `CDType` value."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "hasher",
                                "passingKind": "pos_or_kw",
                                "type": "H"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    hasher: The hasher instance.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__hash__",
                            "parameters": [
                              {
                                "description": "The hasher type.",
                                "kind": "parameter",
                                "name": "H",
                                "passingKind": "pos_or_kw",
                                "type": "_Hasher"
                              }
                            ],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__hash__[H: _Hasher](self, mut hasher: H)",
                            "summary": "Updates hasher with this `CDType` value."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "is_unsigned",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "is_unsigned",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "Returns True if the input type parameter is unsigned.",
                            "signature": "is_unsigned(self) -> Bool",
                            "summary": "Returns True if the type parameter is unsigned and False otherwise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "is_signed",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "is_signed",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "Returns True if the input type parameter is signed.",
                            "signature": "is_signed(self) -> Bool",
                            "summary": "Returns True if the type parameter is signed and False otherwise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "is_integral",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "is_integral",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "Returns True if the input type parameter is an integer.",
                            "signature": "is_integral(self) -> Bool",
                            "summary": "Returns True if the type parameter is an integer and False otherwise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "is_floating_point",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "is_floating_point",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "Returns True if the input type parameter is a floating-point.",
                            "signature": "is_floating_point(self) -> Bool",
                            "summary": "Returns True if the type parameter is a floating-point and False otherwise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "is_float8",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "is_float8",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "True if the type is a 8bit-precision float, false otherwise.",
                            "signature": "is_float8(self) -> Bool",
                            "summary": "Returns True if the type is a 8bit-precision floating point type, e.g. float8e5m2, float8e5m2fnuz, float8e4m3 and float8e4m3fnuz."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "is_half_float",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "is_half_float",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "True if the type is a half-precision float, false otherwise..",
                            "signature": "is_half_float(self) -> Bool",
                            "summary": "Returns True if the type is a half-precision floating point type, e.g. either fp16 or bf16."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "is_numeric",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "is_numeric",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "Returns True if the input type parameter is either integral or floating-point.",
                            "signature": "is_numeric(self) -> Bool",
                            "summary": "Returns True if the type parameter is numeric (i.e. you can perform arithmetic operations on)."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "sizeof",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "sizeof",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Int",
                            "returnsDoc": "Returns the size in bytes of the current CDType.",
                            "signature": "sizeof(self) -> Int",
                            "summary": "Returns the size in bytes of the current CDType."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "bitwidth",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "bitwidth",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Int",
                            "returnsDoc": "Returns the size in bits of the current CDType.",
                            "signature": "bitwidth(self) -> Int",
                            "summary": "Returns the size in bits of the current CDType."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "dispatch_integral",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "CDType must be integral.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "dispatch_integral",
                            "parameters": [
                              {
                                "description": "",
                                "kind": "parameter",
                                "name": "",
                                "passingKind": "inferred",
                                "type": "origin.set"
                              },
                              {
                                "description": "A parametrized on dtype function to dispatch.",
                                "kind": "parameter",
                                "name": "func",
                                "passingKind": "pos_or_kw",
                                "type": "fn[CDType]() capturing -> None"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "dispatch_integral[: origin.set, //, func: fn[CDType]() capturing -> None](self)",
                            "summary": "Dispatches an integral function corresponding to the current CDType."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "dispatch_floating",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "CDType must be floating-point or integral.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "dispatch_floating",
                            "parameters": [
                              {
                                "description": "",
                                "kind": "parameter",
                                "name": "",
                                "passingKind": "inferred",
                                "type": "origin.set"
                              },
                              {
                                "description": "A parametrized on dtype function to dispatch.",
                                "kind": "parameter",
                                "name": "func",
                                "passingKind": "pos_or_kw",
                                "type": "fn[CDType]() capturing -> None"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "dispatch_floating[: origin.set, //, func: fn[CDType]() capturing -> None](self)",
                            "summary": "Dispatches a floating-point function corresponding to the current CDType."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "dispatch_arithmetic",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "dispatch_arithmetic",
                            "parameters": [
                              {
                                "description": "",
                                "kind": "parameter",
                                "name": "",
                                "passingKind": "inferred",
                                "type": "origin.set"
                              },
                              {
                                "description": "A parametrized on dtype function to dispatch.",
                                "kind": "parameter",
                                "name": "func",
                                "passingKind": "pos_or_kw",
                                "type": "fn[CDType]() capturing -> None"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "dispatch_arithmetic[: origin.set, //, func: fn[CDType]() capturing -> None](self)",
                            "summary": "Dispatches a function corresponding to the current CDType."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "CDType",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "CollectionElement",
                      "CollectionElementNew",
                      "Copyable",
                      "EqualityComparable",
                      "EqualityComparableCollectionElement",
                      "ExplicitlyCopyable",
                      "Hashable",
                      "KeyElement",
                      "Movable",
                      "Representable",
                      "Stringable",
                      "UnknownDestructibility",
                      "Writable",
                      "_HashableWithHasher"
                    ],
                    "summary": "Represents CDType and provides methods for working with it."
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "complex_ndarray",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [
                      {
                        "description": "",
                        "kind": "field",
                        "name": "ndim",
                        "summary": "Number of Dimensions.",
                        "type": "Int"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "shape",
                        "summary": "Size and shape of ComplexNDArray.",
                        "type": "NDArrayShape"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "size",
                        "summary": "Size of ComplexNDArray.",
                        "type": "Int"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "strides",
                        "summary": "Contains offset, strides.",
                        "type": "NDArrayStrides"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "flags",
                        "summary": "Information about the memory layout of the array.",
                        "type": "Dict[String, Bool]"
                      }
                    ],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "__init__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "owned",
                                "description": "",
                                "kind": "argument",
                                "name": "re",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              },
                              {
                                "convention": "owned",
                                "description": "",
                                "kind": "argument",
                                "name": "im",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, owned re: NDArray[dtype], owned im: NDArray[dtype])",
                            "summary": ""
                          },
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "Variadic shape.",
                                "kind": "argument",
                                "name": "shape",
                                "passingKind": "pos_or_kw",
                                "type": "NDArrayShape"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"C\")",
                                "description": "Memory order C or F.",
                                "kind": "argument",
                                "name": "order",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "The memory is not filled with values.\n\nExample:\n```mojo\nimport numojo as nm\nvar A = nm.ComplexNDArray[cf32](Shape(2,3,4))\n```",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, shape: NDArrayShape, order: String = String(\"C\"))",
                            "summary": "Initialize a ComplexNDArray with given shape."
                          },
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "List of shape.",
                                "kind": "argument",
                                "name": "shape",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"C\")",
                                "description": "Memory order C or F.",
                                "kind": "argument",
                                "name": "order",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, shape: List[Int], order: String = String(\"C\"))",
                            "summary": "(Overload) Initialize a ComplexNDArray with given shape (list of integers)."
                          },
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "Variadic List of shape.",
                                "kind": "argument",
                                "name": "shape",
                                "passingKind": "pos_or_kw",
                                "type": "VariadicList[Int]"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"C\")",
                                "description": "Memory order C or F.",
                                "kind": "argument",
                                "name": "order",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, shape: VariadicList[Int], order: String = String(\"C\"))",
                            "summary": "(Overload) Initialize a ComplexNDArray with given shape (variadic list of integers)."
                          },
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "shape",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "offset",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "strides",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, shape: List[Int], offset: Int, strides: List[Int])",
                            "summary": "Extremely specific ComplexNDArray initializer."
                          },
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "shape",
                                "passingKind": "pos_or_kw",
                                "type": "NDArrayShape"
                              },
                              {
                                "convention": "ref",
                                "description": "",
                                "kind": "argument",
                                "name": "buffer_re",
                                "passingKind": "pos_or_kw",
                                "type": "UnsafePointer[SIMD[dtype, 1]]"
                              },
                              {
                                "convention": "ref",
                                "description": "",
                                "kind": "argument",
                                "name": "buffer_im",
                                "passingKind": "pos_or_kw",
                                "type": "UnsafePointer[SIMD[dtype, 1]]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "offset",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "strides",
                                "passingKind": "pos_or_kw",
                                "type": "NDArrayStrides"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, shape: NDArrayShape, ref buffer_re: UnsafePointer[SIMD[dtype, 1]], ref buffer_im: UnsafePointer[SIMD[dtype, 1]], offset: Int, strides: NDArrayStrides)",
                            "summary": "Extremely specific ComplexNDArray initializer."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__copyinit__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__copyinit__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__copyinit__(out self, other: Self)",
                            "summary": "Copy other into self."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__moveinit__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "owned",
                                "description": "",
                                "kind": "argument",
                                "name": "existing",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__moveinit__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__moveinit__(out self, owned existing: Self)",
                            "summary": "Move other into self."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__getitem__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "idx",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Example:\n    `arr[1]` returns the second row of the ComplexNDArray.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__getitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__getitem__(self, idx: Int) -> Self",
                            "summary": "Retreive a slice of the ComplexNDArray corresponding to the index at the first dimension."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "index",
                                "passingKind": "pos_or_kw",
                                "type": "Item"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__getitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "ComplexSIMD[cdtype, dtype=dtype]",
                            "returnsDoc": "",
                            "signature": "__getitem__(self, index: Item) -> ComplexSIMD[cdtype, dtype=dtype]",
                            "summary": "Get the value at the index list."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "owned",
                                "description": "",
                                "kind": "argument",
                                "name": "*slices",
                                "passingKind": "pos_or_kw",
                                "type": "Slice"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Example:\n    `arr[1:3, 2:4]` returns the corresponding sliced ComplexNDArray (2 x 2).",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__getitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__getitem__(self, owned *slices: Slice) -> Self",
                            "summary": "Retreive slices of a ComplexNDArray from variadic slices."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "owned",
                                "description": "",
                                "kind": "argument",
                                "name": "slice_list",
                                "passingKind": "pos_or_kw",
                                "type": "List[Slice]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Example:\n    `arr[1:3, 2:4]` returns the corresponding sliced ComplexNDArray (2 x 2).",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__getitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__getitem__(self, owned slice_list: List[Slice]) -> Self",
                            "summary": "Retreive slices of a ComplexNDArray from list of slices."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "owned",
                                "description": "A series of either Slice or Int.",
                                "kind": "argument",
                                "name": "*slices",
                                "passingKind": "pos_or_kw",
                                "type": "Variant[Slice, Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__getitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "A ComplexNDArray with a smaller or equal dimension of the original one.",
                            "signature": "__getitem__(self, owned *slices: Variant[Slice, Int]) -> Self",
                            "summary": "Get items by a series of either slices or integers."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "List[Int].",
                                "kind": "argument",
                                "name": "index",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "It always gets the first dimension.\n```\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__getitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "ComplexNDArray with items from the list of indices.",
                            "signature": "__getitem__(self, index: List[Int]) -> Self",
                            "summary": "Get items of ComplexNDArray from a list of indices."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "index",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[index]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Refer to `__getitem__(self, index: List[Int])`.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__getitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__getitem__(self, index: NDArray[index]) -> Self",
                            "summary": "Get items of ComplexNDArray from an array of indices."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "NDArray with Dtype.bool.",
                                "kind": "argument",
                                "name": "mask",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[bool]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Example:\n    ```\n    var A = numojo.core.NDArray[numojo.i16](6, random=True)\n    var mask = A > 0\n    print(A)\n    print(mask)\n    print(A[mask])\n    ```\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__getitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "ComplexNDArray with items from the mask.",
                            "signature": "__getitem__(self, mask: NDArray[bool]) -> Self",
                            "summary": "Get items of ComplexNDArray corresponding to a mask."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__setitem__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "idx",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "val",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Example:\n```mojo\nimport numojo as nm\nvar A = nm.random.rand[nm.i16](3, 2)\nvar B = nm.random.rand[nm.i16](3)\nA[1:4] = B\n```",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__setitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__setitem__(mut self, idx: Int, val: Self)",
                            "summary": "Set a slice of ComplexNDArray with given ComplexNDArray."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "index",
                                "passingKind": "pos_or_kw",
                                "type": "Item"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "val",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__setitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__setitem__(mut self, index: Item, val: ComplexSIMD[cdtype, dtype=dtype])",
                            "summary": "Set the value at the index list."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "mask",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "value",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__setitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__setitem__(mut self, mask: Self, value: ComplexSIMD[cdtype, dtype=dtype])",
                            "summary": "Set the value of the array at the indices where the mask is true."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "owned",
                                "description": "",
                                "kind": "argument",
                                "name": "*slices",
                                "passingKind": "pos_or_kw",
                                "type": "Slice"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "val",
                                "passingKind": "kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Example:\n    `arr[1:3, 2:4]` returns the corresponding sliced ComplexNDArray (2 x 2).",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__setitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__setitem__(mut self, owned *slices: Slice, *, val: Self)",
                            "summary": "Retreive slices of an ComplexNDArray from variadic slices."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "owned",
                                "description": "",
                                "kind": "argument",
                                "name": "slices",
                                "passingKind": "pos_or_kw",
                                "type": "List[Slice]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "val",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Example:\n    `arr[1:3, 2:4]` returns the corresponding sliced ComplexNDArray (2 x 2).",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__setitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__setitem__(mut self, owned slices: List[Slice], val: Self)",
                            "summary": "Sets the slices of an ComplexNDArray from list of slices and ComplexNDArray."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "index",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[index]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "val",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Refer to `__getitem__(self, index: List[Int])`.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__setitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__setitem__(self, index: NDArray[index], val: Self)",
                            "summary": "Returns the items of the ComplexNDArray from an array of indices."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "mask",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "val",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__setitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__setitem__(mut self, mask: Self, val: Self)",
                            "summary": "Set the value of the ComplexNDArray at the indices where the mask is true."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__neg__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "For bolean use `__invert__`(~)",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__neg__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__neg__(self) -> Self",
                            "summary": "Unary negative returns self unless boolean type."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__pos__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__pos__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__pos__(self) -> Self",
                            "summary": "Unary positive returns self unless boolean type."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__eq__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__eq__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[bool]",
                            "returnsDoc": "",
                            "signature": "__eq__(self, other: Self) -> NDArray[bool]",
                            "summary": "Itemwise equivalence."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__eq__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[bool]",
                            "returnsDoc": "",
                            "signature": "__eq__(self, other: ComplexSIMD[cdtype, dtype=dtype]) -> NDArray[bool]",
                            "summary": "Itemwise equivalence between scalar and ComplexNDArray."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__ne__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__ne__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[bool]",
                            "returnsDoc": "",
                            "signature": "__ne__(self, other: Self) -> NDArray[bool]",
                            "summary": "Itemwise non-equivalence."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__ne__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[bool]",
                            "returnsDoc": "",
                            "signature": "__ne__(self, other: ComplexSIMD[cdtype, dtype=dtype]) -> NDArray[bool]",
                            "summary": "Itemwise non-equivalence between scalar and ComplexNDArray."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__add__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__add__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__add__(self, other: ComplexSIMD[cdtype, dtype=dtype]) -> Self",
                            "summary": "Enables `ComplexNDArray + ComplexSIMD`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__add__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__add__(self, other: SIMD[dtype, 1]) -> Self",
                            "summary": "Enables `ComplexNDArray + Scalar`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__add__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__add__(self, other: Self) -> Self",
                            "summary": "Enables `ComplexNDArray + ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__add__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__add__(self, other: NDArray[dtype]) -> Self",
                            "summary": "Enables `ComplexNDArray + NDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__sub__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__sub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__sub__(self, other: ComplexSIMD[cdtype, dtype=dtype]) -> Self",
                            "summary": "Enables `ComplexNDArray - ComplexSIMD`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__sub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__sub__(self, other: SIMD[dtype, 1]) -> Self",
                            "summary": "Enables `ComplexNDArray - Scalar`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__sub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__sub__(self, other: Self) -> Self",
                            "summary": "Enables `ComplexNDArray - ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__sub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__sub__(self, other: NDArray[dtype]) -> Self",
                            "summary": "Enables `ComplexNDArray - NDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__mul__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__mul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__mul__(self, other: ComplexSIMD[cdtype, dtype=dtype]) -> Self",
                            "summary": "Enables `ComplexNDArray * ComplexSIMD`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__mul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__mul__(self, other: SIMD[dtype, 1]) -> Self",
                            "summary": "Enables `ComplexNDArray * Scalar`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__mul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__mul__(self, other: Self) -> Self",
                            "summary": "Enables `ComplexNDArray * ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__mul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__mul__(self, other: NDArray[dtype]) -> Self",
                            "summary": "Enables `ComplexNDArray * NDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__matmul__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__matmul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__matmul__(self, other: Self) -> Self",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__truediv__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__truediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__truediv__(self, other: ComplexSIMD[cdtype, dtype=dtype]) -> Self",
                            "summary": "Enables `ComplexNDArray / ComplexSIMD`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__truediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__truediv__(self, other: SIMD[dtype, 1]) -> Self",
                            "summary": "Enables `ComplexNDArray / ComplexSIMD`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__truediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__truediv__(self, other: Self) -> Self",
                            "summary": "Enables `ComplexNDArray / ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__truediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__truediv__(self, other: NDArray[dtype]) -> Self",
                            "summary": "Enables `ComplexNDArray / NDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__radd__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__radd__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__radd__(mut self, other: ComplexSIMD[cdtype, dtype=dtype]) -> Self",
                            "summary": "Enables `ComplexSIMD + ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__radd__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__radd__(mut self, other: SIMD[dtype, 1]) -> Self",
                            "summary": "Enables `Scalar + ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__radd__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__radd__(mut self, other: NDArray[dtype]) -> Self",
                            "summary": "Enables `NDArray + ComplexNDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__rsub__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__rsub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__rsub__(mut self, other: ComplexSIMD[cdtype, dtype=dtype]) -> Self",
                            "summary": "Enables `ComplexSIMD - ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__rsub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__rsub__(mut self, other: SIMD[dtype, 1]) -> Self",
                            "summary": "Enables `Scalar - ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__rsub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__rsub__(mut self, other: NDArray[dtype]) -> Self",
                            "summary": "Enables `NDArray - ComplexNDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__rmul__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__rmul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__rmul__(self, other: ComplexSIMD[cdtype, dtype=dtype]) -> Self",
                            "summary": "Enables `ComplexSIMD * ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__rmul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__rmul__(self, other: SIMD[dtype, 1]) -> Self",
                            "summary": "Enables `Scalar * ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__rmul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__rmul__(self, other: NDArray[dtype]) -> Self",
                            "summary": "Enables `NDArray * ComplexNDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__rtruediv__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__rtruediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__rtruediv__(mut self, other: ComplexSIMD[cdtype, dtype=dtype]) -> Self",
                            "summary": "Enables `ComplexSIMD / ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__rtruediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__rtruediv__(mut self, other: SIMD[dtype, 1]) -> Self",
                            "summary": "Enables `Scalar / ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__rtruediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__rtruediv__(mut self, other: NDArray[dtype]) -> Self",
                            "summary": "Enables `NDArray / ComplexNDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__iadd__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__iadd__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__iadd__(mut self, other: ComplexSIMD[cdtype, dtype=dtype])",
                            "summary": "Enables `ComplexNDArray += ComplexSIMD`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__iadd__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__iadd__(mut self, other: SIMD[dtype, 1])",
                            "summary": "Enables `ComplexNDArray += Scalar`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__iadd__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__iadd__(mut self, other: Self)",
                            "summary": "Enables `ComplexNDArray += ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__iadd__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__iadd__(mut self, other: NDArray[dtype])",
                            "summary": "Enables `ComplexNDArray += NDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__isub__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__isub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__isub__(mut self, other: ComplexSIMD[cdtype, dtype=dtype])",
                            "summary": "Enables `ComplexNDArray -= ComplexSIMD`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__isub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__isub__(mut self, other: SIMD[dtype, 1])",
                            "summary": "Enables `ComplexNDArray -= Scalar`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__isub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__isub__(mut self, other: Self)",
                            "summary": "Enables `ComplexNDArray -= ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__isub__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__isub__(mut self, other: NDArray[dtype])",
                            "summary": "Enables `ComplexNDArray -= NDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__imul__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__imul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__imul__(mut self, other: ComplexSIMD[cdtype, dtype=dtype])",
                            "summary": "Enables `ComplexNDArray *= ComplexSIMD`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__imul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__imul__(mut self, other: SIMD[dtype, 1])",
                            "summary": "Enables `ComplexNDArray *= Scalar`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__imul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__imul__(mut self, other: Self)",
                            "summary": "Enables `ComplexNDArray *= ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__imul__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__imul__(mut self, other: NDArray[dtype])",
                            "summary": "Enables `ComplexNDArray *= NDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__itruediv__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__itruediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__itruediv__(mut self, other: ComplexSIMD[cdtype, dtype=dtype])",
                            "summary": "Enables `ComplexNDArray /= ComplexSIMD`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__itruediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__itruediv__(mut self, other: SIMD[dtype, 1])",
                            "summary": "Enables `ComplexNDArray /= Scalar`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__itruediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__itruediv__(mut self, other: Self)",
                            "summary": "Enables `ComplexNDArray /= ComplexNDArray`."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__itruediv__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__itruediv__(mut self, other: NDArray[dtype])",
                            "summary": "Enables `ComplexNDArray /= NDArray`."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__str__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__str__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "String",
                            "returnsDoc": "",
                            "signature": "__str__(self) -> String",
                            "summary": "Enables str(array)."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "write_to",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "writer",
                                "passingKind": "pos_or_kw",
                                "type": "W"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "write_to",
                            "parameters": [
                              {
                                "description": "",
                                "kind": "parameter",
                                "name": "W",
                                "passingKind": "pos_or_kw",
                                "type": "Writer"
                              }
                            ],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "write_to[W: Writer](self, mut writer: W)",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__repr__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__repr__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "String",
                            "returnsDoc": "",
                            "signature": "__repr__(self) -> String",
                            "summary": "Compute the \"official\" string representation of ComplexNDArray. An example is: ``` fn main() raises:     var A = ComplexNDArray[cf32](List[ComplexSIMD[cf32]](14,97,-59,-4,112,), shape=List[Int](5,))     print(repr(A)) ``` It prints what can be used to construct the array itself: ```console     ComplexNDArray[cf32](List[ComplexSIMD[cf32]](14,97,-59,-4,112,), shape=List[Int](5,)) ```."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__len__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__len__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Int",
                            "returnsDoc": "",
                            "signature": "__len__(self) -> Int",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "load",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "index",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "To bypass boundary checks, use `self._buf.ptr.load` directly.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "load",
                            "parameters": [
                              {
                                "default": "1",
                                "description": "",
                                "kind": "parameter",
                                "name": "width",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "Index out of boundary.",
                            "returnType": "ComplexSIMD[cdtype, dtype=dtype]",
                            "returnsDoc": "",
                            "signature": "load[width: Int = 1](self, index: Int) -> ComplexSIMD[cdtype, dtype=dtype]",
                            "summary": "Safely loads a SIMD element of size `width` at `index` from the underlying buffer."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "*indices",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "To bypass boundary checks, use `self._buf.ptr.load` directly.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "load",
                            "parameters": [
                              {
                                "default": "1",
                                "description": "",
                                "kind": "parameter",
                                "name": "width",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "Index out of boundary.",
                            "returnType": "ComplexSIMD[cdtype, dtype=dtype]",
                            "returnsDoc": "",
                            "signature": "load[width: Int = 1](self, *indices: Int) -> ComplexSIMD[cdtype, dtype=dtype]",
                            "summary": "Safely loads a SIMD element of size `width` at given variadic indices from the underlying buffer."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "store",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "index",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "val",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "To bypass boundary checks, use `self._buf.ptr.store` directly.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "store",
                            "parameters": [
                              {
                                "default": "1",
                                "description": "",
                                "kind": "parameter",
                                "name": "width",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "Index out of boundary.",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "store[width: Int = 1](mut self, index: Int, val: ComplexSIMD[cdtype, dtype=dtype])",
                            "summary": "Safely stores SIMD element of size `width` at `index` of the underlying buffer."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "*indices",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "val",
                                "passingKind": "kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "To bypass boundary checks, use `self._buf.ptr.store` directly.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "store",
                            "parameters": [
                              {
                                "default": "1",
                                "description": "",
                                "kind": "parameter",
                                "name": "width",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "Index out of boundary.",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "store[width: Int = 1](mut self, *indices: Int, *, val: ComplexSIMD[cdtype, dtype=dtype])",
                            "summary": "Safely stores SIMD element of size `width` at given variadic indices of the underlying buffer."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "item",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "owned",
                                "description": "Index of item, counted in row-major way.",
                                "kind": "argument",
                                "name": "index",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "If one index is given, get the i-th item of the ComplexNDArray (not buffer).\nIt first scans over the first row, even it is a colume-major array.\n\nIf more than one index is given, the length of the indices must match\nthe number of dimensions of the array.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "item",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "Index is equal or larger than array size.",
                            "returnType": "ComplexSIMD[cdtype, dtype=dtype]",
                            "returnsDoc": "A scalar matching the dtype of the array.",
                            "signature": "item(self, owned index: Int) -> ComplexSIMD[cdtype, dtype=dtype]",
                            "summary": "Return the scalar at the coordinates."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "The coordinates of the item.",
                                "kind": "argument",
                                "name": "*index",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "If one index is given, get the i-th item of the ComplexNDArray (not buffer).\nIt first scans over the first row, even it is a colume-major array.\n\nIf more than one index is given, the length of the indices must match\nthe number of dimensions of the array.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "item",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "Index is equal or larger than size of dimension.",
                            "returnType": "ComplexSIMD[cdtype, dtype=dtype]",
                            "returnsDoc": "A scalar matching the dtype of the array.",
                            "signature": "item(self, *index: Int) -> ComplexSIMD[cdtype, dtype=dtype]",
                            "summary": "Return the scalar at the coordinates."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "itemset",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "The coordinates of the item. Can either be `Int` or `List[Int]`. If `Int` is passed, it is the index of i-th item of the whole array. If `List[Int]` is passed, it is the coordinate of the item.",
                                "kind": "argument",
                                "name": "index",
                                "passingKind": "pos_or_kw",
                                "type": "Variant[Int, List[Int]]"
                              },
                              {
                                "convention": "read",
                                "description": "The scalar to be set.",
                                "kind": "argument",
                                "name": "item",
                                "passingKind": "pos_or_kw",
                                "type": "ComplexSIMD[cdtype, dtype=dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "itemset",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "itemset(mut self, index: Variant[Int, List[Int]], item: ComplexSIMD[cdtype, dtype=dtype])",
                            "summary": "Set the scalar at the coordinates."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "conj",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "conj",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "conj(self) -> Self",
                            "summary": "Return the complex conjugate of the ComplexNDArray."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "to_ndarray",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"re\")",
                                "description": "",
                                "kind": "argument",
                                "name": "type",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "to_ndarray",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[dtype]",
                            "returnsDoc": "",
                            "signature": "to_ndarray(self, type: String = String(\"re\")) -> NDArray[dtype]",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ComplexNDArray",
                    "parameters": [
                      {
                        "description": "Complex data type.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Real data type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "parentTraits": [
                      "AnyType",
                      "CollectionElement",
                      "Copyable",
                      "Movable",
                      "Representable",
                      "Sized",
                      "Stringable",
                      "UnknownDestructibility",
                      "Writable"
                    ],
                    "summary": "Represents a Complex N-Dimensional Array."
                  }
                ],
                "summary": "Implements N-Dimensional Complex Array Last updated: 2025-01-26",
                "traits": []
              },
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "ComplexScalar",
                    "summary": "",
                    "value": "ComplexSIMD[?]"
                  }
                ],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "complex_simd",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "register_passable_trivial",
                    "deprecated": "",
                    "description": "",
                    "fields": [
                      {
                        "description": "",
                        "kind": "field",
                        "name": "re",
                        "summary": "",
                        "type": "SIMD[dtype, size]"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "im",
                        "summary": "",
                        "type": "SIMD[dtype, size]"
                      }
                    ],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "__init__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: Another ComplexSIMD instance to copy from.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, other: Self)",
                            "summary": "Initializes a ComplexSIMD instance by copying another instance."
                          },
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "re",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, size]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "im",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, size]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    re: The real part of the complex number.\n    im: The imaginary part of the complex number.\n\nExample:\n```mojo\nvar A = ComplexSIMD[cf32](SIMD[f32, 1](1.0), SIMD[f32, 1](2.0))\nvar B = ComplexSIMD[cf32](SIMD[f32, 1](3.0), SIMD[f32, 1](4.0))\nvar C = A + B\nprint(C)\n```",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, re: SIMD[dtype, size], im: SIMD[dtype, size])",
                            "summary": "Initializes a ComplexSIMD instance with specified real and imaginary parts."
                          },
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "val",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, size]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    re: The real part of the complex number.\n    im: The imaginary part of the complex number.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, val: SIMD[dtype, size])",
                            "summary": "Initializes a ComplexSIMD instance with specified real and imaginary parts."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__getitem__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "idx",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    self: The ComplexSIMD instance.\n    idx: The index to access (0 for real, 1 for imaginary).\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__getitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "SIMD[dtype, size]",
                            "returnsDoc": "SIMD[dtype, 1]: The requested part of the ComplexSIMD instance.",
                            "signature": "__getitem__(self, idx: Int) -> SIMD[dtype, size]",
                            "summary": "Gets the real or imaginary part of the ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__setitem__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "idx",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "value",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    self: The ComplexSIMD instance to modify.\n    idx: The index to access (0 for real, 1 for imaginary).\n    value: The new value to set.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__setitem__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__setitem__(mut self, idx: Int, value: Self)",
                            "summary": "Sets the real and imaginary parts of the ComplexSIMD instance."
                          },
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "idx",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "re",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, size]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "im",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, size]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    self: The ComplexSIMD instance to modify.\n    idx: The index to access (0 for real, 1 for imaginary).\n    re: The new value for the real part.\n    im: The new value for the imaginary part.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__setitem__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__setitem__(mut self, idx: Int, re: SIMD[dtype, size], im: SIMD[dtype, size])",
                            "summary": "Sets the real and imaginary parts of the ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__neg__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__neg__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "Self: The negated ComplexSIMD instance.",
                            "signature": "__neg__(self) -> Self",
                            "summary": "Negates the ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__pos__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__pos__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "Self: The ComplexSIMD instance itself.",
                            "signature": "__pos__(self) -> Self",
                            "summary": "Returns the ComplexSIMD instance itself."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__eq__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    self: The first ComplexSIMD instance.\n    other: The second ComplexSIMD instance to compare with.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__eq__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "Bool: True if the instances are equal, False otherwise.",
                            "signature": "__eq__(self, other: Self) -> Bool",
                            "summary": "Checks if two ComplexSIMD instances are equal."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__ne__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    self: The first ComplexSIMD instance.\n    other: The second ComplexSIMD instance to compare with.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__ne__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Bool",
                            "returnsDoc": "Bool: True if the instances are not equal, False otherwise.",
                            "signature": "__ne__(self, other: Self) -> Bool",
                            "summary": "Checks if two ComplexSIMD instances are not equal."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__add__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The ComplexSIMD instance to add.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__add__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "Self: A new ComplexSIMD instance representing the sum.",
                            "signature": "__add__(self, other: Self) -> Self",
                            "summary": "Adds two ComplexSIMD instances."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__sub__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The ComplexSIMD instance to subtract.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__sub__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "Self: A new ComplexSIMD instance representing the difference.",
                            "signature": "__sub__(self, other: Self) -> Self",
                            "summary": "Subtracts another ComplexSIMD instance from this one."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__mul__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The ComplexSIMD instance to multiply with.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__mul__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "Self: A new ComplexSIMD instance representing the product.",
                            "signature": "__mul__(self, other: Self) -> Self",
                            "summary": "Multiplies two ComplexSIMD instances."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__truediv__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The ComplexSIMD instance to divide by.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__truediv__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "Self: A new ComplexSIMD instance representing the quotient.",
                            "signature": "__truediv__(self, other: Self) -> Self",
                            "summary": "Divides this ComplexSIMD instance by another."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__pow__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The ComplexSIMD instance to raise to the power of.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__pow__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "Self: A new ComplexSIMD instance representing the result.",
                            "signature": "__pow__(self, other: Self) -> Self",
                            "summary": "Raises this ComplexSIMD instance to the power of another."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The scalar to raise to the power of.\n",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__pow__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "Self: A new ComplexSIMD instance representing the result.",
                            "signature": "__pow__(self, other: SIMD[dtype, 1]) -> Self",
                            "summary": "Raises this ComplexSIMD instance to the power of a scalar."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__iadd__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The ComplexSIMD instance to add.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__iadd__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__iadd__(mut self, other: Self)",
                            "summary": "Performs in-place addition of another ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__isub__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The ComplexSIMD instance to subtract.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__isub__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__isub__(mut self, other: Self)",
                            "summary": "Performs in-place subtraction of another ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__imul__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The ComplexSIMD instance to multiply with.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__imul__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__imul__(mut self, other: Self)",
                            "summary": "Performs in-place multiplication with another ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__itruediv__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    other: The ComplexSIMD instance to divide by.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__itruediv__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__itruediv__(mut self, other: Self)",
                            "summary": "Performs in-place division by another ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__str__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__str__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "String",
                            "returnsDoc": "String: The string representation of the ComplexSIMD instance.",
                            "signature": "__str__(self) -> String",
                            "summary": "Returns a string representation of the ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "write_to",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "writer",
                                "passingKind": "pos_or_kw",
                                "type": "W"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Arguments:\n    self: The ComplexSIMD instance to write.\n    writer: The writer to write to.",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "write_to",
                            "parameters": [
                              {
                                "description": "",
                                "kind": "parameter",
                                "name": "W",
                                "passingKind": "pos_or_kw",
                                "type": "Writer"
                              }
                            ],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "write_to[W: Writer](self, mut writer: W)",
                            "summary": "Writes the ComplexSIMD instance to a writer."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__repr__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__repr__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "String",
                            "returnsDoc": "String: The string representation of the ComplexSIMD instance.",
                            "signature": "__repr__(self) -> String",
                            "summary": "Returns a string representation of the ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__abs__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__abs__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "SIMD[dtype, size]",
                            "returnsDoc": "",
                            "signature": "__abs__(self) -> SIMD[dtype, size]",
                            "summary": "Returns the magnitude of the ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "norm",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "norm",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "SIMD[dtype, size]",
                            "returnsDoc": "",
                            "signature": "norm(self) -> SIMD[dtype, size]",
                            "summary": "Returns the squared magnitude of the ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "conj",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "conj",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "conj(self) -> Self",
                            "summary": "Returns the complex conjugate of the ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "real",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "real",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "SIMD[dtype, size]",
                            "returnsDoc": "",
                            "signature": "real(self) -> SIMD[dtype, size]",
                            "summary": "Returns the real part of the ComplexSIMD instance."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "imag",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "imag",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "SIMD[dtype, size]",
                            "returnsDoc": "",
                            "signature": "imag(self) -> SIMD[dtype, size]",
                            "summary": "Returns the imaginary part of the ComplexSIMD instance."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ComplexSIMD",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      },
                      {
                        "default": "1",
                        "description": "",
                        "kind": "parameter",
                        "name": "size",
                        "passingKind": "kw",
                        "type": "Int"
                      }
                    ],
                    "parentTraits": [
                      "AnyType",
                      "Stringable",
                      "UnknownDestructibility",
                      "Writable"
                    ],
                    "summary": "Represents a SIMD[dtype, 1] Complex number with real and imaginary parts."
                  }
                ],
                "summary": "",
                "traits": []
              }
            ],
            "name": "complex",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "Defines Numojo Traits",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "array_like",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "backend",
                "structs": [],
                "summary": "",
                "traits": [
                  {
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "__init__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self: _Self)",
                            "summary": "Initialize the backend."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "math_func_fma",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array1",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array2",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array3",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "Both arrays must have the same shape",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "math_func_fma",
                            "parameters": [
                              {
                                "description": "The element type.",
                                "kind": "parameter",
                                "name": "dtype",
                                "passingKind": "pos_or_kw",
                                "type": "DType"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "If shapes are missmatched or there is a access error.",
                            "returnType": "NDArray[dtype]",
                            "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                            "signature": "math_func_fma[dtype: DType](self: _Self, array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[dtype]",
                            "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                          },
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array1",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array2",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              },
                              {
                                "convention": "read",
                                "description": "A SIMD[dtype,1] value to be added.",
                                "kind": "argument",
                                "name": "simd",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "Both arrays must have the same shape",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "math_func_fma",
                            "parameters": [
                              {
                                "description": "The element type.",
                                "kind": "parameter",
                                "name": "dtype",
                                "passingKind": "pos_or_kw",
                                "type": "DType"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[dtype]",
                            "returnsDoc": "A new NDArray that is NDArray with the function func applied.",
                            "signature": "math_func_fma[dtype: DType](self: _Self, array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[dtype]",
                            "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "math_func_1_array_in_one_array_out",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "math_func_1_array_in_one_array_out",
                            "parameters": [
                              {
                                "description": "The element type.",
                                "kind": "parameter",
                                "name": "dtype",
                                "passingKind": "pos_or_kw",
                                "type": "DType"
                              },
                              {
                                "description": "The SIMD function to to apply.",
                                "kind": "parameter",
                                "name": "func",
                                "passingKind": "pos_or_kw",
                                "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[dtype]",
                            "returnsDoc": "A new NDArray that is NDArray with the function func applied.",
                            "signature": "math_func_1_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]](self: _Self, array: NDArray[dtype]) -> NDArray[dtype]",
                            "summary": "Apply a SIMD function of one variable and one return to a NDArray."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "math_func_2_array_in_one_array_out",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array1",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array2",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "Both arrays must have the same shape",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "math_func_2_array_in_one_array_out",
                            "parameters": [
                              {
                                "description": "The element type.",
                                "kind": "parameter",
                                "name": "dtype",
                                "passingKind": "pos_or_kw",
                                "type": "DType"
                              },
                              {
                                "description": "The SIMD function to to apply.",
                                "kind": "parameter",
                                "name": "func",
                                "passingKind": "pos_or_kw",
                                "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[dtype]",
                            "returnsDoc": "A new NDArray that is NDArray with the function func applied.",
                            "signature": "math_func_2_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: _Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                            "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "math_func_1_array_1_scalar_in_one_array_out",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              },
                              {
                                "convention": "read",
                                "description": "A Scalars.",
                                "kind": "argument",
                                "name": "scalar",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "Both arrays must have the same shape",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "math_func_1_array_1_scalar_in_one_array_out",
                            "parameters": [
                              {
                                "description": "The element type.",
                                "kind": "parameter",
                                "name": "dtype",
                                "passingKind": "pos_or_kw",
                                "type": "DType"
                              },
                              {
                                "description": "The SIMD function to to apply.",
                                "kind": "parameter",
                                "name": "func",
                                "passingKind": "pos_or_kw",
                                "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[dtype]",
                            "returnsDoc": "A new NDArray that is NDArray with the function func applied.",
                            "signature": "math_func_1_array_1_scalar_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: _Self, array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[dtype]",
                            "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "math_func_compare_2_arrays",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array1",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array2",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "Both arrays must have the same shape.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "math_func_compare_2_arrays",
                            "parameters": [
                              {
                                "description": "The element type.",
                                "kind": "parameter",
                                "name": "dtype",
                                "passingKind": "pos_or_kw",
                                "type": "DType"
                              },
                              {
                                "description": "The SIMD comparision function to to apply.",
                                "kind": "parameter",
                                "name": "func",
                                "passingKind": "pos_or_kw",
                                "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[bool]",
                            "returnsDoc": "A new Boolean NDArray that is NDArray with the function func applied.",
                            "signature": "math_func_compare_2_arrays[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]](self: _Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                            "summary": "Apply a SIMD comparision function of two variable."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "math_func_compare_array_and_scalar",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "A NDArray.",
                                "kind": "argument",
                                "name": "array1",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              },
                              {
                                "convention": "read",
                                "description": "A scalar.",
                                "kind": "argument",
                                "name": "scalar",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[dtype, 1]"
                              }
                            ],
                            "async": false,
                            "constraints": "Both arrays must have the same shape.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "math_func_compare_array_and_scalar",
                            "parameters": [
                              {
                                "description": "The element type.",
                                "kind": "parameter",
                                "name": "dtype",
                                "passingKind": "pos_or_kw",
                                "type": "DType"
                              },
                              {
                                "description": "The SIMD comparision function to to apply.",
                                "kind": "parameter",
                                "name": "func",
                                "passingKind": "pos_or_kw",
                                "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[bool]",
                            "returnsDoc": "A new Boolean NDArray that is NDArray with the function func applied.",
                            "signature": "math_func_compare_array_and_scalar[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]](self: _Self, array1: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[bool]",
                            "summary": "Apply a SIMD comparision function of two variable."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "math_func_is",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "array",
                                "passingKind": "pos_or_kw",
                                "type": "NDArray[dtype]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "math_func_is",
                            "parameters": [
                              {
                                "description": "",
                                "kind": "parameter",
                                "name": "dtype",
                                "passingKind": "pos_or_kw",
                                "type": "DType"
                              },
                              {
                                "description": "",
                                "kind": "parameter",
                                "name": "func",
                                "passingKind": "pos_or_kw",
                                "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]"
                              }
                            ],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "NDArray[bool]",
                            "returnsDoc": "",
                            "signature": "math_func_is[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]](self: _Self, array: NDArray[dtype]) -> NDArray[bool]",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "trait",
                    "name": "Backend",
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": "A trait that defines backends for calculations in the rest of the library."
                  }
                ]
              },
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "bufferable",
                "structs": [],
                "summary": "",
                "traits": [
                  {
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "__init__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "size",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self: _Self, size: Int)",
                            "summary": ""
                          },
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "ptr",
                                "passingKind": "pos_or_kw",
                                "type": "UnsafePointer[SIMD[float16, 1]]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self: _Self, ptr: UnsafePointer[SIMD[float16, 1]])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__moveinit__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              },
                              {
                                "convention": "owned",
                                "description": "",
                                "kind": "argument",
                                "name": "other",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__moveinit__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__moveinit__(out self: _Self, owned other: _Self)",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "get_ptr",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "get_ptr",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "UnsafePointer[SIMD[float16, 1]]",
                            "returnsDoc": "",
                            "signature": "get_ptr(self: _Self) -> UnsafePointer[SIMD[float16, 1]]",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "trait",
                    "name": "Bufferable",
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": "Data buffer types that can be used as a container of the underlying buffer."
                  }
                ]
              },
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "indexer_collection_element",
                "structs": [],
                "summary": "",
                "traits": [
                  {
                    "deprecated": "",
                    "description": "This is useful to have as a named entity since Mojo does not\ncurrently support anonymous trait compositions to constrain\non `Indexer & CollectionElement` in the parameter.",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "__copyinit__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos",
                                "type": "_Self"
                              },
                              {
                                "convention": "read",
                                "description": "The value to copy.",
                                "kind": "argument",
                                "name": "existing",
                                "passingKind": "pos",
                                "type": "_Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__copyinit__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__copyinit__(out self: _Self, existing: _Self, /)",
                            "summary": "Create a new instance of the value by copying an existing one."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__moveinit__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos",
                                "type": "_Self"
                              },
                              {
                                "convention": "owned",
                                "description": "The value to move.",
                                "kind": "argument",
                                "name": "existing",
                                "passingKind": "pos",
                                "type": "_Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__moveinit__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__moveinit__(out self: _Self, owned existing: _Self, /)",
                            "summary": "Create a new instance of the value by moving the value of another."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__index__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "_Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__index__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Int",
                            "returnsDoc": "The index value of the object.",
                            "signature": "__index__(self: _Self) -> Int",
                            "summary": "Return the index value."
                          }
                        ]
                      }
                    ],
                    "kind": "trait",
                    "name": "IndexerCollectionElement",
                    "parentTraits": [
                      "AnyType",
                      "CollectionElement",
                      "Copyable",
                      "Indexer",
                      "Movable",
                      "UnknownDestructibility"
                    ],
                    "summary": "The IndexerCollectionElement trait denotes a trait composition of the `Indexer` and `CollectionElement` traits."
                  }
                ]
              }
            ],
            "name": "traits",
            "packages": [],
            "summary": "Defines Numojo Traits"
          }
        ],
        "summary": ""
      },
      {
        "description": "- Array creation routines (creation.mojo)\n- Array manipulation routines (manipulation.mojo)\n- Bit-wise operations (bitwise.mojo)\n- Constants (constants.mojo)\n- Input and output (io/)\n    - Text files (files.mojo)\n    - Text formatting options (formatting.mojo)\n- Linear algebra (linalg/)\n    - Decompositions (decompositions.mojo)\n    - Products of matrices and vectors (products.mojo)\n    - Solving (solving.mojo)\n- Logic functions (logic/)\n    - Comparison (comparison.mojo)\n    - Array contents (contents.mojo)\n    - Truth value testing (truth.mojo)\n- Mathematical functions (math/)\n    - Arithmetic operations (arithmetic.mojo)\n    - Exponents and logarithms (exponents.mojo)\n    - Extrema finding (extrema.mojo)\n    - Floating point routines (floating.mojo)\n    - Hyperbolic functions (hyper.mojo)\n    - Miscellaneous (misc.mojo)\n    - Rounding (rounding.mojo)\n    - Sums, products, differences (sums.mojo, products.mojo, differences.mojo)\n    - Trigonometric functions (trig.mojo)\n- Random sampling (random.mojo)\n- Sorting, searching, and counting (sorting.mojo, searching.mojo)\n- Statistics (statistics/)\n    - Averages and variances (averages.mojo)",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "- Array creation routines (creation.mojo)\n- Array manipulation routines (manipulation.mojo)\n- Bit-wise operations (bitwise.mojo)\n- Constants (constants.mojo)\n- Input and output (io/)\n    - Text files (files.mojo)\n    - Text formatting options (formatting.mojo)\n- Linear algebra (linalg/)\n    - Decompositions (decompositions.mojo)\n    - Products of matrices and vectors (products.mojo)\n    - Solving (solving.mojo)\n- Logic functions (logic/)\n    - Comparison (comparison.mojo)\n    - Array contents (contents.mojo)\n    - Truth value testing (truth.mojo)\n- Mathematical functions (math/)\n    - Arithmetic operations (arithmetic.mojo)\n    - Exponents and logarithms (exponents.mojo)\n    - Extrema finding (extrema.mojo)\n    - Floating point routines (floating.mojo)\n    - Hyperbolic functions (hyper.mojo)\n    - Miscellaneous (misc.mojo)\n    - Rounding (rounding.mojo)\n    - Sums, products, differences (sums.mojo, products.mojo, differences.mojo)\n    - Trigonometric functions (trig.mojo)\n- Random sampling (random.mojo)\n- Sorting, searching, and counting (sorting.mojo, searching.mojo)\n- Statistics (statistics/)\n    - Averages and variances (averages.mojo)",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "Implements routines by topic:",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "invert",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "The array must be either a boolean or integral array.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "invert",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defaults to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray equal to the bitwise inversion of array.",
                    "signature": "invert[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                    "summary": "Element-wise invert of an array."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "bitwise",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "constants",
            "structs": [
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "c",
                    "summary": "",
                    "value": "299792458"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "pi",
                    "summary": "",
                    "value": "#kgen.float_literal<31415926535897932384626433832795028841971693937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555954930381966446229489|10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "e",
                    "summary": "",
                    "value": "#kgen.float_literal<139176029617103116050446718533256319885171|51200000000000000000000000000000000000000>"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "hbar",
                    "summary": "",
                    "value": "#kgen.float_literal<5272859088230781956313|50000000000000000000000000000000000000000000000000000000>"
                  }
                ],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "Use alias for compile time evaluation of indefinite precision.\n```mojo\nimport numojo as nm\nfn main():\n    var pi: Float64 = nm.pi\n    print(\"Float64:\", pi*pi*pi*pi*pi*pi)\n    print(\"Literal:\", nm.pi*nm.pi*nm.pi*nm.pi*nm.pi*nm.pi)\n```\n```console\nFloat64: 961.38919357530415\nLiteral: 961.38919357530449\n```",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self)",
                        "summary": "Initializes the constants."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__del__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__del__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__del__(owned self)",
                        "summary": "Deletes the constants."
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Constants",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "Copyable",
                  "Movable",
                  "UnknownDestructibility"
                ],
                "summary": "Define constants."
              }
            ],
            "summary": "Constants",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "arange",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Scalar[dtype] - Start value.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "description": "Scalar[dtype]  - End value.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "default": "SIMD(1)",
                        "description": "Scalar[dtype]  - Step size between each element (default 1).",
                        "kind": "argument",
                        "name": "step",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "arange",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if both dtype and dtype are integers or if dtype is a float and dtype is an integer.",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of datatype `dtype` with elements ranging from `start` to `stop` incremented with `step`.",
                    "signature": "arange[dtype: DType = float64](start: SIMD[dtype, 1], stop: SIMD[dtype, 1], step: SIMD[dtype, 1] = SIMD(1)) -> NDArray[dtype]",
                    "summary": "Function that computes a series of values starting from \"start\" to \"stop\" with given \"step\" size."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "arange",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "arange[dtype: DType = float64](stop: SIMD[dtype, 1]) -> NDArray[dtype]",
                    "summary": "(Overload) When start is 0 and step is 1."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "ComplexSIMD[cdtype] - Start value.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "ComplexSIMD[cdtype]  - End value.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "ComplexSIMD(SIMD(1), SIMD(1))",
                        "description": "ComplexSIMD[cdtype]  - Step size between each element (default 1).",
                        "kind": "argument",
                        "name": "step",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "arange",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if both dtype and dtype are integers or if dtype is a float and dtype is an integer.",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of datatype `dtype` with elements ranging from `start` to `stop` incremented with `step`.",
                    "signature": "arange[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](start: ComplexSIMD[cdtype, dtype=dtype], stop: ComplexSIMD[cdtype, dtype=dtype], step: ComplexSIMD[cdtype, dtype=dtype] = ComplexSIMD(SIMD(1), SIMD(1))) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Function that computes a series of values starting from \"start\" to \"stop\" with given \"step\" size."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "arange",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "",
                    "signature": "arange[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](stop: ComplexSIMD[cdtype, dtype=dtype]) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "(Overload) When start is 0 and step is 1."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "linspace",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Start value.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "description": "End value.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "default": "50",
                        "description": "No of linearly spaced elements.",
                        "kind": "argument",
                        "name": "num",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "default": "True",
                        "description": "Specifies whether to include endpoint in the final NDArray, defaults to True.",
                        "kind": "argument",
                        "name": "endpoint",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      },
                      {
                        "convention": "read",
                        "default": "False",
                        "description": "Specifies whether the linspace should be calculated using parallelization, deafults to False.",
                        "kind": "argument",
                        "name": "parallel",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "linspace",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if dtype is an integer.",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of datatype `dtype` with elements ranging from `start` to `stop` with num elements.",
                    "signature": "linspace[dtype: DType = float64](start: SIMD[dtype, 1], stop: SIMD[dtype, 1], num: Int = 50, endpoint: Bool = True, parallel: Bool = False) -> NDArray[dtype]",
                    "summary": "Function that computes a series of linearly spaced values starting from \"start\" to \"stop\" with given size. Wrapper function for _linspace_serial, _linspace_parallel."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Start value.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "End value.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "50",
                        "description": "No of linearly spaced elements.",
                        "kind": "argument",
                        "name": "num",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "default": "True",
                        "description": "Specifies whether to include endpoint in the final ComplexNDArray, defaults to True.",
                        "kind": "argument",
                        "name": "endpoint",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      },
                      {
                        "convention": "read",
                        "default": "False",
                        "description": "Specifies whether the linspace should be calculated using parallelization, deafults to False.",
                        "kind": "argument",
                        "name": "parallel",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "linspace",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if dtype is an integer.",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with `num` linearly spaced elements between `start` and `stop`.",
                    "signature": "linspace[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](start: ComplexSIMD[cdtype, dtype=dtype], stop: ComplexSIMD[cdtype, dtype=dtype], num: Int = 50, endpoint: Bool = True, parallel: Bool = False) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Function that computes a series of linearly spaced values starting from \"start\" to \"stop\" with given size. Wrapper function for _linspace_serial, _linspace_parallel."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "logspace",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The starting value of the NDArray.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "description": "The ending value of the NDArray.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "description": "The number of elements in the NDArray.",
                        "kind": "argument",
                        "name": "num",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "default": "True",
                        "description": "Whether to include the `stop` value in the NDArray. Defaults to True.",
                        "kind": "argument",
                        "name": "endpoint",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      },
                      {
                        "convention": "read",
                        "default": "SIMD(#kgen.float_literal<10|1>)",
                        "description": "Base value of the logarithm, defaults to 10.",
                        "kind": "argument",
                        "name": "base",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "default": "False",
                        "description": "Specifies whether to calculate the logarithmic spaced values using parallelization.",
                        "kind": "argument",
                        "name": "parallel",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "logspace",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if dtype is an integer.",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "- A NDArray of `dtype` with `num` logarithmic spaced elements between `start` and `stop`.",
                    "signature": "logspace[dtype: DType = float64](start: SIMD[dtype, 1], stop: SIMD[dtype, 1], num: Int, endpoint: Bool = True, base: SIMD[dtype, 1] = SIMD(#kgen.float_literal<10|1>), parallel: Bool = False) -> NDArray[dtype]",
                    "summary": "Generate a logrithmic spaced NDArray of `num` elements between `start` and `stop`. Wrapper function for _logspace_serial, _logspace_parallel functions."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The starting value of the ComplexNDArray.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "The ending value of the ComplexNDArray.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "The number of elements in the ComplexNDArray.",
                        "kind": "argument",
                        "name": "num",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "default": "True",
                        "description": "Whether to include the `stop` value in the ComplexNDArray. Defaults to True.",
                        "kind": "argument",
                        "name": "endpoint",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      },
                      {
                        "convention": "read",
                        "default": "ComplexSIMD(SIMD(#kgen.float_literal<10|1>), SIMD(#kgen.float_literal<10|1>))",
                        "description": "Base value of the logarithm, defaults to 10.",
                        "kind": "argument",
                        "name": "base",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "False",
                        "description": "Specifies whether to calculate the logarithmic spaced values using parallelization.",
                        "kind": "argument",
                        "name": "parallel",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "logspace",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if dtype is an integer.",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "- A ComplexNDArray of `dtype` with `num` logarithmic spaced elements between `start` and `stop`.",
                    "signature": "logspace[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](start: ComplexSIMD[cdtype, dtype=dtype], stop: ComplexSIMD[cdtype, dtype=dtype], num: Int, endpoint: Bool = True, base: ComplexSIMD[cdtype, dtype=dtype] = ComplexSIMD(SIMD(#kgen.float_literal<10|1>), SIMD(#kgen.float_literal<10|1>)), parallel: Bool = False) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate a logrithmic spaced ComplexNDArray of `num` elements between `start` and `stop`. Wrapper function for _logspace_serial, _logspace_parallel functions."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "geomspace",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The starting value of the NDArray.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "description": "The ending value of the NDArray.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "description": "The number of elements in the NDArray.",
                        "kind": "argument",
                        "name": "num",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "default": "True",
                        "description": "Whether to include the `stop` value in the NDArray. Defaults to True.",
                        "kind": "argument",
                        "name": "endpoint",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "geomspace",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the input values.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if dtype is an integer.",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of `dtype` with `num` geometrically spaced elements between `start` and `stop`.",
                    "signature": "geomspace[dtype: DType = float64](start: SIMD[dtype, 1], stop: SIMD[dtype, 1], num: Int, endpoint: Bool = True) -> NDArray[dtype]",
                    "summary": "Generate a NDArray of `num` elements between `start` and `stop` in a geometric series."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The starting value of the ComplexNDArray.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "The ending value of the ComplexNDArray.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "The number of elements in the ComplexNDArray.",
                        "kind": "argument",
                        "name": "num",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "default": "True",
                        "description": "Whether to include the `stop` value in the ComplexNDArray. Defaults to True.",
                        "kind": "argument",
                        "name": "endpoint",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "geomspace",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if dtype is an integer.",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with `num` geometrically spaced elements between `start` and `stop`.",
                    "signature": "geomspace[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](start: ComplexSIMD[cdtype, dtype=dtype], stop: ComplexSIMD[cdtype, dtype=dtype], num: Int, endpoint: Bool = True) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate a ComplexNDArray of `num` elements between `start` and `stop` in a geometric series."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "empty",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Shape of the NDArray.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "NDArrayShape"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "empty",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of `dtype` with given `shape`.",
                    "signature": "empty[dtype: DType = float64](shape: NDArrayShape) -> NDArray[dtype]",
                    "summary": "Generate an empty NDArray of given shape with arbitrary values."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "empty",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "empty[dtype: DType = float64](shape: List[Int]) -> NDArray[dtype]",
                    "summary": "Overload of function `empty` that reads a list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "VariadicList[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "empty",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "empty[dtype: DType = float64](shape: VariadicList[Int]) -> NDArray[dtype]",
                    "summary": "Overload of function `empty` that reads a variadic list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Shape of the ComplexNDArray.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "NDArrayShape"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "empty",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with given `shape`.",
                    "signature": "empty[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: NDArrayShape) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate an empty ComplexNDArray of given shape with arbitrary values."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "empty",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "",
                    "signature": "empty[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: List[Int]) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Overload of function `empty` that reads a list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "VariadicList[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "empty",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "",
                    "signature": "empty[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: VariadicList[Int]) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Overload of function `empty` that reads a variadic list of ints."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "empty_like",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "NDArray to be used as a reference for the shape.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "empty_like",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of `dtype` with the same shape as `array`.",
                    "signature": "empty_like[dtype: DType = float64](array: NDArray[dtype]) -> NDArray[dtype]",
                    "summary": "Generate an empty NDArray of the same shape as `array`."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "ComplexNDArray to be used as a reference for the shape.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexNDArray[cdtype, dtype=dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "empty_like",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with the same shape as `array`.",
                    "signature": "empty_like[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](array: ComplexNDArray[cdtype, dtype=dtype]) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate an empty ComplexNDArray of the same shape as `array`."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "eye",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Number of rows in the matrix.",
                        "kind": "argument",
                        "name": "N",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "description": "Number of columns in the matrix.",
                        "kind": "argument",
                        "name": "M",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "eye",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of `dtype` with size N x M and ones on the diagonals.",
                    "signature": "eye[dtype: DType = float64](N: Int, M: Int) -> NDArray[dtype]",
                    "summary": "Return a 2-D NDArray with ones on the diagonal and zeros elsewhere."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Number of rows in the matrix.",
                        "kind": "argument",
                        "name": "N",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "description": "Number of columns in the matrix.",
                        "kind": "argument",
                        "name": "M",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "eye",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with size N x M and ones on the diagonals.",
                    "signature": "eye[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](N: Int, M: Int) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Return a 2-D ComplexNDArray with ones on the diagonal and zeros elsewhere."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "identity",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Size of the matrix.",
                        "kind": "argument",
                        "name": "N",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "identity",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of `dtype` with size N x N and ones on the diagonals.",
                    "signature": "identity[dtype: DType = float64](N: Int) -> NDArray[dtype]",
                    "summary": "Generate an identity matrix of size N x N."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Size of the matrix.",
                        "kind": "argument",
                        "name": "N",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "identity",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with size N x N and ones on the diagonals.",
                    "signature": "identity[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](N: Int) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate an Complex identity matrix of size N x N."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "ones",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Shape of the NDArray.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "NDArrayShape"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "It calls the function `full`.\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ones",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of `dtype` with given `shape`.",
                    "signature": "ones[dtype: DType = float64](shape: NDArrayShape) -> NDArray[dtype]",
                    "summary": "Generate a NDArray of ones with given shape filled with ones."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ones",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "ones[dtype: DType = float64](shape: List[Int]) -> NDArray[dtype]",
                    "summary": "Overload of function `ones` that reads a list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "VariadicList[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ones",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "ones[dtype: DType = float64](shape: VariadicList[Int]) -> NDArray[dtype]",
                    "summary": "Overload of function `ones` that reads a variadic of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Shape of the ComplexNDArray.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "NDArrayShape"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "It calls the function `full`.\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ones",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with given `shape`.",
                    "signature": "ones[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: NDArrayShape) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate a ComplexNDArray of ones with given shape filled with ones."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ones",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "",
                    "signature": "ones[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: List[Int]) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Overload of function `ones` that reads a list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "VariadicList[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ones",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "",
                    "signature": "ones[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: VariadicList[Int]) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Overload of function `ones` that reads a variadic of ints."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "ones_like",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "NDArray to be used as a reference for the shape.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ones_like",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of `dtype` with the same shape as `a` filled with ones.",
                    "signature": "ones_like[dtype: DType = float64](array: NDArray[dtype]) -> NDArray[dtype]",
                    "summary": "Generate a NDArray of the same shape as `a` filled with ones."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "ComplexNDArray to be used as a reference for the shape.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexNDArray[cdtype, dtype=dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ones_like",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with the same shape as `a` filled with ones.",
                    "signature": "ones_like[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](array: ComplexNDArray[cdtype, dtype=dtype]) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate a ComplexNDArray of the same shape as `a` filled with ones."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "zeros",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Shape of the NDArray.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "NDArrayShape"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "It calls the function `full`.\n\nof NDArray.",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zeros",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of `dtype` with given `shape`.",
                    "signature": "zeros[dtype: DType = float64](shape: NDArrayShape) -> NDArray[dtype]",
                    "summary": "Generate a NDArray of zeros with given shape."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zeros",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "zeros[dtype: DType = float64](shape: List[Int]) -> NDArray[dtype]",
                    "summary": "Overload of function `zeros` that reads a list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "VariadicList[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zeros",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "zeros[dtype: DType = float64](shape: VariadicList[Int]) -> NDArray[dtype]",
                    "summary": "Overload of function `zeros` that reads a variadic list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Shape of the ComplexNDArray.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "NDArrayShape"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "It calls the function `full`.\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zeros",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with given `shape`.",
                    "signature": "zeros[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: NDArrayShape) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate a ComplexNDArray of zeros with given shape."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zeros",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "",
                    "signature": "zeros[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: List[Int]) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Overload of function `zeros` that reads a list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "VariadicList[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zeros",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "",
                    "signature": "zeros[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: VariadicList[Int]) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Overload of function `zeros` that reads a variadic list of ints."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "zeros_like",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "NDArray to be used as a reference for the shape.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zeros_like",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of `dtype` with the same shape as `a` filled with zeros.",
                    "signature": "zeros_like[dtype: DType = float64](array: NDArray[dtype]) -> NDArray[dtype]",
                    "summary": "Generate a NDArray of the same shape as `a` filled with zeros."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "ComplexNDArray to be used as a reference for the shape.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexNDArray[cdtype, dtype=dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zeros_like",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with the same shape as `a` filled with zeros.",
                    "signature": "zeros_like[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](array: ComplexNDArray[cdtype, dtype=dtype]) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate a ComplexNDArray of the same shape as `a` filled with zeros."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "full",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Shape of the array.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "NDArrayShape"
                      },
                      {
                        "convention": "read",
                        "description": "Set all the values to this.",
                        "kind": "argument",
                        "name": "fill_value",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "Memory order C or F.",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```mojo\n    import numojo as nm\n    from numojo.prelude import *\n    var a = nm.full(Shape(2,3,4), fill_value=10)\n    ```",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "full",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "full[dtype: DType = float64](shape: NDArrayShape, fill_value: SIMD[dtype, 1], order: String = String(\"C\")) -> NDArray[dtype]",
                    "summary": "Initialize an NDArray of certain shape fill it with a given value."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "fill_value",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "full",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "full[dtype: DType = float64](shape: List[Int], fill_value: SIMD[dtype, 1], order: String = String(\"C\")) -> NDArray[dtype]",
                    "summary": "Overload of function `full` that reads a list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "VariadicList[Int]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "fill_value",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "full",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "full[dtype: DType = float64](shape: VariadicList[Int], fill_value: SIMD[dtype, 1], order: String = String(\"C\")) -> NDArray[dtype]",
                    "summary": "Overload of function `full` that reads a variadic list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Shape of the ComplexNDArray.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "NDArrayShape"
                      },
                      {
                        "convention": "read",
                        "description": "Set all the values to this.",
                        "kind": "argument",
                        "name": "fill_value",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "Memory order C or F.",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```mojo\n    import numojo as nm\n    from numojo.prelude import *\n    var a = nm.full[cf32](Shape(2,3,4), fill_value=ComplexSIMD[cf32](10, 10))\n    ```",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "full",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "",
                    "signature": "full[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: NDArrayShape, fill_value: ComplexSIMD[cdtype, dtype=dtype], order: String = String(\"C\")) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Initialize an ComplexNDArray of certain shape fill it with a given value."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "fill_value",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "full",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "",
                    "signature": "full[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: List[Int], fill_value: ComplexSIMD[cdtype, dtype=dtype], order: String = String(\"C\")) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Overload of function `full` that reads a list of ints."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "VariadicList[Int]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "fill_value",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "full",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "",
                    "signature": "full[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](shape: VariadicList[Int], fill_value: ComplexSIMD[cdtype, dtype=dtype], order: String = String(\"C\")) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Overload of function `full` that reads a variadic list of ints."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "full_like",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "NDArray to be used as a reference for the shape.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "Value to fill the NDArray with.",
                        "kind": "argument",
                        "name": "fill_value",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "Memory order C or F.",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "full_like",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray of `dtype` with the same shape as `a` filled with `fill_value`.",
                    "signature": "full_like[dtype: DType = float64](array: NDArray[dtype], fill_value: SIMD[dtype, 1], order: String = String(\"C\")) -> NDArray[dtype]",
                    "summary": "Generate a NDArray of the same shape as `a` filled with `fill_value`."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "ComplexNDArray to be used as a reference for the shape.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexNDArray[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "Value to fill the ComplexNDArray with.",
                        "kind": "argument",
                        "name": "fill_value",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexSIMD[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "Memory order C or F.",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "full_like",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray of `dtype` with the same shape as `a` filled with `fill_value`.",
                    "signature": "full_like[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](array: ComplexNDArray[cdtype, dtype=dtype], fill_value: ComplexSIMD[cdtype, dtype=dtype], order: String = String(\"C\")) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate a ComplexNDArray of the same shape as `a` filled with `fill_value`."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "diag",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "NDArray to extract the diagonal from.",
                        "kind": "argument",
                        "name": "v",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "0",
                        "description": "Diagonal offset.",
                        "kind": "argument",
                        "name": "k",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "diag",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A 1-D NDArray with the diagonal of the input NDArray.",
                    "signature": "diag[dtype: DType = float64](v: NDArray[dtype], k: Int = 0) -> NDArray[dtype]",
                    "summary": "Extract a diagonal or construct a diagonal NDArray."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "ComplexNDArray to extract the diagonal from.",
                        "kind": "argument",
                        "name": "v",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexNDArray[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "0",
                        "description": "Diagonal offset.",
                        "kind": "argument",
                        "name": "k",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "diag",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A 1-D ComplexNDArray with the diagonal of the input ComplexNDArray.",
                    "signature": "diag[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](v: ComplexNDArray[cdtype, dtype=dtype], k: Int = 0) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Extract a diagonal or construct a diagonal ComplexNDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "diagflat",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "NDArray to be flattened and used as the diagonal.",
                        "kind": "argument",
                        "name": "v",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "0",
                        "description": "Diagonal offset.",
                        "kind": "argument",
                        "name": "k",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "diagflat",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A 2-D NDArray with the flattened input as the diagonal.",
                    "signature": "diagflat[dtype: DType = float64](v: NDArray[dtype], k: Int = 0) -> NDArray[dtype]",
                    "summary": "Generate a 2-D NDArray with the flattened input as the diagonal."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "ComplexNDArray to be flattened and used as the diagonal.",
                        "kind": "argument",
                        "name": "v",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexNDArray[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "0",
                        "description": "Diagonal offset.",
                        "kind": "argument",
                        "name": "k",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "diagflat",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A 2-D ComplexNDArray with the flattened input as the diagonal.",
                    "signature": "diagflat[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](v: ComplexNDArray[cdtype, dtype=dtype], k: Int = 0) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate a 2-D ComplexNDArray with the flattened input as the diagonal."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tri",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Number of rows in the matrix.",
                        "kind": "argument",
                        "name": "N",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "description": "Number of columns in the matrix.",
                        "kind": "argument",
                        "name": "M",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "default": "0",
                        "description": "Diagonal offset.",
                        "kind": "argument",
                        "name": "k",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tri",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A 2-D NDArray with ones on and below the k-th diagonal.",
                    "signature": "tri[dtype: DType = float64](N: Int, M: Int, k: Int = 0) -> NDArray[dtype]",
                    "summary": "Generate a 2-D NDArray with ones on and below the k-th diagonal."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Number of rows in the matrix.",
                        "kind": "argument",
                        "name": "N",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "description": "Number of columns in the matrix.",
                        "kind": "argument",
                        "name": "M",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "default": "0",
                        "description": "Diagonal offset.",
                        "kind": "argument",
                        "name": "k",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tri",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A 2-D ComplexNDArray with ones on and below the k-th diagonal.",
                    "signature": "tri[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](N: Int, M: Int, k: Int = 0) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate a 2-D ComplexNDArray with ones on and below the k-th diagonal."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tril",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "NDArray to be zeroed out.",
                        "kind": "argument",
                        "name": "m",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "0",
                        "description": "Diagonal offset.",
                        "kind": "argument",
                        "name": "k",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tril",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray with elements above the k-th diagonal zeroed out.",
                    "signature": "tril[dtype: DType = float64](m: NDArray[dtype], k: Int = 0) -> NDArray[dtype]",
                    "summary": "Zero out elements above the k-th diagonal."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "ComplexNDArray to be zeroed out.",
                        "kind": "argument",
                        "name": "m",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexNDArray[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "0",
                        "description": "Diagonal offset.",
                        "kind": "argument",
                        "name": "k",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tril",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray with elements above the k-th diagonal zeroed out.",
                    "signature": "tril[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](m: ComplexNDArray[cdtype, dtype=dtype], k: Int = 0) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Zero out elements above the k-th diagonal."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "triu",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "NDArray to be zeroed out.",
                        "kind": "argument",
                        "name": "m",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "0",
                        "description": "Diagonal offset.",
                        "kind": "argument",
                        "name": "k",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "triu",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A NDArray with elements below the k-th diagonal zeroed out.",
                    "signature": "triu[dtype: DType = float64](m: NDArray[dtype], k: Int = 0) -> NDArray[dtype]",
                    "summary": "Zero out elements below the k-th diagonal."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "ComplexNDArray to be zeroed out.",
                        "kind": "argument",
                        "name": "m",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexNDArray[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "0",
                        "description": "Diagonal offset.",
                        "kind": "argument",
                        "name": "k",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "triu",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A ComplexNDArray with elements below the k-th diagonal zeroed out.",
                    "signature": "triu[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](m: ComplexNDArray[cdtype, dtype=dtype], k: Int = 0) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Zero out elements below the k-th diagonal."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "vander",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "1-D input array.",
                        "kind": "argument",
                        "name": "x",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "Optional(None)",
                        "description": "Number of columns in the output. If N is not specified, a square array is returned.",
                        "kind": "argument",
                        "name": "N",
                        "passingKind": "pos_or_kw",
                        "type": "Optional[Int]"
                      },
                      {
                        "convention": "read",
                        "default": "False",
                        "description": "Order of the powers of the columns. If True, the powers increase from left to right, if False (the default) they are reversed.",
                        "kind": "argument",
                        "name": "increasing",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "vander",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "A Vandermonde matrix.",
                    "signature": "vander[dtype: DType = float64](x: NDArray[dtype], N: Optional[Int] = Optional(None), increasing: Bool = False) -> NDArray[dtype]",
                    "summary": "Generate a Vandermonde matrix."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "1-D input array.",
                        "kind": "argument",
                        "name": "x",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexNDArray[cdtype, dtype=dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "Optional(None)",
                        "description": "Number of columns in the output. If N is not specified, a square array is returned.",
                        "kind": "argument",
                        "name": "N",
                        "passingKind": "pos_or_kw",
                        "type": "Optional[Int]"
                      },
                      {
                        "convention": "read",
                        "default": "False",
                        "description": "Order of the powers of the columns. If True, the powers increase from left to right, if False (the default) they are reversed.",
                        "kind": "argument",
                        "name": "increasing",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "vander",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "A Complex Vandermonde matrix.",
                    "signature": "vander[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](x: ComplexNDArray[cdtype, dtype=dtype], N: Optional[Int] = Optional(None), increasing: Bool = False) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Generate a Complex Vandermonde matrix."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "astype",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "NDArray to be casted.",
                        "kind": "argument",
                        "name": "a",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "astype",
                    "parameters": [
                      {
                        "description": "Data type of the input array, always inferred.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "inferred",
                        "type": "DType"
                      },
                      {
                        "description": "Data type to cast the NDArray to.",
                        "kind": "parameter",
                        "name": "target",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[target]",
                    "returnsDoc": "A NDArray with the same shape and strides as `a` but with elements casted to `target`.",
                    "signature": "astype[dtype: DType, //, target: DType](a: NDArray[dtype]) -> NDArray[target]",
                    "summary": "Cast an NDArray to a different dtype."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "ComplexNDArray to be casted.",
                        "kind": "argument",
                        "name": "a",
                        "passingKind": "pos_or_kw",
                        "type": "ComplexNDArray[cdtype, dtype=dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "astype",
                    "parameters": [
                      {
                        "description": "Complex datatype of the input array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "inferred",
                        "type": "CDType"
                      },
                      {
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "target",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "target_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[target, dtype=target_dtype]",
                    "returnsDoc": "A ComplexNDArray with the same shape and strides as `a` but with elements casted to `target`.",
                    "signature": "astype[cdtype: CDType, //, target: CDType, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType](), target_dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](a: ComplexNDArray[cdtype, dtype=dtype]) -> ComplexNDArray[target, dtype=target_dtype]",
                    "summary": "Cast a ComplexNDArray to a different dtype."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "fromstring",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "String representation of an ndarray.",
                        "kind": "argument",
                        "name": "text",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "Memory order C or F.",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Note:\nStringLiteral is also allowed as input as it is coerced to String type\nbefore it is passed into the function.\n\nExample:\n```\nimport numojo as nm\n\nfn main() raises:\n    var A = nm.fromstring[DType.int8](\"[[[1,2],[3,4]],[[5,6],[7,8]]]\")\n    var B = nm.fromstring[DType.float16](\"[[1,2,3,4],[5,6,7,8]]\")\n    var C = nm.fromstring[DType.float32](\"[0.1, -2.3, 41.5, 19.29145, -199]\")\n    var D = nm.fromstring[DType.int32](\"[0.1, -2.3, 41.5, 19.29145, -199]\")\n\n    print(A)\n    print(B)\n    print(C)\n    print(D)\n```\n\nThe output goes as follows. Note that the numbers are automatically\ncasted to the dtype of the NDArray.\n\n```console\n[[[     1       2       ]\n [     3       4       ]]\n [[     5       6       ]\n [     7       8       ]]]\n3-D array  Shape: [2, 2, 2]  DType: int8\n\n[[      1.0     2.0     3.0     4.0     ]\n [      5.0     6.0     7.0     8.0     ]]\n2-D array  Shape: [2, 4]  DType: float16\n\n[       0.10000000149011612     2.2999999523162842      41.5    19.291450500488281      199.0   ]\n1-D array  Shape: [5]  DType: float32\n\n[       0       2       41      19      199     ]\n1-D array  Shape: [5]  DType: int32\n```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "fromstring",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "fromstring[dtype: DType = float64](text: String, order: String = String(\"C\")) -> NDArray[dtype]",
                    "summary": "NDArray initialization from string representation of an ndarray. The shape can be inferred from the string representation. The literals will be casted to the dtype of the NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "from_tensor",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Tensor.",
                        "kind": "argument",
                        "name": "data",
                        "passingKind": "pos_or_kw",
                        "type": "Tensor[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "from_tensor",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "NDArray.",
                    "signature": "from_tensor[dtype: DType = float64](data: Tensor[dtype]) -> NDArray[dtype]",
                    "summary": "Create array from tensor."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "array",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "text",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "array",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "array[dtype: DType = float64](text: String, order: String = String(\"C\")) -> NDArray[dtype]",
                    "summary": "This reload is an alias of `fromstring`."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "List of data.",
                        "kind": "argument",
                        "name": "data",
                        "passingKind": "pos_or_kw",
                        "type": "List[SIMD[dtype, 1]]"
                      },
                      {
                        "convention": "read",
                        "description": "List of shape.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "Memory order C or F.",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```mojo\n    import numojo as nm\n    from numojo.prelude import *\n    nm.array[f16](data=List[Scalar[f16]](1, 2, 3, 4), shape=List[Int](2, 2))\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "array",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "An Array of given data, shape and order.",
                    "signature": "array[dtype: DType = float64](data: List[SIMD[dtype, 1]], shape: List[Int], order: String = String(\"C\")) -> NDArray[dtype]",
                    "summary": "Array creation with given data, shape and order."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "List of real data.",
                        "kind": "argument",
                        "name": "real",
                        "passingKind": "pos_or_kw",
                        "type": "List[SIMD[dtype, 1]]"
                      },
                      {
                        "convention": "read",
                        "description": "List of imaginary data.",
                        "kind": "argument",
                        "name": "imag",
                        "passingKind": "pos_or_kw",
                        "type": "List[SIMD[dtype, 1]]"
                      },
                      {
                        "convention": "read",
                        "description": "List of shape.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "Memory order C or F.",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```mojo\n    import numojo as nm\n    from numojo.prelude import *\n    nm.array[cf32](\n        real=List[Scalar[f32]](1, 2, 3, 4),\n        imag=List[Scalar[f32]](5, 6, 7, 8),\n        shape=List[Int](2, 2),\n    )\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "array",
                    "parameters": [
                      {
                        "default": "{float64, float64}",
                        "description": "Complex datatype of the output array.",
                        "kind": "parameter",
                        "name": "cdtype",
                        "passingKind": "pos_or_kw",
                        "type": "CDType"
                      },
                      {
                        "default": "to_dtype[numojo::core::complex::complex_dtype::CDType]()",
                        "description": "Equivalent real datatype of the output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "ComplexNDArray[cdtype, dtype=dtype]",
                    "returnsDoc": "An Array of given data, shape and order.",
                    "signature": "array[cdtype: CDType = {float64, float64}, *, dtype: DType = to_dtype[numojo::core::complex::complex_dtype::CDType]()](real: List[SIMD[dtype, 1]], imag: List[SIMD[dtype, 1]], shape: List[Int], order: String = String(\"C\")) -> ComplexNDArray[cdtype, dtype=dtype]",
                    "summary": "Array creation with given data, shape and order."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "A Numpy array (PythonObject).",
                        "kind": "argument",
                        "name": "data",
                        "passingKind": "pos_or_kw",
                        "type": "PythonObject"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "Memory order C or F.",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n```mojo\nimport numojo as nm\nfrom numojo.prelude import *\nfrom python import Python\nvar np = Python.import_module(\"numpy\")\nvar np_arr = np.array([1, 2, 3, 4])\nA = nm.array[f16](data=np_arr, order=\"C\")\n```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "array",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "An Array of given data, shape and order.",
                    "signature": "array[dtype: DType = float64](data: PythonObject, order: String = String(\"C\")) -> NDArray[dtype]",
                    "summary": "Array creation with given data, shape and order."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Tensor.",
                        "kind": "argument",
                        "name": "data",
                        "passingKind": "pos_or_kw",
                        "type": "Tensor[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n```mojo\nimport numojo as nm\nfrom tensor import Tensor, TensorShape\nfrom numojo.prelude import *\n\nfn main() raises:\n    height = 256\n    width = 256\n    channels = 3\n    image = Tensor[DType.float32].rand(TensorShape(height, width, channels))\n    print(image)\n    print(nm.array(image))\n```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "array",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "NDArray.",
                    "signature": "array[dtype: DType = float64](data: Tensor[dtype]) -> NDArray[dtype]",
                    "summary": "Create array from tensor."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "creation",
            "structs": [],
            "summary": "Array creation routine.",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "where",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "x",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "A SIMD value.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "mask",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[bool]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "where",
                    "parameters": [
                      {
                        "description": "DType.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "where[dtype: DType](mut x: NDArray[dtype], scalar: SIMD[dtype, 1], mask: NDArray[bool])",
                    "summary": "Replaces elements in `x` with `scalar` where `mask` is True."
                  },
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "NDArray[dtype].",
                        "kind": "argument",
                        "name": "x",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "NDArray[dtype].",
                        "kind": "argument",
                        "name": "y",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "NDArray[DType.bool].",
                        "kind": "argument",
                        "name": "mask",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[bool]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "where",
                    "parameters": [
                      {
                        "description": "DType.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "ShapeMismatchError: If the shapes of `x` and `y` do not match.",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "where[dtype: DType](mut x: NDArray[dtype], y: NDArray[dtype], mask: NDArray[bool])",
                    "summary": "Replaces elements in `x` with elements from `y` where `mask` is True."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "indexing",
            "structs": [],
            "summary": "Indexing routines.",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "copyto",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "copyto",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "copyto()",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "ndim",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ndim",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Int",
                    "returnsDoc": "The number of dimensions of the NDArray.",
                    "signature": "ndim[dtype: DType](array: NDArray[dtype]) -> Int",
                    "summary": "Returns the number of dimensions of the NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "shape",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "shape",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "NDArrayShape",
                    "returnsDoc": "The shape of the NDArray.",
                    "signature": "shape[dtype: DType](array: NDArray[dtype]) -> NDArrayShape",
                    "summary": "Returns the shape of the NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "size",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "The axis to get the size of.",
                        "kind": "argument",
                        "name": "axis",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "size",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Int",
                    "returnsDoc": "The size of the NDArray.",
                    "signature": "size[dtype: DType](array: NDArray[dtype], axis: Int) -> Int",
                    "summary": "Returns the size of the NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "reshape",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "New shape.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "NDArrayShape"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "\"C\" or \"F\". Read in this order from the original array and write in this order into the new array.",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "reshape",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error: If the number of elements do not match.",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "Array of the same data with a new shape.",
                    "signature": "reshape[dtype: DType](owned A: NDArray[dtype], shape: NDArrayShape, order: String = String(\"C\")) -> NDArray[dtype]",
                    "summary": "    Returns an array of the same data with a new shape."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "ravel",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "NDArray.",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"C\")",
                        "description": "The order to flatten the array.",
                        "kind": "argument",
                        "name": "order",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Return:\n    A contiguous flattened array.",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ravel",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "ravel[dtype: DType](owned A: NDArray[dtype], order: String = String(\"C\")) -> NDArray[dtype]",
                    "summary": "Returns the raveled version of the NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "transpose",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "axes",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "If `axes` is not given, it is equal to flipping the axes.\n```mojo\nimport numojo as nm\nvar A = nm.random.rand(2,3,4,5)\nprint(nm.transpose(A))  # A is a 4darray.\nprint(nm.transpose(A, axes=List(3,2,1,0)))\n```\n\nExamples.\n```mojo\nimport numojo as nm\n# A is a 2darray\nprint(nm.transpose(A, axes=List(0, 1)))  # equal to transpose of matrix\n# A is a 3darray\nprint(nm.transpose(A, axes=List(2, 1, 0)))  # transpose 0-th and 2-th dimensions\n```",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "transpose",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "transpose[dtype: DType](A: NDArray[dtype], axes: List[Int]) -> NDArray[dtype]",
                    "summary": "Transpose array of any number of dimensions according to arbitrary permutation of the axes."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "transpose",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "transpose[dtype: DType](A: NDArray[dtype]) -> NDArray[dtype]",
                    "summary": "(overload) Transpose the array when `axes` is not given. If `axes` is not given, it is equal to flipping the axes. See docstring of `transpose`."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "Matrix[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "transpose",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Matrix[dtype]",
                    "returnsDoc": "",
                    "signature": "transpose[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                    "summary": "Transpose of matrix."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "flip",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "flip",
                    "parameters": [
                      {
                        "description": "DType.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "Flipped array.",
                    "signature": "flip[dtype: DType](owned A: NDArray[dtype]) -> NDArray[dtype]",
                    "summary": "Returns flipped array and keep the shape."
                  },
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "owned",
                        "description": "Axis along which to flip.",
                        "kind": "argument",
                        "name": "axis",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "flip",
                    "parameters": [
                      {
                        "description": "DType.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "Flipped array along the given axis.",
                    "signature": "flip[dtype: DType](owned A: NDArray[dtype], owned axis: Int) -> NDArray[dtype]",
                    "summary": "Returns flipped array along the given axis."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "manipulation",
            "structs": [],
            "summary": "Array manipulation routines.",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "rand",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The shape of the NDArray.",
                        "kind": "argument",
                        "name": "*shape",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand[numojo.i16](3,2,4)\n    print(arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "rand",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The generated NDArray of type `dtype` filled with random values.",
                    "signature": "rand[dtype: DType = float64](*shape: Int) -> NDArray[dtype]",
                    "summary": "Generate a random NDArray of the given shape and dtype."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The shape of the NDArray.",
                        "kind": "argument",
                        "name": "*shape",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "description": "The minimum value of the random values.",
                        "kind": "argument",
                        "name": "min",
                        "passingKind": "kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "description": "The maximum value of the random values.",
                        "kind": "argument",
                        "name": "max",
                        "passingKind": "kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand[numojo.i16](3,2,4, min=0, max=100)\n    print(arr)\n    ```",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "rand",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error: If the dtype is not an integral or floating-point type.",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The generated NDArray of type `dtype` filled with random values between `min` and `max`.",
                    "signature": "rand[dtype: DType = float64](*shape: Int, *, min: SIMD[dtype, 1], max: SIMD[dtype, 1]) -> NDArray[dtype]",
                    "summary": "Generate a random NDArray of the given shape and dtype with values between `min` and `max`."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The shape of the NDArray.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      },
                      {
                        "convention": "read",
                        "description": "The minimum value of the random values.",
                        "kind": "argument",
                        "name": "min",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "description": "The maximum value of the random values.",
                        "kind": "argument",
                        "name": "max",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand[numojo.i16]((3,2,4), min=0, max=100)\n    print(arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "rand",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error: If the dtype is not an integral or floating-point type.",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The generated NDArray of type `dtype` filled with random values between `min` and `max`.",
                    "signature": "rand[dtype: DType = float64](shape: List[Int], min: SIMD[dtype, 1], max: SIMD[dtype, 1]) -> NDArray[dtype]",
                    "summary": "Generate a random NDArray of the given shape and dtype with values between `min` and `max`."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "randn",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The shape of the NDArray.",
                        "kind": "argument",
                        "name": "*shape",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "default": "SIMD(0)",
                        "description": "The mean value of the random values.",
                        "kind": "argument",
                        "name": "mean",
                        "passingKind": "kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "default": "SIMD(1)",
                        "description": "The variance of the random values.",
                        "kind": "argument",
                        "name": "variance",
                        "passingKind": "kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand_meanvar[numojo.i16](3,2,4, mean=0, variance=1)\n    print(arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "randn",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The generated NDArray of type `dtype` filled with random values having a mean and variance.",
                    "signature": "randn[dtype: DType = float64](*shape: Int, *, mean: SIMD[dtype, 1] = SIMD(0), variance: SIMD[dtype, 1] = SIMD(1)) -> NDArray[dtype]",
                    "summary": "Generate a random NDArray of the given shape and dtype with values having a mean and variance."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The shape of the NDArray.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      },
                      {
                        "convention": "read",
                        "default": "SIMD(0)",
                        "description": "The mean value of the random values.",
                        "kind": "argument",
                        "name": "mean",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "read",
                        "default": "SIMD(1)",
                        "description": "The variance of the random values.",
                        "kind": "argument",
                        "name": "variance",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand_meanvar[numojo.i16](List[Int](3,2,4), mean=0, variance=1)\n    print(arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "randn",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The generated NDArray of type `dtype` filled with random values having a mean and variance.",
                    "signature": "randn[dtype: DType = float64](shape: List[Int], mean: SIMD[dtype, 1] = SIMD(0), variance: SIMD[dtype, 1] = SIMD(1)) -> NDArray[dtype]",
                    "summary": "Generate a random NDArray of the given shape and dtype with values having a mean and variance."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "rand_exponential",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The shape of the NDArray.",
                        "kind": "argument",
                        "name": "*shape",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "read",
                        "default": "SIMD(#kgen.float_literal<1|1>)",
                        "description": "The rate parameter of the exponential distribution (lambda).",
                        "kind": "argument",
                        "name": "rate",
                        "passingKind": "kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand_exponential[numojo.f64](3, 2, 4, rate=2.0)\n    print(arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "rand_exponential",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The generated NDArray of type `dtype` filled with random values from an exponential distribution.",
                    "signature": "rand_exponential[dtype: DType = float64](*shape: Int, *, rate: SIMD[dtype, 1] = SIMD(#kgen.float_literal<1|1>)) -> NDArray[dtype]",
                    "summary": "Generate a random NDArray of the given shape and dtype with values from an exponential distribution."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The shape of the NDArray as a List[Int].",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      },
                      {
                        "convention": "read",
                        "default": "SIMD(#kgen.float_literal<1|1>)",
                        "description": "The rate parameter of the exponential distribution (lambda).",
                        "kind": "argument",
                        "name": "rate",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand_exponential[numojo.f64](List[Int](3, 2, 4), rate=2.0)\n    print(arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "rand_exponential",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The generated NDArray of type `dtype` filled with random values from an exponential distribution.",
                    "signature": "rand_exponential[dtype: DType = float64](shape: List[Int], rate: SIMD[dtype, 1] = SIMD(#kgen.float_literal<1|1>)) -> NDArray[dtype]",
                    "summary": "Generate a random NDArray of the given shape and dtype with values from an exponential distribution."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "random",
            "structs": [],
            "summary": "Random values array generation.",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "argmax",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "A array.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argmax",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Int",
                    "returnsDoc": "",
                    "signature": "argmax[dtype: DType](array: NDArray[dtype]) -> Int",
                    "summary": "Argmax of a array."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "Matrix[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argmax",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "SIMD[index, 1]",
                    "returnsDoc": "",
                    "signature": "argmax[dtype: DType](A: Matrix[dtype]) -> SIMD[index, 1]",
                    "summary": "Index of the max. It is first flattened before sorting."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "Matrix[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "axis",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argmax",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Matrix[index]",
                    "returnsDoc": "",
                    "signature": "argmax[dtype: DType](A: Matrix[dtype], axis: Int) -> Matrix[index]",
                    "summary": "Index of the max along the given axis."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "argmin",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "A array.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argmin",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Int",
                    "returnsDoc": "",
                    "signature": "argmin[dtype: DType](array: NDArray[dtype]) -> Int",
                    "summary": "Argmin of a array. Parameters:     dtype: The element type."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "Matrix[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argmin",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "SIMD[index, 1]",
                    "returnsDoc": "",
                    "signature": "argmin[dtype: DType](A: Matrix[dtype]) -> SIMD[index, 1]",
                    "summary": "Index of the min. It is first flattened before sorting."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "Matrix[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "axis",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argmin",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Matrix[index]",
                    "returnsDoc": "",
                    "signature": "argmin[dtype: DType](A: Matrix[dtype], axis: Int) -> Matrix[index]",
                    "summary": "Index of the min along the given axis."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "searching",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "bubble_sort",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "An NDArray.",
                        "kind": "argument",
                        "name": "ndarray",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand[numojo.i16](100)\n    var sorted_arr = numojo.core.sort.bubble_sort(arr)\n    print(sorted_arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "bubble_sort",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The sorted NDArray.",
                    "signature": "bubble_sort[dtype: DType](ndarray: NDArray[dtype]) -> NDArray[dtype]",
                    "summary": "Bubble sort the NDArray. Average complexity: O(n^2) comparisons, O(n^2) swaps. Worst-case complexity: O(n^2) comparisons, O(n^2) swaps. Worst-case space complexity: O(n)."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "sort",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "NDArray.",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "When no axis is given, the array is flattened before sorting.\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "sort",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "sort[dtype: DType](owned A: NDArray[dtype]) -> NDArray[dtype]",
                    "summary": "Sort NDArray using quick sort method. It is not guaranteed to be unstable."
                  },
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "NDArray to sort.",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "owned",
                        "description": "The axis along which the array is sorted.",
                        "kind": "argument",
                        "name": "axis",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "When no axis is given, the array is flattened before sorting.\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "sort",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "sort[dtype: DType](owned A: NDArray[dtype], owned axis: Int) -> NDArray[dtype]",
                    "summary": "Sort NDArray along the given axis using quick sort method. It is not guaranteed to be unstable."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "Matrix[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "sort",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Matrix[dtype]",
                    "returnsDoc": "",
                    "signature": "sort[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                    "summary": "Sort the Matrix. It is first flattened before sorting."
                  },
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "Matrix[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "axis",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "sort",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Matrix[dtype]",
                    "returnsDoc": "",
                    "signature": "sort[dtype: DType](owned A: Matrix[dtype], axis: Int) -> Matrix[dtype]",
                    "summary": "Sort the Matrix along the given axis."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "binary_sort",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand[numojo.i16](100)\n    var sorted_arr = numojo.core.sort.binary_sort(arr)\n    print(sorted_arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "binary_sort",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The sorted NDArray of type `dtype`.",
                    "signature": "binary_sort[dtype: DType = float64](array: NDArray[dtype]) -> NDArray[dtype]",
                    "summary": "Binary sorting of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "argsort",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "NDArray.",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "When no axis is given, the array is flattened before sorting.\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argsort",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[index]",
                    "returnsDoc": "Indices that would sort an array.",
                    "signature": "argsort[dtype: DType](owned A: NDArray[dtype]) -> NDArray[index]",
                    "summary": "Returns the indices that would sort an array. It is not guaranteed to be unstable."
                  },
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "NDArray to sort.",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "owned",
                        "description": "The axis along which the array is sorted.",
                        "kind": "argument",
                        "name": "axis",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "When no axis is given, the array is flattened before sorting.\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argsort",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[index]",
                    "returnsDoc": "Indices that would sort an array.",
                    "signature": "argsort[dtype: DType](owned A: NDArray[dtype], owned axis: Int) -> NDArray[index]",
                    "summary": "Returns the indices that would sort an array. It is not guaranteed to be unstable."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "Matrix[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argsort",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Matrix[index]",
                    "returnsDoc": "",
                    "signature": "argsort[dtype: DType](A: Matrix[dtype]) -> Matrix[index]",
                    "summary": "Argsort the Matrix. It is first flattened before sorting."
                  },
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "",
                        "kind": "argument",
                        "name": "A",
                        "passingKind": "pos_or_kw",
                        "type": "Matrix[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "axis",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argsort",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Matrix[index]",
                    "returnsDoc": "",
                    "signature": "argsort[dtype: DType](owned A: Matrix[dtype], axis: Int) -> Matrix[index]",
                    "summary": "Argsort the Matrix along the given axis."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "sorting",
            "structs": [],
            "summary": "",
            "traits": []
          }
        ],
        "name": "routines",
        "packages": [
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "loadtxt",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "filename",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "default": "String(\",\")",
                            "description": "",
                            "kind": "argument",
                            "name": "delimiter",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "skiprows",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "Optional(None)",
                            "description": "",
                            "kind": "argument",
                            "name": "usecols",
                            "passingKind": "pos_or_kw",
                            "type": "Optional[List[Int]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "loadtxt",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "",
                        "signature": "loadtxt[dtype: DType = float64](filename: String, delimiter: String = String(\",\"), skiprows: Int = 0, usecols: Optional[List[Int]] = Optional(None)) -> NDArray[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "savetxt",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "filename",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "String(\",\")",
                            "description": "",
                            "kind": "argument",
                            "name": "delimiter",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "savetxt",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "savetxt[dtype: DType = float64](filename: String, array: NDArray[dtype], delimiter: String = String(\",\"))",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "files",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_PRECISION",
                    "summary": "",
                    "value": "4"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_SUPPRESS_SMALL",
                    "summary": "",
                    "value": "False"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_SEPARATOR",
                    "summary": "",
                    "value": "\" \""
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_PADDING",
                    "summary": "",
                    "value": "\"\""
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_EDGE_ITEMS",
                    "summary": "",
                    "value": "3"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_THRESHOLD",
                    "summary": "",
                    "value": "10"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_LINE_WIDTH",
                    "summary": "",
                    "value": "75"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_SIGN",
                    "summary": "",
                    "value": "False"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_FLOAT_FORMAT",
                    "summary": "",
                    "value": "\"fixed\""
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_COMPLEX_FORMAT",
                    "summary": "",
                    "value": "\"parentheses\""
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_NAN_STRING",
                    "summary": "",
                    "value": "\"nan\""
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_INF_STRING",
                    "summary": "",
                    "value": "\"inf\""
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_FORMATTED_WIDTH",
                    "summary": "",
                    "value": "8"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_EXPONENT_THRESHOLD",
                    "summary": "",
                    "value": "4"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "DEFAULT_SUPPRESS_SCIENTIFIC",
                    "summary": "",
                    "value": "False"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "printoptions",
                    "summary": "",
                    "value": "PrintOptions"
                  }
                ],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "set_printoptions",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "default": "4",
                            "description": "",
                            "kind": "argument",
                            "name": "precision",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "suppress_small",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "String(\" \")",
                            "description": "",
                            "kind": "argument",
                            "name": "separator",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"\")",
                            "description": "",
                            "kind": "argument",
                            "name": "padding",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "default": "3",
                            "description": "",
                            "kind": "argument",
                            "name": "edge_items",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "set_printoptions",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "set_printoptions(precision: Int = 4, suppress_small: Bool = False, separator: String = String(\" \"), padding: String = String(\"\"), edge_items: Int = 3)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "format_floating_scientific",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The float to format.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "10",
                            "description": "The number of decimal places to include in the mantissa.",
                            "kind": "argument",
                            "name": "precision",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "Whether to include the sign of the float in the result. Defaults to False.",
                            "kind": "argument",
                            "name": "sign",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Notes: A scientific notation takes the form `-a.bbbbe+ii`. It will take\n`7 + precision` letters in total.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "format_floating_scientific",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "Datatype of the float.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "Error: If the dtype is not a floating-point type or if precision is negative.",
                        "returnType": "String",
                        "returnsDoc": "A string representation of the float in scientific notation.",
                        "signature": "format_floating_scientific[dtype: DType = float64](x: SIMD[dtype, 1], precision: Int = 10, sign: Bool = False) -> String",
                        "summary": "Format a float in scientific notation."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "format_floating_precision",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The value to format.",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "The number of decimal places to include.",
                            "kind": "argument",
                            "name": "precision",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "Whether to include the sign of the float in the result. Defaults to False.",
                            "kind": "argument",
                            "name": "sign",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "format_floating_precision",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "Error: If precision is negative or if the value cannot be formatted.",
                        "returnType": "String",
                        "returnsDoc": "The formatted value as a string.",
                        "signature": "format_floating_precision[dtype: DType](value: SIMD[dtype, 1], precision: Int, sign: Bool = False) -> String",
                        "summary": "Format a floating-point value to the specified precision."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The complex value to format.",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "ComplexSIMD[cdtype, dtype=dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "format_floating_precision",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "cdtype",
                            "passingKind": "pos_or_kw",
                            "type": "CDType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "Error: If the complex value cannot be formatted.",
                        "returnType": "String",
                        "returnsDoc": "The formatted value as a string.",
                        "signature": "format_floating_precision[cdtype: CDType, dtype: DType](value: ComplexSIMD[cdtype, dtype=dtype]) -> String",
                        "summary": "Format a complex floating-point value to the specified precision."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "format_value",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The value to format.",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "The print options.",
                            "kind": "argument",
                            "name": "print_options",
                            "passingKind": "pos_or_kw",
                            "type": "PrintOptions"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "format_value",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "The formatted value as a string.",
                        "signature": "format_value[dtype: DType](value: SIMD[dtype, 1], print_options: PrintOptions) -> String",
                        "summary": "Format a single value based on the print options."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The complex value to format.",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "ComplexSIMD[cdtype, dtype=dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "The print options.",
                            "kind": "argument",
                            "name": "print_options",
                            "passingKind": "pos_or_kw",
                            "type": "PrintOptions"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "format_value",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "cdtype",
                            "passingKind": "pos_or_kw",
                            "type": "CDType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "The formatted value as a string.",
                        "signature": "format_value[cdtype: CDType, dtype: DType](value: ComplexSIMD[cdtype, dtype=dtype], print_options: PrintOptions) -> String",
                        "summary": "Format a complex value based on the print options."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "formatting",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [
                      {
                        "description": "",
                        "kind": "field",
                        "name": "precision",
                        "summary": "",
                        "type": "Int"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "suppress_small",
                        "summary": "",
                        "type": "Bool"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "separator",
                        "summary": "",
                        "type": "String"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "padding",
                        "summary": "",
                        "type": "String"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "threshold",
                        "summary": "",
                        "type": "Int"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "line_width",
                        "summary": "",
                        "type": "Int"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "edge_items",
                        "summary": "",
                        "type": "Int"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "sign",
                        "summary": "",
                        "type": "Bool"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "float_format",
                        "summary": "",
                        "type": "String"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "complex_format",
                        "summary": "",
                        "type": "String"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "nan_string",
                        "summary": "",
                        "type": "String"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "inf_string",
                        "summary": "",
                        "type": "String"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "formatted_width",
                        "summary": "",
                        "type": "Int"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "exponent_threshold",
                        "summary": "",
                        "type": "Int"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "suppress_scientific",
                        "summary": "",
                        "type": "Bool"
                      }
                    ],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "__init__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "default": "4",
                                "description": "",
                                "kind": "argument",
                                "name": "precision",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "False",
                                "description": "",
                                "kind": "argument",
                                "name": "suppress_small",
                                "passingKind": "pos_or_kw",
                                "type": "Bool"
                              },
                              {
                                "convention": "read",
                                "default": "String(\" \")",
                                "description": "",
                                "kind": "argument",
                                "name": "separator",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"\")",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "10",
                                "description": "",
                                "kind": "argument",
                                "name": "threshold",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "75",
                                "description": "",
                                "kind": "argument",
                                "name": "line_width",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "3",
                                "description": "",
                                "kind": "argument",
                                "name": "edge_items",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "False",
                                "description": "",
                                "kind": "argument",
                                "name": "sign",
                                "passingKind": "pos_or_kw",
                                "type": "Bool"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"fixed\")",
                                "description": "",
                                "kind": "argument",
                                "name": "float_format",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"parentheses\")",
                                "description": "",
                                "kind": "argument",
                                "name": "complex_format",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"nan\")",
                                "description": "",
                                "kind": "argument",
                                "name": "nan_string",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"inf\")",
                                "description": "",
                                "kind": "argument",
                                "name": "inf_string",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "8",
                                "description": "",
                                "kind": "argument",
                                "name": "formatted_width",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "4",
                                "description": "",
                                "kind": "argument",
                                "name": "exponent_threshold",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "False",
                                "description": "",
                                "kind": "argument",
                                "name": "suppress_scientific",
                                "passingKind": "pos_or_kw",
                                "type": "Bool"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, precision: Int = 4, suppress_small: Bool = False, separator: String = String(\" \"), padding: String = String(\"\"), threshold: Int = 10, line_width: Int = 75, edge_items: Int = 3, sign: Bool = False, float_format: String = String(\"fixed\"), complex_format: String = String(\"parentheses\"), nan_string: String = String(\"nan\"), inf_string: String = String(\"inf\"), formatted_width: Int = 8, exponent_threshold: Int = 4, suppress_scientific: Bool = False)",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "set_options",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "default": "4",
                                "description": "",
                                "kind": "argument",
                                "name": "precision",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "False",
                                "description": "",
                                "kind": "argument",
                                "name": "suppress_small",
                                "passingKind": "pos_or_kw",
                                "type": "Bool"
                              },
                              {
                                "convention": "read",
                                "default": "String(\" \")",
                                "description": "",
                                "kind": "argument",
                                "name": "separator",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"\")",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "10",
                                "description": "",
                                "kind": "argument",
                                "name": "threshold",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "75",
                                "description": "",
                                "kind": "argument",
                                "name": "line_width",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "3",
                                "description": "",
                                "kind": "argument",
                                "name": "edge_items",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "False",
                                "description": "",
                                "kind": "argument",
                                "name": "sign",
                                "passingKind": "pos_or_kw",
                                "type": "Bool"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"fixed\")",
                                "description": "",
                                "kind": "argument",
                                "name": "float_format",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"parentheses\")",
                                "description": "",
                                "kind": "argument",
                                "name": "complex_format",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"nan\")",
                                "description": "",
                                "kind": "argument",
                                "name": "nan_string",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "String(\"inf\")",
                                "description": "",
                                "kind": "argument",
                                "name": "inf_string",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              },
                              {
                                "convention": "read",
                                "default": "8",
                                "description": "",
                                "kind": "argument",
                                "name": "formatted_width",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "4",
                                "description": "",
                                "kind": "argument",
                                "name": "exponent_threshold",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "False",
                                "description": "",
                                "kind": "argument",
                                "name": "suppress_scientific",
                                "passingKind": "pos_or_kw",
                                "type": "Bool"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "set_options",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "set_options(mut self, precision: Int = 4, suppress_small: Bool = False, separator: String = String(\" \"), padding: String = String(\"\"), threshold: Int = 10, line_width: Int = 75, edge_items: Int = 3, sign: Bool = False, float_format: String = String(\"fixed\"), complex_format: String = String(\"parentheses\"), nan_string: String = String(\"nan\"), inf_string: String = String(\"inf\"), formatted_width: Int = 8, exponent_threshold: Int = 4, suppress_scientific: Bool = False)",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__enter__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__enter__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Self",
                            "returnsDoc": "",
                            "signature": "__enter__(mut self) -> Self",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__exit__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__exit__",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__exit__(mut self)",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "PrintOptions",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "Copyable",
                      "Movable",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              }
            ],
            "name": "io",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "compute_householder",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "H",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "R",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "row",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "column",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "compute_householder",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "compute_householder[dtype: DType](mut H: Matrix[dtype], mut R: Matrix[dtype], row: Int, column: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "compute_qr",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "H",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "work_index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "row_start",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "column_start",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "compute_qr",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "compute_qr[dtype: DType](mut H: Matrix[dtype], work_index: Int, mut A: Matrix[dtype], row_start: Int, column_start: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "lu_decomposition",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Input matrix for decomposition. It should be a row-major matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "For efficiency, `dtype` of the output arrays will be the same as the input\narray. Thus, use `astype()` before passing the array to this function.\n\nExample:\n```\nimport numojo as nm\nfn main() raises:\n    var arr = nm.NDArray[nm.f64](\"[[1,2,3], [4,5,6], [7,8,9]]\")\n    var U: nm.NDArray\n    var L: nm.NDArray\n    L, U = nm.linalg.lu_decomposition(arr)\n    print(arr)\n    print(L)\n    print(U)\n```\n```console\n[[      1.0     2.0     3.0     ]\n [      4.0     5.0     6.0     ]\n [      7.0     8.0     9.0     ]]\n2-D array  Shape: [3, 3]  DType: float64\n[[      1.0     0.0     0.0     ]\n [      4.0     1.0     0.0     ]\n [      7.0     2.0     1.0     ]]\n2-D array  Shape: [3, 3]  DType: float64\n[[      1.0     2.0     3.0     ]\n [      0.0     -3.0    -6.0    ]\n [      0.0     0.0     0.0     ]]\n2-D array  Shape: [3, 3]  DType: float64\n```\n\nFurther readings:\n- Linear Algebra And Its Applications, fourth edition, Gilbert Strang\n- https://en.wikipedia.org/wiki/LU_decomposition\n- https://www.scicoding.com/how-to-calculate-lu-decomposition-in-python/\n- https://courses.physics.illinois.edu/cs357/sp2020/notes/ref-9-linsys.html.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "lu_decomposition",
                        "parameters": [
                          {
                            "description": "Data type of the upper and upper triangular matrices.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Tuple[NDArray[dtype], NDArray[dtype]]",
                        "returnsDoc": "A tuple of the upper and lower triangular matrices.",
                        "signature": "lu_decomposition[dtype: DType](A: NDArray[dtype]) -> Tuple[NDArray[dtype], NDArray[dtype]]",
                        "summary": "Perform LU (lower-upper) decomposition for array."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "lu_decomposition",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Tuple[Matrix[dtype], Matrix[dtype]]",
                        "returnsDoc": "",
                        "signature": "lu_decomposition[dtype: DType](A: Matrix[dtype]) -> Tuple[Matrix[dtype], Matrix[dtype]]",
                        "summary": "Perform LU (lower-upper) decomposition for matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "partial_pivoting",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "2-d square array.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "partial_pivoting",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Tuple[NDArray[dtype], NDArray[dtype], Int]",
                        "returnsDoc": "Pivoted array. The permutation matrix. The number of exchanges.",
                        "signature": "partial_pivoting[dtype: DType](owned A: NDArray[dtype]) -> Tuple[NDArray[dtype], NDArray[dtype], Int]",
                        "summary": "Perform partial pivoting for a square matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "partial_pivoting",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Tuple[Matrix[dtype], Matrix[dtype], Int]",
                        "returnsDoc": "",
                        "signature": "partial_pivoting[dtype: DType](owned A: Matrix[dtype]) -> Tuple[Matrix[dtype], Matrix[dtype], Int]",
                        "summary": "Perform partial pivoting for matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "qr",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "The input matrix to be factorized.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Decompose the matrix `A` as `QR`, where `Q` is orthonormal and `R` is upper-triangular.\nThis function is similar to `numpy.linalg.qr`.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "qr",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Tuple[Matrix[dtype], Matrix[dtype]]",
                        "returnsDoc": "A tuple containing the orthonormal matrix `Q` and the upper-triangular matrix `R`.",
                        "signature": "qr[dtype: DType](owned A: Matrix[dtype]) -> Tuple[Matrix[dtype], Matrix[dtype]]",
                        "summary": "Compute the QR decomposition of a matrix."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "decompositions",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "det",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "det",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "det[dtype: DType](A: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Find the determinant of A using LUP decomposition."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "det",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "det[dtype: DType](A: Matrix[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Find the determinant of A using LUP decomposition."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "trace",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "Offset of the diagonal from the main diagonal.",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "First axis.",
                            "kind": "argument",
                            "name": "axis1",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "1",
                            "description": "Second axis.",
                            "kind": "argument",
                            "name": "axis2",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "trace",
                        "parameters": [
                          {
                            "description": "Data type of the array.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The trace of the NDArray.",
                        "signature": "trace[dtype: DType](array: NDArray[dtype], offset: Int = 0, axis1: Int = 0, axis2: Int = 1) -> NDArray[dtype]",
                        "summary": "Computes the trace of a ndarray."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Similar to `numpy.trace`.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "trace",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "trace[dtype: DType](A: Matrix[dtype], offset: Int = 0) -> SIMD[dtype, 1]",
                        "summary": "Return the sum along diagonals of the array."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "norms",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "cross",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "`array1` and `array2` must be of shape (3,).",
                        "deprecated": "",
                        "description": "Parameters\n    dtype: The element type.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cross",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The cross product of two arrays.",
                        "signature": "cross[dtype: DType = float64](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Compute the cross product of two arrays."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "dot",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "`array1` and `array2` must be 1 dimensional.",
                        "deprecated": "",
                        "description": "Parameters\n    dtype: The element type.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "dot",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The dot product of two arrays.",
                        "signature": "dot[dtype: DType = float64](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Compute the dot product of two arrays."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "tile",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "end_x",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "end_y",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tile",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "",
                            "passingKind": "inferred",
                            "type": "origin.set"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "tiled_fn",
                            "passingKind": "pos_or_kw",
                            "type": "fn[Int, Int](Int, Int) capturing -> None"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "tile_x",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "tile_y",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "tile[: origin.set, //, tiled_fn: fn[Int, Int](Int, Int) capturing -> None, tile_x: Int, tile_y: Int](end_x: Int, end_y: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul_tiled_unrolled_parallelized",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "B",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_tiled_unrolled_parallelized",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "",
                        "signature": "matmul_tiled_unrolled_parallelized[dtype: DType](A: NDArray[dtype], B: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Matrix multiplication vectorized, tiled, unrolled, and parallelized."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul_1darray",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "B",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_1darray",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "",
                        "signature": "matmul_1darray[dtype: DType](A: NDArray[dtype], B: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Array multiplication for 1-d arrays (inner dot)."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul_2darray",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First array.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Second array.",
                            "kind": "argument",
                            "name": "B",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Parameter:\n    dtype: Data type.\n\nReturn:\n    A multiplied by B.\n\nNotes:\n    The multiplication is vectorized and parallelized.\n\nReferences:\n    [1] https://docs.modular.com/mojo/notebooks/Matmul.\n    Compared to the reference, we increases the size of\n    the SIMD vector from the default width to 16. The purpose is to\n    increase the performance via SIMD.\n    This reduces the execution time by ~50 percent compared to\n    `matmul_parallelized` and `matmul_tiled_unrolled_parallelized` for large\n    matrices.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_2darray",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "When the shape does not match.",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "",
                        "signature": "matmul_2darray[dtype: DType](A: NDArray[dtype], B: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Array multiplication for 2-d arrays (inner dot)."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First array.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Second array.",
                            "kind": "argument",
                            "name": "B",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Parameter:\n    dtype: Data type.\n\nReturn:\n    A multiplied by B.\n\nNotes:\n\n    When A and B are 1darray, it is equal to dot of vectors:\n    `(i) @ (i) -> (1)`.\n\n    When A and B are 2darray, it is equal to inner products of matrices:\n    `(i,j) @ (j,k) -> (i,k)`.\n\n    When A and B are more than 2d, it is equal to a stack of 2darrays:\n    `(i,j,k) @ (i,k,l) -> (i,j,l)` and\n    `(i,j,k,l) @ (i,j,l,m) -> (i,j,k,m)`.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "(1) The shapes of first n-2 dimensions do not match. (2) The shape of -2 dimension of first array does not match the shape of -1 dimension of the second array.",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "",
                        "signature": "matmul[dtype: DType](A: NDArray[dtype], B: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Array multiplication for any dimensions."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "B",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(1000, 1000))\nvar B = Matrix.rand(shape=(1000, 1000))\nvar C = mat.matmul(A, B)\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "matmul[dtype: DType](A: Matrix[dtype], B: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": "Matrix multiplication."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul_naive",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "B",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_naive",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "",
                        "signature": "matmul_naive[dtype: DType](A: NDArray[dtype], B: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Matrix multiplication with three nested loops."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "products",
                "structs": [],
                "summary": "Matrix and vector products",
                "traits": []
              },
              {
                "aliases": [],
                "description": "Provides:\n    - Solver of `Ax = y` using LU decomposition algorithm.\n    - Inverse of an invertible matrix.\n\n# TODO:\n    - Partial pivot.\n    - Determinant.",
                "functions": [
                  {
                    "kind": "function",
                    "name": "forward_substitution",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A lower triangular matrix.",
                            "kind": "argument",
                            "name": "L",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A vector.",
                            "kind": "argument",
                            "name": "y",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Paramters:\n    dtype: dtype of the resulting vector.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "forward_substitution",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "Solution to `Lx = y`. It is a vector.",
                        "signature": "forward_substitution[dtype: DType](L: NDArray[dtype], y: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Perform forward substitution to solve `Lx = y`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "back_substitution",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A upper triangular matrix.",
                            "kind": "argument",
                            "name": "U",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A vector.",
                            "kind": "argument",
                            "name": "y",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Paramters:\n    dtype: dtype of the resulting vector.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "back_substitution",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "Solution to `Ux = y`. It is a vector.",
                        "signature": "back_substitution[dtype: DType](U: NDArray[dtype], y: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Perform forward substitution to solve `Ux = y`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "inv",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Input matrix. It should be non-singular, square, and row-major.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "It uses the function `solve()` to solve `AB = I` for B, where I is\nan identity matrix.\n\nThe speed is faster than numpy for matrices smaller than 100x100,\nand is slower for larger matrices.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "inv",
                        "parameters": [
                          {
                            "description": "Data type of the inverse matrix.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The reversed matrix of the original matrix.",
                        "signature": "inv[dtype: DType](A: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Find the inverse of a non-singular, row-major matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "inv",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "inv[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": "Inverse of matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "inv_lu",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Input matrix. It should be non-singular, square, and row-major.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Use LU decomposition algorithm.\n\nThe speed is faster than numpy for matrices smaller than 100x100,\nand is slower for larger matrices.\n\nTODO: Fix the issues in parallelization.\n`AX = I` where `I` is an identity matrix.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "inv_lu",
                        "parameters": [
                          {
                            "description": "Data type of the inverse matrix.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The reversed matrix of the original matrix.",
                        "signature": "inv_lu[dtype: DType](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Find the inverse of a non-singular, row-major matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "lstsq",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "X",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "y",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nX = Matrix.rand((1000000, 5))\ny = Matrix.rand((1000000, 1))\nprint(mat.lstsq(X, y))\n```\n```console\n[[0.18731374756029967]\n [0.18821352688798607]\n [0.18717162200411439]\n [0.1867570378683612]\n [0.18828715376701158]]\nSize: 5x1  DType: float64\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "lstsq",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "lstsq[dtype: DType](X: Matrix[dtype], y: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": "Caclulate the OLS estimates."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "solve",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Non-singular, square, and row-major matrix. The size is m x m.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Matrix of size m x n.",
                            "kind": "argument",
                            "name": "Y",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "`A` should be a non-singular, row-major matrix (m x m).\n`Y` should be a matrix of (m x n).\n`X` is a matrix of (m x n).\nLU decomposition algorithm is adopted.\n\nThe speed is faster than numpy for matrices smaller than 100x100,\nand is slower for larger matrices.\n\nFor efficiency, `dtype` of the output array will be the same as the input\narrays. Thus, use `astype()` before passing the arrays to this function.\n\nTODO: Use LAPACK for large matrices when it is available.\n\nAn example goes as follows.\n\n```mojo\nimport numojo as nm\nfn main() raises:\n    var A = nm.fromstring(\"[[1, 0, 1], [0, 2, 1], [1, 1, 1]]\")\n    var B = nm.fromstring(\"[[1, 0, 0], [0, 1, 0], [0, 0, 1]]\")\n    var X = nm.linalg.solve(A, B)\n    print(X)\n```\n```console\n[[      -1.0    -1.0    2.0     ]\n [      -1.0    0.0     1.0     ]\n [      2.0     1.0     -2.0    ]]\n2-D array  Shape: [3, 3]  DType: float64\n```\n\nThe example is also a way to calculate inverse of matrix.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "solve",
                        "parameters": [
                          {
                            "description": "Data type of the inversed matrix.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "Matrix of size m x n.",
                        "signature": "solve[dtype: DType](A: NDArray[dtype], Y: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Solve the linear system `AX = Y` for `X`."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "Y",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "solve",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "solve[dtype: DType](A: Matrix[dtype], Y: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": "Solve `AX = Y` using LUP decomposition."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "solve_lu",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "Y",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "solve_lu",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "solve_lu[dtype: DType](A: Matrix[dtype], Y: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": "Solve `AX = Y` using LU decomposition."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "solving",
                "structs": [],
                "summary": "Linear Algebra Solver",
                "traits": []
              }
            ],
            "name": "linalg",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "greater",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Second NDArray to compare.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "greater",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the corresponding element in x is greater than the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is greater than the corresponding element in y, and False otherwise.",
                        "signature": "greater[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are greater than values in y."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Scalar to compare.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "greater",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the element in x is greater than the scalar, otherwise False.  An element of the result NDArray will be True if the element in x is greater than the scalar, and False otherwise.",
                        "signature": "greater[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are greater than a scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "greater_equal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Second NDArray to compare.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "greater_equal",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the corresponding element in x is greater than or equal to the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is greater than or equal to the corresponding element in y, and False otherwise.",
                        "signature": "greater_equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are greater than or equal to values in y."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Scalar to compare.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "greater_equal",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the element in x is greater than or equal to the scalar, otherwise False.  An element of the result NDArray will be True if the element in x is greater than or equal to the scalar, and False otherwise.",
                        "signature": "greater_equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are greater than or equal to a scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "less",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Second NDArray to compare.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "less",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the corresponding element in x is or equal to the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is or equal to the corresponding element in y, and False otherwise.",
                        "signature": "less[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are to values in y."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Scalar to compare.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "less",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the element in x is or equal to the scalar, otherwise False.  An element of the result NDArray will be True if the element in x is or equal to the scalar, and False otherwise.",
                        "signature": "less[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are to a scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "less_equal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Second NDArray to compare.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "less_equal",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the corresponding element in x is less than or equal to the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is less than or equal to the corresponding element in y, and False otherwise.",
                        "signature": "less_equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are less than or equal to values in y."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Scalar to compare.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "less_equal",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the element in x is less than or equal to the scalar, otherwise False.  An element of the result NDArray will be True if the element in x is less than or equal to the scalar, and False otherwise.",
                        "signature": "less_equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are less than or equal to a scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "equal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Second NDArray to compare.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "equal",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the corresponding element in x is equal to the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is equal to the corresponding element in y, and False otherwise.",
                        "signature": "equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are equal to values in y."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Scalar to compare.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "equal",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the element in x is equal to the scalar, otherwise False.  An element of the result NDArray will be True if the element in x is equal to the scalar, and False otherwise.",
                        "signature": "equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are equal to a scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "not_equal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Second NDArray to compare.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "not_equal",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the corresponding element in x is not equal to the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is not equal to the corresponding element in y, and False otherwise.",
                        "signature": "not_equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are not equal to values in y."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "First NDArray to compare.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "Scalar to compare.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "not_equal",
                        "parameters": [
                          {
                            "description": "The dtype of the input NDArray.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "A NDArray containing True if the element in x is not equal to the scalar, otherwise False.  An element of the result NDArray will be True if the element in x is not equal to the scalar, and False otherwise.",
                        "signature": "not_equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Performs element-wise check of whether values in x are not equal to values in y."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "comparison",
                "structs": [],
                "summary": "Implements comparison math currently not using backend due to bool bitpacking issue",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "isinf",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray[dtype] - Input array to check.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "isinf",
                        "parameters": [
                          {
                            "description": "DType - Data type of the input array.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "_mf.Backend - Backend to use for the operation. Defaults to _mf.Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "NDArray[DType.bool] - A array of the same shape as `array` with True for infinite elements and False for others.",
                        "signature": "isinf[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": "Checks if each element of the input array is infinite."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "isfinite",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray[dtype] - Input array to check.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "isfinite",
                        "parameters": [
                          {
                            "description": "DType - Data type of the input array.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "_mf.Backend - Backend to use for the operation. Defaults to _mf.Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "NDArray[DType.bool] - A array of the same shape as `array` with True for finite elements and False for others.",
                        "signature": "isfinite[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": "Checks if each element of the input array is finite."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "isnan",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray[dtype] - Input array to check.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "isnan",
                        "parameters": [
                          {
                            "description": "DType - Data type of the input array.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "_mf.Backend - Backend to use for the operation. Defaults to _mf.Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "NDArray[DType.bool] - A array of the same shape as `array` with True for NaN elements and False for others.",
                        "signature": "isnan[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": "Checks if each element of the input array is NaN."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "contents",
                "structs": [],
                "summary": "Implements Checking routines: currently not SIMD due to bool bit packing issue",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "all",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "all",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "all[dtype: DType](A: Matrix[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Test whether all array elements evaluate to True."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "all",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "all[dtype: DType](A: Matrix[dtype], axis: Int) -> Matrix[dtype]",
                        "summary": "Test whether all array elements evaluate to True along axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "allt",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[bool]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "allt",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[bool, 1]",
                        "returnsDoc": "",
                        "signature": "allt(array: NDArray[bool]) -> SIMD[bool, 1]",
                        "summary": "If all True."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "any",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[bool]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "any",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[bool, 1]",
                        "returnsDoc": "",
                        "signature": "any(array: NDArray[bool]) -> SIMD[bool, 1]",
                        "summary": "If any True."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "any",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "any[dtype: DType](A: Matrix[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Test whether any array elements evaluate to True."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "any",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "any[dtype: DType](A: Matrix[dtype], axis: Int) -> Matrix[dtype]",
                        "summary": "Test whether any array elements evaluate to True along axis."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "truth",
                "structs": [],
                "summary": "",
                "traits": []
              }
            ],
            "name": "logic",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "add",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "add",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise sum of `array1` and`array2`.",
                        "signature": "add[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Perform addition on two arrays."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "add",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The elementwise sum of `array1` and`array2`.",
                        "signature": "add[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](array1: NDArray[dtype], array2: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Perform addition on two arrays."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "add",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise sum of `array1` and`array2`.",
                        "signature": "add[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[dtype]",
                        "summary": "Perform addition on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "add",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The elementwise sum of `array1` and`array2`.",
                        "signature": "add[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](array: NDArray[dtype], scalar: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Perform addition on two arrays."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "add",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise sum of `array1` and`array2`.",
                        "signature": "add[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Perform addition on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "add",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The elementwise sum of `array1` and`array2`.",
                        "signature": "add[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](scalar: SIMD[dtype, 1], array: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Perform addition on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "A list of arrays or Scalars to be added.",
                            "kind": "argument",
                            "name": "*values",
                            "passingKind": "pos_or_kw",
                            "type": "Variant[NDArray[dtype], SIMD[dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "add",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise sum of `array1` and`array2`.",
                        "signature": "add[dtype: DType, backend: Backend = Vectorized](owned *values: Variant[NDArray[dtype], SIMD[dtype, 1]]) -> NDArray[dtype]",
                        "summary": "Perform addition on a list of arrays and a scalars."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "sub",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sub",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise difference of `array1` and`array2`.",
                        "signature": "sub[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Perform subtraction on two arrays."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sub",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The elementwise difference of `array1` and`array2`.",
                        "signature": "sub[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](array1: NDArray[dtype], array2: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Perform subtraction on two arrays."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sub",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise difference of `array1` and`array2`.",
                        "signature": "sub[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[dtype]",
                        "summary": "Perform subtraction on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sub",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The elementwise difference of `array` and`scalar`.",
                        "signature": "sub[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](array: NDArray[dtype], scalar: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Perform subtraction on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sub",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise difference of `array1` and`array2`.",
                        "signature": "sub[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Perform subtraction on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sub",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The elementwise difference of `array` and`scalar`.",
                        "signature": "sub[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](scalar: SIMD[dtype, 1], array: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Perform subtraction on between an array and a scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "diff",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "The order of the difference.",
                            "kind": "argument",
                            "name": "n",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "diff",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The n-th order difference of the input array.",
                        "signature": "diff[dtype: DType = float64](array: NDArray[dtype], n: Int) -> NDArray[dtype]",
                        "summary": "Compute the n-th order difference of the input array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mod",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to array1 % array2.",
                        "signature": "mod[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise modulo of array1 and array2."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mod",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise difference of `array1` and`array2`.",
                        "signature": "mod[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[dtype]",
                        "summary": "Perform subtraction on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mod",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise difference of `array1` and`array2`.",
                        "signature": "mod[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Perform subtraction on between an array and a scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mul",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mul",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to array1*array2.",
                        "signature": "mul[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise product of array1 and array2."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mul",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The element-wise product of `array1` and`array2`.",
                        "signature": "mul[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](array1: NDArray[dtype], array2: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Perform multiplication on between two arrays."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mul",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise product of `array1` and`array2`.",
                        "signature": "mul[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[dtype]",
                        "summary": "Perform multiplication on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mul",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The element-wise product of `array` and`scalar`.",
                        "signature": "mul[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](array: NDArray[dtype], scalar: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Perform multiplication on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mul",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise product of `array1` and`array2`.",
                        "signature": "mul[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Perform multiplication on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mul",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The element-wise product of `array` and`scalar`.",
                        "signature": "mul[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](scalar: SIMD[dtype, 1], array: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Perform multiplication on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "A list of arrays or Scalars to be added.",
                            "kind": "argument",
                            "name": "*values",
                            "passingKind": "pos_or_kw",
                            "type": "Variant[NDArray[dtype], SIMD[dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mul",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise product of `array1` and`array2`.",
                        "signature": "mul[dtype: DType, backend: Backend = Vectorized](owned *values: Variant[NDArray[dtype], SIMD[dtype, 1]]) -> NDArray[dtype]",
                        "summary": "Perform multiplication on a list of arrays an arrays and a scalars."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "div",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "div",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to array1/array2.",
                        "signature": "div[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise quotent of array1 and array2."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "div",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The element-wise quotient of `array1` and`array2`.",
                        "signature": "div[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](array1: NDArray[dtype], array2: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Perform true division on between two arrays."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "div",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise quotient of `array1` and`array2`.",
                        "signature": "div[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[dtype]",
                        "summary": "Perform true division on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[OtherDType, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "div",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The element-wise quotient of `array` and`scalar`.",
                        "signature": "div[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](array: NDArray[dtype], scalar: SIMD[OtherDType, 1]) -> NDArray[ResultDType]",
                        "summary": "Perform true division on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "div",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise quotient of `array1` and`array2`.",
                        "signature": "div[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Perform true division on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[OtherDType]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "div",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defualts to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          },
                          {
                            "description": "The element type of the second array.",
                            "kind": "parameter",
                            "name": "OtherDType",
                            "passingKind": "kw",
                            "type": "DType"
                          },
                          {
                            "default": "result[::DType,::DType]()",
                            "description": "The element type of the result array.",
                            "kind": "parameter",
                            "name": "ResultDType",
                            "passingKind": "kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[ResultDType]",
                        "returnsDoc": "The element-wise quotient of `array` and`scalar`.",
                        "signature": "div[dtype: DType, backend: Backend = Vectorized, *, OtherDType: DType, ResultDType: DType = result[::DType,::DType]()](scalar: SIMD[dtype, 1], array: NDArray[OtherDType]) -> NDArray[ResultDType]",
                        "summary": "Perform true division on between an array and a scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "floor_div",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "floor_div",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to array1/array2.",
                        "signature": "floor_div[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise quotent of array1 and array2."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "floor_div",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise quotient of `array1` and`array2`.",
                        "signature": "floor_div[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[dtype]",
                        "summary": "Perform true division on between an array and a scalar."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "floor_div",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise quotient of `array1` and`array2`.",
                        "signature": "floor_div[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Perform true division on between an array and a scalar."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fma",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array3",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "fma[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A SIMD[dtype,1] value to be added.",
                            "kind": "argument",
                            "name": "simd",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "fma[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[dtype]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "remainder",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "remainder",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to array1//array2.",
                        "signature": "remainder[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise remainders of NDArray."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "arithmetic",
                "structs": [],
                "summary": "Implements arithmetic operations functions",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "gradient",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "An array of the same shape as x containing the spacing between adjacent elements.",
                            "kind": "argument",
                            "name": "spacing",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "`fdtype` must be a floating-point type if `idtype` is not a floating-point type.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "gradient",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "Input data type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The integral of y over x using the trapezoidal rule.",
                        "signature": "gradient[dtype: DType = float64](x: NDArray[dtype], spacing: SIMD[dtype, 1]) -> NDArray[dtype]",
                        "summary": "Compute the gradient of y over x using the trapezoidal rule."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "trapz",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "y",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "`x` and `y` must have the same shape. `fdtype` must be a floating-point type if `idtype` is not a floating-point type.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "trapz",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The integral of y over x using the trapezoidal rule.",
                        "signature": "trapz[dtype: DType = float64](y: NDArray[dtype], x: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Compute the integral of y over x using the trapezoidal rule."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "differences",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "ln",
                    "summary": "Natural Log equivelent to log",
                    "value": "log[::DType,numojo::core::traits::backend::Backend]"
                  }
                ],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "exp",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "exp",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray with the shape of `NDArray` with values equal to the e to the power of the value in the original NDArray at each position.",
                        "signature": "exp[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Calculate element-wise euler's constant(e) to the power of NDArray[i]."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "exp2",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "exp2",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray with the shape of `NDArray` with values equal to the 2 to the power of the value in the original NDArray at each position.",
                        "signature": "exp2[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Calculate element-wise two to the power of NDArray[i]."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "expm1",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "expm1",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray with the shape of `NDArray` with values equal to the negative one plus e to the power of the value in the original NDArray at each position.",
                        "signature": "expm1[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Calculate element-wise euler's constant(e) to the power of NDArray[i] minus1."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "log",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "log",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to ln(NDArray).",
                        "signature": "log[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise natural logarithm of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "log2",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "log2",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to log_2(NDArray).",
                        "signature": "log2[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise logarithm base two of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "log10",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "log10",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to log_10(NDArray).",
                        "signature": "log10[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise logarithm base ten of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "log1p",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "log1p",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to ln(NDArray+1).",
                        "signature": "log1p[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise natural logarithm of 1 plus NDArray."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "exponents",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "max",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "The axis along which the sum is performed.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "An NDArray.",
                        "signature": "max[dtype: DType](array: NDArray[dtype], axis: Int = 0) -> NDArray[dtype]",
                        "summary": "Maximums of array elements over a given axis."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "max[dtype: DType](A: Matrix[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Find max item. It is first flattened before sorting."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "max[dtype: DType](A: Matrix[dtype], axis: Int) -> Matrix[dtype]",
                        "summary": "Find max item along the given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "maxT",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "maxT",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "maxT[dtype: DType = float64](array: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Maximum value of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "min",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "The axis along which the sum is performed.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "min",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "An NDArray.",
                        "signature": "min[dtype: DType](array: NDArray[dtype], axis: Int = 0) -> NDArray[dtype]",
                        "summary": "Minumums of array elements over a given axis."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "min",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "min[dtype: DType](A: Matrix[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Find min item. It is first flattened before sorting."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "min",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "min[dtype: DType](A: Matrix[dtype], axis: Int) -> Matrix[dtype]",
                        "summary": "Find min item along the given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "minT",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "minT",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The minimum of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "minT[dtype: DType = float64](array: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Minimum value of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "amin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "amin",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "amin[dtype: DType = float64](array: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Minimum value of an array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "amax",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "amax",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "amax[dtype: DType = float64](array: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Maximum value of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mimimum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A SIMD Value.",
                            "kind": "argument",
                            "name": "s1",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A SIMD Value.",
                            "kind": "argument",
                            "name": "s2",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mimimum",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "mimimum[dtype: DType = float64](s1: SIMD[dtype, 1], s2: SIMD[dtype, 1]) -> SIMD[dtype, 1]",
                        "summary": "Minimum value of two SIMD values."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "maximum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A SIMD Value.",
                            "kind": "argument",
                            "name": "s1",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "A SIMD Value.",
                            "kind": "argument",
                            "name": "s2",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "maximum",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "maximum[dtype: DType = float64](s1: SIMD[dtype, 1], s2: SIMD[dtype, 1]) -> SIMD[dtype, 1]",
                        "summary": "Maximum value of two SIMD values."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "maximum",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "",
                        "signature": "maximum[dtype: DType = float64](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element wise maximum of two arrays."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "minimum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "minimum",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "",
                        "signature": "minimum[dtype: DType = float64](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element wise minimum of two arrays."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "extrema",
                "structs": [],
                "summary": "TODO:  1) Add support for axis parameter.   2) Currently, constrained is crashing mojo, so commented it out and added raise Error. Check later. 3) Relax constrained[] to let user get whatever output they want, but make a warning instead.",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "copysign",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "copysign",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The second NDArray multipied by the sign of the first NDArray.",
                        "signature": "copysign[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Copy the sign of the first NDArray and apply it to the second NDArray."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "floating",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "arccosh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "arccosh",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "arccosh[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "acosh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "acosh",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise acosh of `array` in radians.",
                        "signature": "acosh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply acosh also known as inverse hyperbolic cosine ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "acosh",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "acosh[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "arcsinh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "arcsinh",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "arcsinh[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "asinh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "asinh",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise asinh of `array` in radians.",
                        "signature": "asinh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply asinh also known as inverse hyperbolic sine ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "asinh",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "asinh[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "arctanh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "arctanh",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "arctanh[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "atanh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "atanh",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise atanh of `array` in radians.",
                        "signature": "atanh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply atanh also known as inverse hyperbolic tangent ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "atanh",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "atanh[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cosh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array assumed to be in radian.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cosh",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise cosh of `array`.",
                        "signature": "cosh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply cosh also known as hyperbolic cosine ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cosh",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "cosh[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "sinh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array assumed to be in radian.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sinh",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise sinh of `array`.",
                        "signature": "sinh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply sin also known as hyperbolic sine ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sinh",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "sinh[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "tanh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array assumed to be in radian.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tanh",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise tanh of `array`.",
                        "signature": "tanh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply tan also known as hyperbolic tangent ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tanh",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "tanh[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "hyper",
                "structs": [],
                "summary": "Implements Hyperbolic functions for arrays.",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "cbrt",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cbrt",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to NDArray**(1/3).",
                        "signature": "cbrt[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise cuberoot of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rsqrt",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rsqrt",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to 1/NDArray**(1/2).",
                        "signature": "rsqrt[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise reciprocal squareroot of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "sqrt",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sqrt",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to NDArray**(1/2).",
                        "signature": "sqrt[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise squareroot of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "scalb",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "scalb",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray with the shape of `NDArray` with values equal to the negative one plus e to the power of the value in the original NDArray at each position.",
                        "signature": "scalb[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Calculate the scalb of array1 and array2."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "misc",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "prod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n> print(A)\n[[      0.1315377950668335      0.458650141954422       0.21895918250083923     ]\n[      0.67886471748352051     0.93469291925430298     0.51941639184951782     ]\n[      0.034572109580039978    0.52970021963119507     0.007698186207562685    ]]\n2-D array  Shape: [3, 3]  DType: float32\n\n> print(nm.prod(A))\n6.1377261317829834e-07\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "Scalar.",
                        "signature": "prod[dtype: DType](A: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Returns products of all items in the array."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "owned",
                            "description": "The axis along which the product is performed.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "An NDArray.",
                        "signature": "prod[dtype: DType](A: NDArray[dtype], owned axis: Int) -> NDArray[dtype]",
                        "summary": "Returns products of array elements over a given axis."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "prod[dtype: DType](A: Matrix[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Product of all items in the Matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(mat.prod(A, axis=0))\nprint(mat.prod(A, axis=1))\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "prod[dtype: DType](A: Matrix[dtype], axis: Int) -> Matrix[dtype]",
                        "summary": "Product of items in a Matrix along the axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumprod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumprod",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "Cumprod of all items of an array.",
                        "signature": "cumprod[dtype: DType](A: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Returns cumprod of all items of an array. The array is flattened before cumprod."
                      },
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "owned",
                            "description": "Axis.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumprod",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "Cumprod of array by axis.",
                        "signature": "cumprod[dtype: DType](owned A: NDArray[dtype], owned axis: Int) -> NDArray[dtype]",
                        "summary": "Returns cumprod of array by axis."
                      },
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(mat.cumprod(A))\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumprod",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "cumprod[dtype: DType](owned A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": "Cumprod of flattened matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(mat.cumprod(A, axis=0))\nprint(mat.cumprod(A, axis=1))\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumprod",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "cumprod[dtype: DType](owned A: Matrix[dtype], axis: Int) -> Matrix[dtype]",
                        "summary": "Cumprod of Matrix along the axis."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "products",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "round",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "decimals",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "round",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "round[dtype: DType](owned A: Matrix[dtype], decimals: Int = 0) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "tabs",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tabs",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to abs(NDArray).",
                        "signature": "tabs[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise absolute value of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "tfloor",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tfloor",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to floor(NDArray).",
                        "signature": "tfloor[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise round down to nearest whole number of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "tceil",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tceil",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to ceil(NDArray).",
                        "signature": "tceil[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise round up to nearest whole number of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "ttrunc",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "ttrunc",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to trunc(NDArray).",
                        "signature": "ttrunc[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise remove decimal value from float whole number of NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "tround",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tround",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "A NDArray equal to trunc(NDArray).",
                        "signature": "tround[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Element-wise round NDArray to whole number."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "roundeven",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Array to perform rounding on.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "roundeven",
                        "parameters": [
                          {
                            "description": "The dtype of the input and output array.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise banker's rounding of NDArray.  This rounding goes to the nearest integer with ties toward the nearest even integer.",
                        "signature": "roundeven[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Performs element-wise banker's rounding on the elements of a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "nextafter",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The first input argument.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "The second input argument.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "nextafter",
                        "parameters": [
                          {
                            "description": "The dtype of the input and output array. Constraints: must be a floating-point type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, default to `Vectorized`.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The nextafter of the inputs.",
                        "signature": "nextafter[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Computes the nextafter of the inputs."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "rounding",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "sum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n> print(A)\n[[      0.1315377950668335      0.458650141954422       0.21895918250083923     ]\n [      0.67886471748352051     0.93469291925430298     0.51941639184951782     ]\n [      0.034572109580039978    0.52970021963119507     0.007698186207562685    ]]\n2-D array  Shape: [3, 3]  DType: float32\n> print(nm.sum(A))\n3.5140917301177979\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "Scalar.",
                        "signature": "sum[dtype: DType](A: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Returns sum of all items in the array."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "owned",
                            "description": "The axis along which the sum is performed.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nimport numojo as nm\nvar A = nm.random.randn(100, 100)\nprint(nm.sum(A, axis=0))\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "An NDArray.",
                        "signature": "sum[dtype: DType](A: NDArray[dtype], owned axis: Int) -> NDArray[dtype]",
                        "summary": "Returns sums of array elements over a given axis."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(mat.sum(A))\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "sum[dtype: DType](A: Matrix[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Sum up all items in the Matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(mat.sum(A, axis=0))\nprint(mat.sum(A, axis=1))\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "sum[dtype: DType](A: Matrix[dtype], axis: Int) -> Matrix[dtype]",
                        "summary": "Sum up the items in a Matrix along the axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumsum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumsum",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "Cumsum of all items of an array.",
                        "signature": "cumsum[dtype: DType](A: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Returns cumsum of all items of an array. The array is flattened before cumsum."
                      },
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "owned",
                            "description": "Axis.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumsum",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "Cumsum of array by axis.",
                        "signature": "cumsum[dtype: DType](owned A: NDArray[dtype], owned axis: Int) -> NDArray[dtype]",
                        "summary": "Returns cumsum of array by axis."
                      },
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(mat.cumsum(A))\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumsum",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "cumsum[dtype: DType](owned A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": "Cumsum of flattened matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```mojo\nfrom numojo import Matrix\nvar A = Matrix.rand(shape=(100, 100))\nprint(mat.cumsum(A, axis=0))\nprint(mat.cumsum(A, axis=1))\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumsum",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "cumsum[dtype: DType](owned A: Matrix[dtype], axis: Int) -> Matrix[dtype]",
                        "summary": "Cumsum of Matrix along the axis."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "sums",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "arccos",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "arccos",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "arccos[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "acos",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "acos",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise acos of `array` in radians.",
                        "signature": "acos[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply acos also known as inverse cosine ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "acos",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "acos[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "arcsin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "arcsin",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "arcsin[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "asin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "asin",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise asin of `array` in radians.",
                        "signature": "asin[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply asin also known as inverse sine ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "asin",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "asin[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "arctan",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "arctan",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "arctan[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "atan",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "atan",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise atan of `array` in radians.",
                        "signature": "atan[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply atan also known as inverse tangent ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "atan",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "atan[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "atan2",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "atan2",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise atan2 of `array1` and`array2` in radians.",
                        "signature": "atan2[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply atan2 also known as inverse tangent. [atan2 wikipedia](https://en.wikipedia.org/wiki/Atan2)."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cos",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array assumed to be in radian.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cos",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise cos of `array`.",
                        "signature": "cos[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply cos also known as cosine."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cos",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "cos[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "sin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array assumed to be in radian.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sin",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise sin of `array`.",
                        "signature": "sin[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply sin also known as sine ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sin",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "sin[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "tan",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array assumed to be in radian.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tan",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise tan of `array`.",
                        "signature": "tan[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply tan also known as tangent ."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tan",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "tan[dtype: DType](A: Matrix[dtype]) -> Matrix[dtype]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "hypot",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "hypot",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise hypotenuse of `array1` and`array2`.",
                        "signature": "hypot[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply hypot also known as hypotenuse which finds the longest section of a right triangle given the other two sides."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "hypot_fma",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "An Array.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shapes.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "hypot_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "Vectorized",
                            "description": "Sets utility function origin, defaults to `Vectorized.",
                            "kind": "parameter",
                            "name": "backend",
                            "passingKind": "pos_or_kw",
                            "type": "Backend"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "The element-wise hypotenuse of `array1` and`array2`.",
                        "signature": "hypot_fma[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[dtype]",
                        "summary": "Apply hypot also known as hypotenuse which finds the longest section of a right triangle given the other two sides."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "trig",
                "structs": [],
                "summary": "Implements Trigonometry functions for arrays.",
                "traits": []
              }
            ],
            "name": "math",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "mean",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[dtype]",
                        "returnsDoc": "",
                        "signature": "mean(array: NDArray[dtype], axis: Int = 0) -> NDArray[dtype]",
                        "summary": "Mean of array elements over a given axis. Args:     array: NDArray.     axis: The axis along which the mean is performed. Returns:     An NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "mean[dtype: DType](A: Matrix[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Calculate the arithmetic average of all items in the Matrix."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "mean[dtype: DType](A: Matrix[dtype], axis: Int) -> Matrix[dtype]",
                        "summary": "Calculate the arithmetic average of a Matrix along the axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "meanall",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n> print(A)\n[[      0.1315377950668335      0.458650141954422       0.21895918250083923     ]\n[      0.67886471748352051     0.93469291925430298     0.51941639184951782     ]\n[      0.034572109580039978    0.52970021963119507     0.007698186207562685    ]]\n2-D array  Shape: [3, 3]  DType: float32\n\n> print(nm.math.stats.meanall(A))\n0.39045463667975533\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "meanall",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[float64, 1]",
                        "returnsDoc": "Float64.",
                        "signature": "meanall(array: NDArray[dtype]) -> SIMD[float64, 1]",
                        "summary": "Mean of all items in the array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cummean",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cummean",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The mean of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "cummean[dtype: DType = float64](array: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Arithmatic mean of all items of an array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mode",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mode",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The mode of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "mode[dtype: DType = float64](array: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Mode of all items of an array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "median",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "An NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "median",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The median of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "median[dtype: DType = float64](array: NDArray[dtype]) -> SIMD[dtype, 1]",
                        "summary": "Median value of all items of an array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "std",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "Delta degree of freedom.",
                            "kind": "argument",
                            "name": "ddof",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "std",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "std[dtype: DType](A: Matrix[dtype], ddof: Int = 0) -> SIMD[dtype, 1]",
                        "summary": "Compute the standard deviation."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "Delta degree of freedom.",
                            "kind": "argument",
                            "name": "ddof",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "std",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "std[dtype: DType](A: Matrix[dtype], axis: Int, ddof: Int = 0) -> Matrix[dtype]",
                        "summary": "Compute the standard deviation along axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "variance",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "Delta degree of freedom.",
                            "kind": "argument",
                            "name": "ddof",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "variance",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "variance[dtype: DType](A: Matrix[dtype], ddof: Int = 0) -> SIMD[dtype, 1]",
                        "summary": "Compute the variance."
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Matrix.",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "Matrix[dtype]"
                          },
                          {
                            "convention": "read",
                            "description": "0 or 1.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "Delta degree of freedom.",
                            "kind": "argument",
                            "name": "ddof",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "variance",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Matrix[dtype]",
                        "returnsDoc": "",
                        "signature": "variance[dtype: DType](A: Matrix[dtype], axis: Int, ddof: Int = 0) -> Matrix[dtype]",
                        "summary": "Compute the variance along axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumpvariance",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "Optional(None)",
                            "description": "The mean of the array, if provided.",
                            "kind": "argument",
                            "name": "mu",
                            "passingKind": "pos_or_kw",
                            "type": "Optional[SIMD[dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumpvariance",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type..",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "cumpvariance[dtype: DType = float64](array: NDArray[dtype], mu: Optional[SIMD[dtype, 1]] = Optional(None)) -> SIMD[dtype, 1]",
                        "summary": "Population variance of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumvariance",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "Optional(None)",
                            "description": "The mean of the array, if provided.",
                            "kind": "argument",
                            "name": "mu",
                            "passingKind": "pos_or_kw",
                            "type": "Optional[SIMD[dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumvariance",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The variance of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "cumvariance[dtype: DType = float64](array: NDArray[dtype], mu: Optional[SIMD[dtype, 1]] = Optional(None)) -> SIMD[dtype, 1]",
                        "summary": "Variance of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumpstdev",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "Optional(None)",
                            "description": "The mean of the array, if provided.",
                            "kind": "argument",
                            "name": "mu",
                            "passingKind": "pos_or_kw",
                            "type": "Optional[SIMD[dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumpstdev",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The standard deviation of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "cumpstdev[dtype: DType = float64](array: NDArray[dtype], mu: Optional[SIMD[dtype, 1]] = Optional(None)) -> SIMD[dtype, 1]",
                        "summary": "Population standard deviation of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumstdev",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "read",
                            "default": "Optional(None)",
                            "description": "The mean of the array, if provided.",
                            "kind": "argument",
                            "name": "mu",
                            "passingKind": "pos_or_kw",
                            "type": "Optional[SIMD[dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumstdev",
                        "parameters": [
                          {
                            "default": "float64",
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "cumstdev[dtype: DType = float64](array: NDArray[dtype], mu: Optional[SIMD[dtype, 1]] = Optional(None)) -> SIMD[dtype, 1]",
                        "summary": "Standard deviation of a array."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "averages",
                "structs": [],
                "summary": "Averages and variances",
                "traits": []
              }
            ],
            "name": "statistics",
            "packages": [],
            "summary": ""
          }
        ],
        "summary": "Implements routines by topic:"
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "interp1d",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "xi",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "x",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "y",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"linear\")",
                        "description": "The interpolation method.",
                        "kind": "argument",
                        "name": "type",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      },
                      {
                        "convention": "read",
                        "default": "String(\"interpolate\")",
                        "description": "The fill value.",
                        "kind": "argument",
                        "name": "fill_method",
                        "passingKind": "pos_or_kw",
                        "type": "String"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "interp1d",
                    "parameters": [
                      {
                        "default": "float64",
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "The interpolated values of y at the points xi as An Array of `dtype`.",
                    "signature": "interp1d[dtype: DType = float64](xi: NDArray[dtype], x: NDArray[dtype], y: NDArray[dtype], type: String = String(\"linear\"), fill_method: String = String(\"interpolate\")) -> NDArray[dtype]",
                    "summary": "Interpolate the values of y at the points xi."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "interpolate",
            "structs": [],
            "summary": "Interpolate Module - Implements interpolation functions",
            "traits": []
          },
          {
            "aliases": [],
            "description": "It is like `scipy.signal` in Python.",
            "functions": [
              {
                "kind": "function",
                "name": "convolve2d",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "Input array 1.",
                        "kind": "argument",
                        "name": "in1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "read",
                        "description": "Input array 2. It should be of a smaller size of in1.",
                        "kind": "argument",
                        "name": "in2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Currently, the mode is \"valid\".\n\nTODO: Add more modes.\n\nExample:\n```mojo\nimport numojo as nm\nfn main() raises:\n    var in1 = nm.routines.creation.fromstring(\"[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\")\n    var in2 = nm.routines.creation.fromstring(\"[[1, 0], [0, -1]]\")\n    print(nm.science.signal.convolve2d(in1, in2))\n```",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "convolve2d",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "inferred",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[dtype]",
                    "returnsDoc": "",
                    "signature": "convolve2d[dtype: DType, //](in1: NDArray[dtype], in2: NDArray[dtype]) -> NDArray[dtype]",
                    "summary": "Convolve two 2-dimensional arrays."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "signal",
            "structs": [],
            "summary": "Implements signal processing.",
            "traits": []
          }
        ],
        "name": "science",
        "packages": [],
        "summary": ""
      }
    ],
    "summary": "NuMojo is a library for numerical computing in Mojo ðŸ”¥ similar to NumPy, SciPy in Python."
  },
  "version": "24.6.0"
}